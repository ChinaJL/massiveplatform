<?php
/**
 * @file
 * Code for the TM Base feature.
 */

include_once 'tm_organizations.features.inc';

/**
 * Implement hook_ds_field_info()
 */
function tm_organizations_ds_fields_info($entity_type) {
  if ($entity_type != 'node') {
    return;
  }
  $fields = array();

  // sponsor badge
  $fields['tm_ds_tm_sponsor'] = array(
    'title' => t('TM Sponsor'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('organization|full'),
    'function' => '_tm_sponsor'
  );

  // follower message
  $fields['tm_ds_organization_follow_message'] = array(
    'title' => t('Message for Followers'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('organization|*'),
    'function' => 'tm_fields_organization_follow_message',
    'properties' => array(
      'settings' => array(
        'Extra classes' => array(
          'type' => 'textfield',
          'description' => t('Classes for the link')
        )
      )
    )
  );

  // organization stats (followers)
  $fields['tm_ds_organization_stats'] = array(
    'title' => t('Organization Stats'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('organization|*'),
    'function' => '_tm_ds_organization_stats'
  );

  return array($entity_type => $fields);
}

/* Render organization's follower stats */
function _tm_ds_organization_stats($field, $title = NULL) {

  // check if user is flagged
  $node = $field['entity'];
  $nid = $node->nid;

  $followers_text = "Follower";
  $num_followers = tm_organizations_get_num_followers($nid);

  $html = "";
  if ($num_followers > 0) {
    if ($num_followers > 1) { $followers_text = "Followers"; }
    $html = "<div class='tm_stats_container'>";
    $html .= "<a href='/node/" . $nid . "/followers'><span class='tm_stats tm_stats_followers'>" . $num_followers . " <span class='tm_stats_followers_divider'>|</span> " . $followers_text . " </span></a>";
    $html .= "</div>";
  }

  return $html;
}

/**
 * Print an indication that a company is a TM sponsor
 */
function _tm_sponsor($field, $title = NULL) {
  global $conf;
  //$flag = flag_get_flag('tm_sponsor') or die('no "bookmarks" flag defined');
  $flag = flag_get_flag('tm_sponsor');
  if ($flag->is_flagged($field['entity']->nid)) {
    return t('A ' . $conf['tm_site_name']) . ' ' . l('sponsor', 'sponsors') . '';
  }
}

/* 
 * Alters a node on saving to make sure organizations have the owner field set to author
 */
function tm_organizations_node_presave($node){
  
  // make sure we are working on an organization node
  if ($node->type != "organization") { return; }

  // Step 1. See how many owners the organization has
  $num_owners = 0;
  $owned_by_node_creator = false;
  $owner_uid = 0;
  foreach ($node->field_owner[$node->language] as $owner) {

    // get owner uid in case transferring ownership
    if ($num_owners == 0) {
      $owner_uid = $owner['target_id'];
    }
    
    // check if owned by node creator
    if ($owner['target_id'] == $node->uid) {
      $owned_by_node_creator = true;
    }

    $num_owners++;
  }

  // Step 2. If no owner set, then add the node owner
  if ($num_owners == 0){
    $node->field_owner[$node->language][] = array('target_id' => $node->uid);
  }
  
  // Step 3. If not owned by node creator, re-assign ownership
  // Note: disabled for time being, as no audit trail of original creator kept
  /*if ((!$owned_by_node_creator) and ($num_owners > 0)) {

    $new_owner = user_load($owner_uid);
    $first_name = $new_owner->field_user_first_name['und'][0]['value'];
    $last_name = $new_owner->field_user_last_name['und'][0]['value'];

    $message = "Ownership of this profile has been assigned to " . $first_name . " " . $last_name . ".";
    drupal_set_message($message, 'page_notice');
    $node->uid = $owner_uid;
  }*/

}

// Check if the user can create a company
// 
function tm_organizations_check_user_can_create_company($uid) {

  global $conf;
  $account = user_load($uid);

  // Must be an approved user
  if (!in_array("approved user", $account->roles)) {
    return false;
  }

  // Chapter leaders, moderators can always create companies
  if (in_array("chapter leader", $account->roles) or in_array("moderator", $account->roles)) {
    return true;
  }

  // Limit number of companies a user can create
  // Set tm_add_company_limit
  $users_companies = tm_users_get_companies($uid);
  $tm_add_company_limit = 8; // default if not set
  if (isset($conf["tm_add_company_limit"])) {
    $tm_add_company_limit = $conf["tm_add_company_limit"];
  }

  return (sizeof($users_companies) < $tm_add_company_limit);
}


function tm_organizations_preprocess_page(&$variables, $hook) {

  global $user;
  global $conf;

  $default_message = "Discover and connect with other companies in the " . $conf["tm_site_name"] . " network.";

  // Don't allow user to exceed limit of adding companies
  if (current_path() == "node/add/organization") {
    if (!tm_organizations_check_user_can_create_company($user->uid)) {
      $message = "Sorry, you've reached the limit of the number of company profiles you can create.";
      drupal_set_message($message, 'page_notice');
      drupal_goto("user/$user->uid/companies");
    }
  }

  // Put a notice to create company accounts on company page
  if (current_path() == "companies") {

    // Ignore anonymous users
    if (!user_is_logged_in()) {
      drupal_set_message($default_message, 'page_notice');
      return;
    }

    // Only a loaded user has values for the fields.
    $loaded = user_load($user->uid);

    // Check if user has created any company profiles
    $user_has_companies = false;
    $query = new EntityFieldQuery();
    $markup = '';
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'organization')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->fieldCondition('field_owner', 'target_id', $user->uid, '=');
    $result = $query->execute();

    if (isset($result['node'])) {
      $user_has_companies = true;
    }

    // Check if user has provided a job role
    $job_role = null;
    if (isset($loaded->field_job_role[LANGUAGE_NONE][0]['value'])) {
      $job_role = $loaded->field_job_role[LANGUAGE_NONE][0]['value'];
    }

    // Check if user has provided a job organization
    $job_organization = null;
    if (isset($loaded->field_job_organization[LANGUAGE_NONE][0]['value'])) {
      $job_organization = $loaded->field_job_organization[LANGUAGE_NONE][0]['value'];
    }

    // Don't show message if no role or organizaton set
    if (($job_organization == null) && ($job_role == null)) {
      drupal_set_message($default_message, 'page_notice');
      return;
    }

    // Option 1. Create a message if user already has a company
    if ($user_has_companies) {
      $message = "Discover and connect with other companies in the " . $conf["tm_site_name"] . " network. View " . l(t('your company profiles'), 'user/' . $loaded->uid . "/companies") . "";
      drupal_set_message($message, 'page_notice');
      return;
    }

    // Option 2. Show message to user to add a company profile
    if (!in_array("approved user", $loaded->roles)) { 
      $add_profile_html = "<a href='javascript:void(0)' onclick='document.getElementById(\"pending_approval\").style.display = \"block\";'>company profile</a> (pending approval)";
      } else {
        $add_profile_html = "<a href='/node/add/organization'>company profile</a>";
    }

    // Create a message
    if ($job_organization != null) {
      $message = "Is <strong>" . t($job_organization)  . "</strong> a professional organization? Get discovered by adding a " . $add_profile_html . ".";
    }
    elseif ($job_role != null) {
      $message = "Get your company discovered by adding a " . $add_profile_html . ".";
    }

    // Display message
    $message .= "<div id='pending_approval' style='display: none;'>Your account is currently pending approval by our team. Once we've approved your account, you will be able to add your company profile.</div>";
    drupal_set_message($message, 'page_notice');

  }
  
  // Put a notice to create company accounts on users company page
  // Target page, ie: /user/10447/companies
  $parts = explode("/", current_path());
  if (sizeof($parts) == 3) {
    if (($parts[0] == "user") and ($parts[2] == "companies")) {
      if ($parts[1] == $user->uid) {        
        $add_profile_html = "<a href='/node/add/organization'>company profile</a>";
        $message = "You are managing the following company profiles. ";
        if (!tm_organizations_check_user_can_create_company($user->uid)) {
          $message .= "You cannot add any more company profiles.";
        } else {
          $message .= "Add a new " . $add_profile_html . ".";
        }
        drupal_set_message($message, 'page_notice');
      }
    }
  }

}

// Add a link to sponsors from the companies page
function tm_organizations_views_post_execute(&$view) {

  if ($view->name == 'companies') {
    $view->build_info['title'] = "Companies &middot; <a style='color: red;' href='/sponsors'>Sponsors</a>";
  }

  if ($view->name == 'sponsors') {
    $view->build_info['title'] = "<a href='/companies'>Companies</a> &middot; Sponsors";
  }

}


/*
 * Display follow message for organziations
 */
function tm_fields_organization_follow_message($field) {
  
  if (!user_is_logged_in()) {
    return;
  }

  if ($field['entity']->type == "organization") {

    $node_id = $field['entity']->nid;

    // always render following message 
    // it is hidden on page load and displayed in tm_organizations_preprocess_flag
    $company = node_load($node_id);
    if (isset($company->field_follower_message[LANGUAGE_NONE][0]['value'])) {
      $message = $company->field_follower_message[LANGUAGE_NONE][0]['value'];
      $message = strip_tags(trim($message));
      if ($message != "") {
        return "You are following " . t($company->title) . "<p class='ds-organization-follow-message-insert'>" . $message . "</p>";
      }
    } else {
      return "You are following " . t($company->title);
    }
  }

}


function tm_organizations_preprocess_flag(&$variables) {

  if (!user_is_logged_in()) {
    return;
  }

  // operate on follow_organizations
  $flag = &$variables['flag'];
  $entity_id = $variables['entity_id'];
  if ($flag->name != "follow_organizations") {
    return;
  }

  // if already following
  // show the .tm-ds-organization-follow-message field
  if ($variables['last_action'] == "flagged") {

    drupal_add_js('
    jQuery(document).ready(function($) {

      // show message
      $( ".tm-ds-organization-follow-message").show();

      // hide when unfollowed
      $( ".flag-follow-organizations .unflag-action").click(function() {
        setTimeout(function() {
          $( ".tm-ds-organization-follow-message" ).slideUp();
        }, 500); 
      }); 

    });
    ', 'inline');
    return;
  }

  // hide follow message when unfollowing
  if ($variables['last_action'] == "unflagged") {

    drupal_add_js('
    jQuery(document).ready(function($) {

      // show when followed
      $( ".flag-follow-organizations .flag-action").click(function() {
        setTimeout(function() {
          $( ".tm-ds-organization-follow-message" ).slideDown();
        }, 500); 
      }); 

    });
    ', 'inline');
  }

}

/* Get count of how many followers a company has */
function tm_organizations_get_num_followers($nid) {

  $flag = flag_get_flag("follow_organizations");
  $query = "SELECT COUNT(*) total FROM {flagging} f WHERE f.fid = :fid AND f.entity_id = :nid AND f.entity_type = 'node'";
  $result = db_query($query, array(':fid' => $flag->fid, ':nid' => $nid))->fetch();
  return $result->total;
}

/* Customize organization edit form */
function tm_organizations_form_alter(&$form, $form_state, $form_id) {
  global $conf;

  // Modify company edit form
  if ($form_id == 'organization_node_form') {
    // friendly url
    $form['field_friendly_url'][LANGUAGE_NONE][0]['value']['#title'] = $conf["tm_field_company_friendly_url_title"];
    $form['field_friendly_url'][LANGUAGE_NONE][0]['value']['#description'] = $conf["tm_field_company_friendly_url_description"];

    // Show additional link fields based on $conf['tm_users_link_fields']
    $all_fields = array('website', 'twitter', 'facebook', 'linkedin', 'instagram', 'youtube', 'vimeo', 'snapchat');
    if (isset($conf["tm_organizations_link_fields"])) {
      $show_link_fields = $conf["tm_organizations_link_fields"];
      foreach ($all_fields as $field) {
        if (!in_array($field, $show_link_fields)) {
          unset($form['field_link_' . $field]); // hide field
        }
      }
    }
  }
  
}

/* Modify organization node content before being displayed */
function tm_organizations_node_view($node, $view_mode, $langcode) {

  if ($node->type != "organization") {
    return;
  }

  // Show additional link fields based on $conf['tm_users_link_fields']
  global $conf;
  $all_fields = array('website', 'twitter', 'facebook', 'linkedin', 'instagram', 'youtube', 'vimeo', 'snapchat');
  if (isset($conf["tm_organizations_link_fields"])) {
    $show_link_fields = $conf["tm_organizations_link_fields"];
    foreach ($all_fields as $field) {
      if (!in_array($field, $show_link_fields)) {
        unset($node->content['field_link_' . $field]); // hide field
      }
    }
  }

}

/* Set default images */
/* Refer to settings.php configuration */
function tm_organizations_preprocess_field(&$variables) {

  global $conf;

  // Check element type
  $element_type = null;
  if (isset($variables['element']['#object']->type)) {
    $element_type = $variables['element']['#object']->type;
  }

  // Only operate on event
  if ($element_type != "organization") {
    return;
  }

  // Replace default cover image
  if ($variables['element']['#field_name'] == 'field_image') {
    $variables['items'][0]['#item']['uri'] = _tm_organizations_get_default_image($variables['items'][0]['#item']['uri'], $variables['element']['#object']->nid);
  }
}

/**
 * Return default cover image
 * If tm_images_default_path is set then return a random image based in node id
 * URL must be in public:// format
 */
function _tm_organizations_get_default_image($default_image_uri, $nid) {

  global $conf;

  if (isset($conf["tm_images_default_path"])) {
    if ($default_image_uri == $conf["tm_images_default_field_image"]) {
      $cover_files = $conf["tm_images_default_cover_organization"];
      $image_index = $nid % sizeof($cover_files);
      $cover_file = $conf["tm_images_default_path"] . $cover_files[$image_index];
      return $cover_file;
    }
  }

  // no random image, return what we got
  return $default_image_uri;
}
