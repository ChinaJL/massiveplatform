<?php
/**
 * @file
 * Code for the TM Base feature.
 */

include_once 'tm_organizations.features.inc';

include_once 'tm_organizations.display.inc';
include_once 'tm_organizations.follow.inc';
include_once 'tm_organizations.helpers.inc';
include_once 'tm_organizations.moderate.inc';


/*
* Implements hook_menu()
*/
function tm_organizations_menu() {

  $items['node/%node/follow_organization'] = array(
    'title' => 'Follow organization',
    'page callback' => 'tm_organizations_follow_message',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/moderate_report_organization'] = array(
    'title' => 'Report organization profile',
    'page callback' => 'tm_organizations_moderate_report_organization',
    'page arguments' => array(1),
    'access callback' => 'tm_organizations_moderate_report_check',
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/moderate_report_organization_resolved'] = array(
    'title' => 'Report organization profile',
    'page callback' => 'tm_organizations_moderate_report_organization_resolved',
    'page arguments' => array(1),
    'access callback' => 'tm_organizations_moderate_report_resolved_check',
    'type' => MENU_CALLBACK,
  );

  return $items;

}

/* 
 * Alters a node on saving to make sure organizations have the owner field set to author
 */
function tm_organizations_node_presave($node){
  
  // make sure we are working on an organization node
  if ($node->type != "organization") { return; }

  // Step 1. See how many owners the organization has
  $num_owners = 0;
  $owned_by_node_creator = false;
  $owner_uid = 0;
  foreach ($node->field_owner[$node->language] as $owner) {

    // get owner uid in case transferring ownership
    if ($num_owners == 0) {
      $owner_uid = $owner['target_id'];
    }
    
    // check if owned by node creator
    if ($owner['target_id'] == $node->uid) {
      $owned_by_node_creator = true;
    }

    $num_owners++;
  }

  // Step 2. If no owner set, then add the node owner
  if ($num_owners == 0){
    $node->field_owner[$node->language][] = array('target_id' => $node->uid);
  }
  
  // Step 3. If not owned by node creator, re-assign ownership
  // Note: disabled for time being, as no audit trail of original creator kept
  /*if ((!$owned_by_node_creator) and ($num_owners > 0)) {

    $new_owner = user_load($owner_uid);
    $first_name = $new_owner->field_user_first_name['und'][0]['value'];
    $last_name = $new_owner->field_user_last_name['und'][0]['value'];

    $message = "Ownership of this profile has been assigned to " . $first_name . " " . $last_name . ".";
    drupal_set_message($message, 'page_notice');
    $node->uid = $owner_uid;
  }*/

}

/**
 * Check if the user can create a company
 */ 
function tm_organizations_check_user_can_create_company($uid) {

  global $conf;
  $account = user_load($uid);

  // If tm_add_company_enabled is false, only moderator can create company profiles
  if (isset($conf["tm_add_company_enabled"])) {
    if ($conf["tm_add_company_enabled"] == false) {
      if (!in_array("moderator", $account->roles)) {
        return false;
      }
    }
  }

  // Must be an approved user
  if (!in_array("approved user", $account->roles)) {
    return false;
  }

  // Chapter leaders, moderators can always create companies
  if (in_array("chapter leader", $account->roles) or in_array("moderator", $account->roles)) {
    return true;
  }

  // Limit number of companies a user can create
  // Set tm_add_company_limit
  $users_companies = tm_users_get_companies($uid);
  $tm_add_company_limit = 8; // default if not set
  if (isset($conf["tm_add_company_limit"])) {
    $tm_add_company_limit = $conf["tm_add_company_limit"];
  }

  return (sizeof($users_companies) < $tm_add_company_limit);
}


/**
 * Preprocess page
 */
function tm_organizations_preprocess_page(&$variables, $hook) {

  global $user;
  global $conf;

  $default_message = "Discover and connect with other companies in the " . $conf["tm_site_name"] . " network.";

  if (module_exists("tm_search_api")) {
    $default_message = "Find and discover companies in our network with <a href='/search'>" . $conf["tm_site_name"] . " Search</a>.";
  }

  // Don't allow user to exceed limit of adding companies
  if (current_path() == "node/add/organization") {
    if (!tm_organizations_check_user_can_create_company($user->uid)) {
      if (!user_is_logged_in()) {
        return;
      }
      $message = "Sorry, you've reached the limit of the number of company profiles you can create.";
      drupal_set_message($message, 'page_notice');
      drupal_goto("user/" . $user->uid . "/companies");
    }
  }

  // Put a notice to create company accounts on company page
  if (current_path() == "companies") {

    // Ignore anonymous users
    if (!user_is_logged_in()) {
      drupal_set_message($default_message, 'page_notice');
      return;
    }

    // Only a loaded user has values for the fields.
    $loaded = user_load($user->uid);

    // Check if user has created any company profiles
    $user_has_companies = false;
    $query = new EntityFieldQuery();
    $markup = '';
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'organization')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->fieldCondition('field_owner', 'target_id', $user->uid, '=');
    $result = $query->execute();

    if (isset($result['node'])) {
      $user_has_companies = true;
    }

    // Check if user has provided a job role
    $job_role = null;
    if (isset($loaded->field_job_role[LANGUAGE_NONE][0]['value'])) {
      $job_role = $loaded->field_job_role[LANGUAGE_NONE][0]['value'];
    }

    // Check if user has provided a job organization
    $job_organization = null;
    if (isset($loaded->field_job_organization[LANGUAGE_NONE][0]['value'])) {
      $job_organization = $loaded->field_job_organization[LANGUAGE_NONE][0]['value'];
    }

    // Don't show message if no role or organizaton set
    if (($job_organization == null) && ($job_role == null)) {
      drupal_set_message($default_message, 'page_notice');
      return;
    }

    // Option 1. Create a message if user already has a company
    if ($user_has_companies) {
      $message = "Discover and connect with other companies in the " . $conf["tm_site_name"] . " network. View " . l(t('your company profiles'), 'user/' . $loaded->uid . "/companies") . "";
      drupal_set_message($message, 'page_notice');
      return;
    }

    // Option 2. Show message to user to add a company profile
    if (!in_array("approved user", $loaded->roles)) { 
      $add_profile_html = "<a href='javascript:void(0)' onclick='document.getElementById(\"pending_approval\").style.display = \"block\";'>company profile</a> (pending approval)";
      } else {
        $add_profile_html = "<a href='/node/add/organization'>company profile</a>";
    }

    // Create a message
    if ($job_organization != null) {
      $message = "Is <strong>" . t($job_organization)  . "</strong> a company or organization? Get discovered by adding a " . $add_profile_html . ".";
    }
    elseif ($job_role != null) {
      $message = "Get your company discovered by adding a " . $add_profile_html . ".";
    }

    // Display message
    $message .= "<div id='pending_approval' style='display: none;'>Your account is currently pending approval by our team. Once we've approved your account, you will be able to add your company profile.</div>";
    drupal_set_message($message, 'page_notice');

  }
  
  // Put a notice to create company accounts on users company page
  // Target page, ie: /user/10447/companies
  $parts = explode("/", current_path());
  if (sizeof($parts) == 3) {
    if (($parts[0] == "user") and ($parts[2] == "companies")) {
      if ($parts[1] == $user->uid) {        
        $add_profile_html = "<a href='/node/add/organization'>company profile</a>";
        $message = "You are managing the following company profiles. ";
        if (!tm_organizations_check_user_can_create_company($user->uid)) {
          $message .= "You cannot add any more company profiles.";
        } else {
          $message .= "Add a new " . $add_profile_html . ".";
        }
        drupal_set_message($message, 'page_notice');
      }
    }
  }

  // Add photo edit js
  if (isset($variables['node'])) {
    tm_organizations_add_photo_edit_js($variables['node']);
  }

}

/**
 * Customize organization edit form 
 */
function tm_organizations_form_alter(&$form, $form_state, $form_id) {
  global $conf;

  // Modify company edit form
  if ($form_id != 'organization_node_form') {
    return;
  }

  // friendly url
  $form['field_friendly_url'][LANGUAGE_NONE][0]['value']['#title'] = $conf["tm_field_company_friendly_url_title"];
  $form['field_friendly_url'][LANGUAGE_NONE][0]['value']['#description'] = $conf["tm_field_company_friendly_url_description"];

  // Show additional link fields based on $conf['tm_users_link_fields']
  $all_fields = array('website', 'twitter', 'facebook', 'linkedin', 'instagram', 'youtube', 'vimeo', 'snapchat');
  if (isset($conf["tm_organizations_link_fields"])) {
    $show_link_fields = $conf["tm_organizations_link_fields"];
    foreach ($all_fields as $field) {
      if (!in_array($field, $show_link_fields)) {
        unset($form['field_link_' . $field]); // hide field
      }
    }
  }

  // hide cover video field if not enabled
  if (!$conf["tm_cover_videos_enabled"]) {
    unset($form['field_company_cover_video']);
  }

  // hide moderator settings for non moderators
  global $user;
  $perm_is_moderator_or_admin = ((in_array("moderator", $user->roles)) || (in_array("administrator", $user->roles)));
  if (!$perm_is_moderator_or_admin) {
    field_group_hide_field_groups($form, array('group_company_moderator_settings'));
  }

  // check if payments not enabled
  if (!module_exists("tm_payments")) {
    field_group_hide_field_groups($form, array('group_company_payments'));
    unset($form['field_company_payments_enabled']);
    unset($form['field_company_payment_commission']);
  }
  
}

/**
 * Modify organization node content before being displayed
 */
function tm_organizations_node_view($node, $view_mode, $langcode) {

  if ($node->type != "organization") {
    return;
  }

  // Add javascript for chapter display
  if ($view_mode == 'full') {
    drupal_add_js(drupal_get_path('module', 'tm_organizations') . '/js/tm_organizations.js');
  }

  // Show additional link fields based on $conf['tm_users_link_fields']
  global $conf;
  $all_fields = array('website', 'twitter', 'facebook', 'linkedin', 'instagram', 'youtube', 'vimeo', 'snapchat');
  if (isset($conf["tm_organizations_link_fields"])) {
    $show_link_fields = $conf["tm_organizations_link_fields"];
    foreach ($all_fields as $field) {
      if (!in_array($field, $show_link_fields)) {
        unset($node->content['field_link_' . $field]); // hide field
      }
    }
  }

}

/**
 * Fast lookup of organizational title
 */
function tm_organizations_get_title($nid) {

  $query = "SELECT title FROM node WHERE nid = :nid";
  $rows = db_query($query, array(':nid' => $nid))->fetch();
  if ($rows != null) {
    return $rows->title;
  }
  return null;
}

