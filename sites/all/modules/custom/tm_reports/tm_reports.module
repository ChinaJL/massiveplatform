<?php
/**
 * @file
 * Code for the TM Reports feature.
 */

include_once 'tm_reports.features.inc';

function tm_reports_menu() {

   $items = array();

   $items['chapters/%/insights'] = array(
    'title' => 'Chapter insights',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tm_reports_chapter_insights'),
    'access arguments' => array('tm invite own chapters'),
    'type' => MENU_CALLBACK,
   );

   $items['admin/global_insights'] = array(
    'title' => 'Global insights',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tm_reports_global_insights'),
    'access callback' => 'tm_reports_user_is_moderator',   
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
   );

   $items['node/%/unapproved-members'] = array(
    'title' => t('Unapproved Members'),
    'page callback' => 'tm_reports_unapproved_members_redirect',
    'page arguments' => array(1),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
   );

   $items['node/%/chapter-insights'] = array(
    'title' => t('Chapter insightsw'),
    'page callback' => 'tm_reports_chapter_insights_redirect',
    'page arguments' => array(1),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
   );

   return $items;
}

/**
 * Check user is moderator
 */
function tm_reports_user_is_moderator() {
  global $user;
  return (in_array("moderator", $user->roles) or in_array("administrator", $user->roles));
}

/** 
 * Redirect from chapter reports to clean URL for unapproved members
 */
function tm_reports_unapproved_members_redirect($nid) {
  $chapter = node_load($nid);
  $redirect_url = drupal_get_path_alias("node/" . $nid) . "/unapproved-members";
  drupal_goto("/" . $redirect_url);
}

/** 
 * Redirect from chapter reports to clean URL for chapter insights
 */
function tm_reports_chapter_insights_redirect($nid) {
  $chapter = node_load($nid);
  $redirect_url = drupal_get_path_alias("node/" . $nid) . "/insights";
  drupal_goto("/" . $redirect_url);
}

/**
 * Implements hook_views_query_alter().
 */
function tm_reports_views_query_alter(&$view, &$query) {
 if ($view->current_display == 'chapters_report' || $view->current_display == 'chapters_report_export') {
  _tm_reports_views_query_alter_chapter_report($view, $query);
 }

 if ($view->current_display == 'industry_report' || $view->current_display == 'industry_report_export') {
  _tm_reports_views_query_alter_industry_report($view, $query);
 }
}

/**
* Implements hook_views_pre_render().
*/
function tm_reports_views_pre_render(&$view) {
  if ($view->current_display == 'chapters_report' || $view->current_display == 'chapters_report_export') {
    _tm_reports_views_pre_render_chapter_report($view);
  }

  if ($view->current_display == 'industry_report' || $view->current_display == 'industry_report_export') {
    _tm_reports_views_pre_render_industry_report($view);
  }
}

/* Modify chapter report view query */
function _tm_reports_views_query_alter_chapter_report(&$view, &$query) {

  // Rewrite JOIN Date of Last Event and Time Ago (field_data_field_event_date table).
  $join = new views_join;
  $join->construct('field_data_field_event_date', 'field_chapter_node', 'nid', 'entity_id', array(), 'LEFT');
  $join->extra = array(
    array(
        'field' => 'entity_type',
        'value' => 'node',
    ),
    array(
        'field' => 'deleted',
        'value' => '0',
    ),
    array(
        'field' => 'field_event_date_value',
        'operator' => '>=',
        'value' => date('Y-m-d', strtotime('-1 year')),
    ),
    array(
        'field' => 'field_event_date_value',
        'operator' => '<',
        'value' => date('Y-m-d'),
    )   
  );
  $query->add_relationship('field_chapter_node__field_data_field_event_date', $join, 'node');
  
  /* Rewrite community managers JOIN */
  $join = new views_join;
  $join->construct('field_data_field_community_managers', 'node', 'nid', 'entity_id', array(), 'LEFT');
   $join->extra = array(
    array(
        'field' => 'entity_type',
        'value' => 'node',
    ),
    array(
        'field' => 'deleted',
        'value' => '0',
    ),
    /* Add new condition */
    array(
        'field' => 'entity_id',
        'value' => 'field_chapter_node__field_data_field_event_date.entity_id',
    )
  );
  $query->add_relationship('field_data_field_community_managers', $join, 'field_data_field_community_managers');

  /* JOIN next event date */
  $join = new views_join;
  $join->construct('field_data_field_event_date', 'field_chapter_node', 'nid', 'entity_id', array(), 'LEFT');
  $join->extra = array(
    array(
        'field' => 'entity_type',
        'value' => 'node',
    ),
    array(
        'field' => 'deleted',
        'value' => '0',
    ),
    array(
        'field' => 'field_event_date_value',
        'operator' => '>',
        'value' => date('Y-m-d', strtotime('now')),
    )
  );
  $query->add_relationship('field_chapter_node__field_data_field_next_event_date', $join, 'node');
  $query->fields['field_chapter_node__field_data_field_event_date_field_event__3']['table'] = 'field_chapter_node__field_data_field_next_event_date';
  
  /* Add nid field of the next event (need in the link) */
  $query->add_field(null, 'field_chapter_node__field_data_field_next_event_date.entity_id', 'next_event_date_entity_id', array('function' => 'max')); 
}

/* Modify chapter report view pre render */
function _tm_reports_views_pre_render_chapter_report(&$view) {

  // developer: uncomment to reset flag count table
  //_tm_flags_fix_flag_counts();

  // Vars for members counts
  $table = 'flagging';
  $table_alias = 'fl';
  $real_field = 'fid';

  // Add additional columns for each row
  foreach ($view->result as $i => $result) {

    // CHAPTER ID
    $chapter_id = $view->result[$i]->nid;

    // GET INSIGHTS
    $insights = _tm_reports_get_chapter_insights($chapter_id)["data_values"];

    // Last Date format
    if (is_numeric($i) && (!empty($view->result[$i]->field_field_event_date[0]['raw']['value']))) {

      // Change Date format
      $event_date = strtotime($view->result[$i]->field_field_event_date[0]['raw']['value']);
      $formatted_date = date("Y-m-d", $event_date);
      $view->result[$i]->field_field_event_date[0]['rendered']['#markup'] = $formatted_date;
      
      // Link date to event
      $event_nid = $view->result[$i]->field_chapter_node_nid;
      $url = 'node/'.$event_nid;
      $interval = format_interval((time() - $event_date) , 1) . t(' ago');
      $event_time_ago_link = l($interval, $url);
      $view->result[$i]->field_field_event_date_1[0]['rendered']['#markup'] = "<span style='white-space: nowrap;'>" . $event_time_ago_link . "</span>";     
    }

    // Next Date format
    if (is_numeric($i) && (!empty($view->result[$i]->field_field_event_date_3[0]['raw']['value']))) {
      // Change Date format
      $event_date = strtotime($view->result[$i]->field_field_event_date_3[0]['raw']['value']);
      $interval = format_interval(($event_date - time()) , 1);
      $next_event_nid = $view->result[$i]->next_event_date_entity_id;
      $url = 'node/'.$next_event_nid;
      $next_event_link = l($interval, $url);        
      $view->result[$i]->field_field_event_date_3[0]['rendered']['#markup'] = $next_event_link;   
    }

    // NEW MEMBERS PAST 30 DAYS
    $view->field["members_30_days_total"] = _tm_reports_add_handler_field_numeric($view, $table, $table_alias, $real_field, "members_30_days_total", "New Members (30 Days)");
    $view->field["members_30_days_total"]->view->result[$i]->members_30_days_total = $insights["members_30_days_total"];

    // NEW MEMBERS PAST 90 DAYS
    $view->field["members_90_days_total"] = _tm_reports_add_handler_field_numeric($view, $table, $table_alias, $real_field, "members_90_days_total", "New Members (90 Days)");
    $view->field["members_90_days_total"]->view->result[$i]->members_90_days_total = $insights["members_90_days_total"];

     // MEMBERSHIP GROWTH % PAST 30 DAYS
    $view->field["members_30_days_pct"] = _tm_reports_add_handler_field_numeric($view, $table, $table_alias, $real_field, "members_30_days_pct", "% Growth (30 Days)");
    $view->field["members_30_days_pct"]->view->result[$i]->members_30_days_pct = $insights["members_30_days_pct"];

    // MEMBERSHIP GROWTH % PAST 90 DAYS
    $view->field["members_90_days_pct"] = _tm_reports_add_handler_field_numeric($view, $table, $table_alias, $real_field, "members_90_days_pct", "% Growth (90 Days)");
    $view->field["members_90_days_pct"]->view->result[$i]->members_90_days_pct = $insights["members_90_days_pct"];

    // TOTAL MEMBERS
    $view->field["members_total"] = _tm_reports_add_handler_field_numeric($view, $table, $table_alias, $real_field, "members_total", "Total Members");
    $view->field["members_total"]->view->result[$i]->members_total = $insights["members_total"];

    // TOTAL APPROVED MEMBERS
    $view->field["members_approved_total"] = _tm_reports_add_handler_field_numeric($view, $table, $table_alias, $real_field, "members_approved_total", "Total Approved");
    $view->field["members_approved_total"]->view->result[$i]->members_approved_total = $insights["members_approved_total"];

    // TOTAL UNAPPROVED MEMBERS
    $view->field["members_unapproved_total"] = _tm_reports_add_handler_field_numeric($view, $table, $table_alias, $real_field, "members_unapproved_total", "Total Unapproved");
    $view->field["members_unapproved_total"]->view->result[$i]->members_unapproved_total = $insights["members_unapproved_total"];

    // % UNAPPROVED MEMBERS
    $view->field["members_unapproved_pct"] = _tm_reports_add_handler_field_numeric($view, $table, $table_alias, $real_field, "members_unapproved_pct", "% Unapproved");
    $view->field["members_unapproved_pct"]->view->result[$i]->members_unapproved_pct = $insights["members_unapproved_pct"];

  }
}

/**
 * Calculate stats for chapter
 * NOTE: Cached
 */
function _tm_reports_get_chapter_insights($chapter_id) {

  // check cache
  $cache = cache_get('tm-reports-get-chapter-insights-' . $chapter_id, 'cache');
  if (!empty($cache)) {
    return $cache->data;
  }

  $insights = array();

  $flag = flag_get_flag('signup', NULL);
  $approved_role = user_role_load_by_name("approved user");
  $days_ago_30 = time() - (60 * 60 * 24 * 30); // 30 days ago
  $days_ago_90 = time() - (60 * 60 * 24 * 90); // 90 days ago

  // NEXT EVENT DATE
  // Fetch the nearest upcoming event that references a particular chapter.
  // Only returns one event, the one with the closest starting date.
  // Fetch the current and make sure it's UTC and user-defined timezone.
  $current_date = new DateTime('now', new DateTimeZone('UTC'));
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_chapter', 'target_id', $chapter_id)
    ->fieldCondition('field_event_date', 'value2', $current_date->format('Y-m-d H:i:s'), '>=')
    ->fieldOrderBy('field_event_date', 'value2', 'ASC')
    ->range(0,1);
  $result = $query->execute();

  // Initialize time_until.
  $time_until = NULL;

  $next_event_time = "No upcoming events";
  if (isset($result['node'])) {
    $next_event_array = array_keys($result['node']);
    $next_event = node_load($next_event_array[0]);
    $event_date = field_get_items('node',$next_event,'field_event_date');
    
    // Create datetime object and ensure UTC timezone, instead of user-defined timezone.
    $event_timezone = _tm_get_event_timezone($next_event);
    $event_datetime = new DateTime($event_date[0]['value'], new DateTimeZone($event_timezone));
    //$time_until = format_interval($event_datetime->format('U') - $current_date->format('U'), 2);
    $next_event_time = _tm_event_time_elapsed($event_datetime->format('U') - $current_date->format('U'));
    if ($time_until == "0 seconds") {
      $next_event_time = "Event now";
    }
  }
  $insights["next_event_time"] = $next_event_time;

  // LAST EVENT DATE
  // Fetch the nearest upcoming event that references a particular chapter.
  // Only returns one event, the one with the closest starting date.
  // Fetch the current and make sure it's UTC and user-defined timezone.
  $current_date = new DateTime('now', new DateTimeZone('UTC'));
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_chapter', 'target_id', $chapter_id)
    ->fieldCondition('field_event_date', 'value2', $current_date->format('Y-m-d H:i:s'), '<=')
    ->fieldOrderBy('field_event_date', 'value2', 'DESC')
    ->range(0,1);
  $result = $query->execute();

  // Initialize time_until.
  $time_until = NULL;

  $last_event_time = "No past events";
  if (isset($result['node'])) {
    $next_event_array = array_keys($result['node']);
    $next_event = node_load($next_event_array[0]);
    $event_date = field_get_items('node',$next_event,'field_event_date');
    
    // Create datetime object and ensure UTC timezone, instead of user-defined timezone.
    $event_timezone = _tm_get_event_timezone($next_event);
    $event_datetime = new DateTime($event_date[0]['value'], new DateTimeZone($event_timezone));
    //$time_until = format_interval($event_datetime->format('U') - $current_date->format('U'), 2);
    $last_event_time = _tm_event_time_elapsed($current_date->format('U') - $event_datetime->format('U'));
  }
  $insights["last_event_time"] = $last_event_time . " ago";

  // NUMBER OF EVENTS PAST YEAR
  $query_sql = "SELECT COUNT(*) total FROM {field_data_field_event_date} e 
  LEFT JOIN field_data_field_chapter on field_data_field_chapter.entity_id = e.entity_id
  WHERE field_data_field_chapter.entity_type = 'node'
  AND field_data_field_chapter.field_chapter_target_id = :chapter_id
  AND e.entity_type = 'node' AND field_event_date_value >= DATE_SUB(NOW(),INTERVAL 1 YEAR);";
  $query = db_query($query_sql, array(':chapter_id' => $chapter_id))->fetch();
  $insights["num_events_past_12_months"] = $query->total;

  // NEW MEMBERS PAST 30 DAYS
  $query_sql = "SELECT COUNT(*) total FROM {flagging} f WHERE f.fid = :fid AND f.entity_type = 'node' AND f.entity_id = :chapter_id AND timestamp >= :time_ago";
  $query = db_query($query_sql, array(':fid' => $flag->fid, ':chapter_id' => $chapter_id, ':time_ago' => $days_ago_30))->fetch();
  $insights["members_30_days_total"] = $query->total;

  // NEW MEMBERS PAST 90 DAYS
  $query_sql = "SELECT COUNT(*) total FROM {flagging} f WHERE f.fid = :fid AND f.entity_type = 'node' AND f.entity_id = :chapter_id AND timestamp >= :time_ago";
  $query = db_query($query_sql, array(':fid' => $flag->fid, ':chapter_id' => $chapter_id, ':time_ago' => $days_ago_90))->fetch();
  $insights["members_90_days_total"] = $query->total;

   // MEMBERSHIP GROWTH % PAST 30 DAYS
  $query_sql = "SELECT COUNT(*) total FROM {flagging} f WHERE f.fid = :fid AND f.entity_type = 'node' AND f.entity_id = :chapter_id AND timestamp < :time_ago";
  $query = db_query($query_sql, array(':fid' => $flag->fid, ':chapter_id' => $chapter_id, ':time_ago' => $days_ago_30))->fetch();
  $members_30_days_ago = $query->total;
  $members_30_days_pct = 0;
  if ($members_30_days_ago > 0) {      
    $members_30_days_pct = round((($insights["members_30_days_total"] / $members_30_days_ago) * 100), 0);
  }
  $insights["members_30_days_pct"] = $members_30_days_pct;

  // MEMBERSHIP GROWTH % PAST 90 DAYS
  $query_sql = "SELECT COUNT(*) total FROM {flagging} f WHERE f.fid = :fid AND f.entity_type = 'node' AND f.entity_id = :chapter_id AND timestamp < :time_ago";
  $query = db_query($query_sql, array(':fid' => $flag->fid, ':chapter_id' => $chapter_id, ':time_ago' => $days_ago_90))->fetch();
  $members_90_days_ago = $query->total;
  $members_90_days_pct = 0;
  if ($members_90_days_ago > 0) {      
    $members_90_days_pct = round((($insights["members_90_days_total"] / $members_90_days_ago) * 100), 0);
  }
  $insights["members_90_days_pct"] = $members_90_days_pct;

  // TOTAL MEMBERS
  $query_sql = "SELECT COUNT(*) total FROM {flagging} f WHERE f.fid = :fid AND f.entity_type = 'node' AND f.entity_id = :chapter_id";
  $query = db_query($query_sql, array(':fid' => $flag->fid, ':chapter_id' => $chapter_id))->fetch();
  $members_total = $query->total;
  $insights["members_total"] = $members_total;

  // TOTAL APPROVED MEMBERS
  $query_sql = "SELECT COUNT(DISTINCT users_roles.uid) total FROM {flagging} f RIGHT JOIN users_roles ON users_roles.uid = f.uid WHERE users_roles.rid = :role_id AND f.fid = :fid AND f.entity_type = 'node' AND f.entity_id = :chapter_id";
  $query = db_query($query_sql, array(':fid' => $flag->fid, ':chapter_id' => $chapter_id, ':role_id' => $approved_role->rid))->fetch();
  $members_approved_total = $query->total;
  $insights["members_approved_total"] = $members_approved_total;

  // TOTAL UNAPPROVED MEMBERS
  $members_unapproved_total = $members_total - $members_approved_total;
  $insights["members_unapproved_total"] = $members_unapproved_total;  

  // % APPROVED MEMBERS
  $members_unapproved_pct = 0;
  if (($members_total > 0) && ($members_approved_total > 0)) {
    $members_unapproved_pct = round((($members_approved_total / $members_total) * 100), 0);
  }
  $insights["members_approved_pct"] = $members_unapproved_pct;

  // % UNAPPROVED MEMBERS
  $members_unapproved_pct = 0;
  if (($members_total > 0) && ($members_unapproved_total > 0)) {
    $members_unapproved_pct = round((($members_unapproved_total / $members_total) * 100), 0);
  }
  $insights["members_unapproved_pct"] = $members_unapproved_pct;

  // NUM MEMBERS WITH A SEGMENT
  $query_sql = "SELECT COUNT(DISTINCT users_roles.uid) total FROM {flagging} f
  LEFT JOIN users_roles ON users_roles.uid = f.uid 
  RIGHT JOIN field_data_field_segment on f.uid = field_data_field_segment.entity_id 
  WHERE field_data_field_segment.entity_id is not null
  AND users_roles.rid = :role_id
  AND f.fid = :fid AND f.entity_type = 'node' AND f.entity_id = :chapter_id";
  $query = db_query($query_sql, array(':fid' => $flag->fid, ':chapter_id' => $chapter_id, ':role_id' => $approved_role->rid))->fetch();
  $insights["members_approved_with_segment"] = $query->total;

  // NUM MEMBERS WITHOUT A SEGMENT
  $insights["members_approved_without_segment"] = $insights["members_approved_total"] - $insights["members_approved_with_segment"];

  // % MEMBERS WITH AN INDUSTRY SEGMENT
  $members_with_segment_pct = 0;
  if (($insights["members_approved_with_segment"] > 0) && ($members_approved_total > 0)) {
    $members_with_segment_pct = round((($insights["members_approved_with_segment"] / $members_approved_total) * 100), 0);
  }
  $insights["members_with_segment_pct"] = $members_with_segment_pct;

  // RETURN DATA
  $data_labels = tm_reports_get_insights_labels();
  $results = ["data_values" => $insights, "data_labels" => $data_labels];
  cache_set('tm-reports-get-chapter-insights-' . $chapter_id, $results, 'cache', time() + 900); // 15 mins
  return $results;
}

/**
 * Calculate global stats
 * NOTE: Cached
 */
function _tm_reports_get_global_insights() {

  // check cache
  $cache = cache_get('tm-reports-get-global-insights', 'cache');
  if (!empty($cache)) {
    return $cache->data;
  }

  $insights = array();

  $approved_role = user_role_load_by_name("approved user");
  $days_ago_30 = time() - (60 * 60 * 24 * 30); // 30 days ago
  $days_ago_90 = time() - (60 * 60 * 24 * 90); // 90 days ago
  
  // NUMBER OF FUTURE EVENTS
  $query_sql = "SELECT COUNT(*) total FROM {field_data_field_event_date} e 
  WHERE e.entity_type = 'node' AND field_event_date_value >= NOW();";
  $query = db_query($query_sql)->fetch();
  $insights["num_events_upcoming"] = $query->total;

  // NUMBER OF EVENTS PAST MONTH
  $query_sql = "SELECT COUNT(*) total FROM {field_data_field_event_date} e 
  WHERE e.entity_type = 'node' AND field_event_date_value >= DATE_SUB(NOW(),INTERVAL 30 DAY);";
  $query = db_query($query_sql)->fetch();
  $insights["num_events_past_30_days"] = $query->total;

  // NUMBER OF EVENTS PAST YEAR
  $query_sql = "SELECT COUNT(*) total FROM {field_data_field_event_date} e 
  WHERE e.entity_type = 'node' AND field_event_date_value >= DATE_SUB(NOW(),INTERVAL 1 YEAR);";
  $query = db_query($query_sql)->fetch();
  $insights["num_events_past_12_months"] = $query->total;

  // ALL NEW MEMBERS PAST 30 DAYS
  $query_sql = "SELECT COUNT(*) total FROM {users} u WHERE created >= :time_ago";
  $query = db_query($query_sql, array(':time_ago' => $days_ago_30))->fetch();
  $members_30_days_total = $query->total;
  $insights["members_30_days_total"] = $members_30_days_total;

  // ALL NEW MEMBERS PAST 90 DAYS
  $query_sql = "SELECT COUNT(*) total FROM {users} u WHERE created >= :time_ago";
  $query = db_query($query_sql, array(':time_ago' => $days_ago_90))->fetch();
  $members_90_days_total = $query->total;
  $insights["members_90_days_total"] = $members_90_days_total;

  // ALL MEMBERSHIP GROWTH % PAST 30 DAYS
  $query_sql = "SELECT COUNT(*) total FROM {users} u WHERE created < :time_ago";
  $query = db_query($query_sql, array(':time_ago' => $days_ago_30))->fetch();
  $members_30_days_ago = $query->total;
  $members_30_days_pct = 0;
  if ($members_30_days_ago > 0) {      
    $members_30_days_pct = round((($members_30_days_total / $members_30_days_ago) * 100), 0);
  }
  $insights["members_30_days_pct"] = $members_30_days_pct;

  // ALL MEMBERSHIP GROWTH % PAST 90 DAYS
  $query_sql = "SELECT COUNT(*) total FROM {users} u WHERE created < :time_ago";
  $query = db_query($query_sql, array(':time_ago' => $days_ago_90))->fetch();
  $members_90_days_ago = $query->total;
  $members_90_days_pct = 0;
  if ($members_90_days_ago > 0) {      
    $members_90_days_pct = round((($members_90_days_total / $members_90_days_ago) * 100), 0);
  }
  $insights["members_90_days_pct"] = $members_90_days_pct;
  
  // ALL MEMBERS
  $query_sql = "SELECT COUNT(*) total FROM {users} u";
  $query = db_query($query_sql)->fetch();
  $members_total = $query->total;
  $insights["members_total"] = $members_total;

  // ALL APPROVED MEMBERS
  $query_sql = "SELECT COUNT(DISTINCT u.uid) total FROM {users} u RIGHT JOIN users_roles ON users_roles.uid = u.uid WHERE users_roles.rid = :role_id";
  $query = db_query($query_sql, array(':role_id' => $approved_role->rid))->fetch();
  $members_approved_total = $query->total;
  $insights["members_approved_total"] = $members_approved_total;

  // TOTAL UNAPPROVED MEMBERS
  $members_unapproved_total = $members_total - $members_approved_total;
  $insights["members_unapproved_total"] = $members_unapproved_total;

  // % UNAPPROVED MEMBERS
  $members_unapproved_pct = round((($members_unapproved_total / $members_total) * 100), 0);
  $insights["members_unapproved_pct"] = $members_unapproved_pct;

  // NUM MEMBERS WITH A SEGMENT
  $query_sql = "SELECT COUNT(DISTINCT users.uid) total FROM users
  LEFT JOIN users_roles ON users_roles.uid = users.uid 
  RIGHT JOIN field_data_field_segment on users.uid = field_data_field_segment.entity_id 
  WHERE field_data_field_segment.entity_id is not null
  AND users_roles.rid = :role_id";
  $query = db_query($query_sql, array(':role_id' => $approved_role->rid))->fetch();
  $insights["members_approved_with_segment"] = $query->total;

  // NUM MEMBERS WITHOUT A SEGMENT
  $insights["members_approved_without_segment"] = $insights["members_approved_total"] - $insights["members_approved_with_segment"];

  // % MEMBERS WITH AN INDUSTRY SEGMENT
  $members_with_segment_pct = 0;
  if (($insights["members_approved_with_segment"] > 0) && ($members_approved_total > 0)) {
    $members_with_segment_pct = round((($insights["members_approved_with_segment"] / $members_approved_total) * 100), 0);
  }
  $insights["members_with_segment_pct"] = $members_with_segment_pct;

  // RETURN DATA
  $data_labels = tm_reports_get_insights_labels();
  $results = ["data_values" => $insights, "data_labels" => $data_labels];
  cache_set('tm-reports-get-global-insights', $results, 'cache', time() + 900); // 15 mins
  return $results;
}

/**
 * Data labels for insights table
 */
function tm_reports_get_insights_labels() {

  // DATA LABELS
  $data_labels = ["last_event_time" => "Last Event",
  "next_event_time" => "Next Event",
  "num_events_upcoming" => "Future Events",
  "num_events_past_30_days" => "Events in past 30 days",
  "num_events_past_12_months" => "Events in past 12 Months",
  "members_30_days_total" => "New Members (30 days)",
  "members_90_days_total" => "New Members (90 days)",
  "members_30_days_pct" => "% Growth (30 days)",
  "members_90_days_pct" => "% Growth (90 days)",
  "members_total" => "Total Members",
  "members_approved_total"  => "Total Approved",
  "members_unapproved_total" => "Total Unapproved",
  "members_approved_pct" => "% Approved Members",
  "members_unapproved_pct" => "% Unapproved Members",
  "members_approved_with_segment" => "Approved members with Industry Segment",
  "members_approved_without_segment" => "Approved members without Industry Segment",
  "members_with_segment_pct" => "% Approved Members with Industry Segment"];

  return $data_labels;
}

/* Modify industry report view query */
function _tm_reports_views_query_alter_industry_report(&$view, &$query) {

  $industry_field = array();
  $v = taxonomy_vocabulary_machine_name_load("tm_segments");
  $terms = taxonomy_get_tree($v->vid, 0, 1); // get top level taxonomy
  foreach ($terms as $term) {
    // ie: $industry_field['846'] = 'tid_846';
    $industry_field[$term->tid] = 'tid_' . $term->tid;
  }
  
  foreach ($industry_field as $tid => $field_alias) {
    $join = _tm_reports_add_join_industry($field_alias, $tid);
    $query->add_relationship('th_'.$field_alias, $join, 'field_data_field_segment');
    $query->add_field('th_'.$field_alias, 'tid', $field_alias, array('function' => 'count'));
  }

  /* Add field_count for fix industry count in hook_views_pre_render */
  $query->add_field(null, 'DISTINCT(field_chapter_node.nid)', 'field_count', array('function' => 'count'));
}

/* Modify industry report view pre render */
function _tm_reports_views_pre_render_industry_report(&$view) {

  /* Create custom column for the Industry Segment */
  $table = 'taxonomy_term_hierarchy';
  $table_alias = 'th';
  $real_field = 'tid';

  $industry_field = array();
  $v = taxonomy_vocabulary_machine_name_load("tm_segments");
  $terms = taxonomy_get_tree($v->vid, 0, 1); // get top level taxonomy
  foreach ($terms as $term) {
    // ie: $industry_field['846'] = 'Accommodation';
    $industry_field["tid_" . $term->tid] = $term->name;
  }

  $view->field["total_has_industry_pct"] = _tm_reports_add_handler_field_numeric($view, $table, $table_alias, $real_field, "total_has_industry_pct", "Has Industry Segment (%)");

  /* Count */
  foreach ($industry_field as $field_alias => $label) {
      $view->field[$field_alias] = _tm_reports_add_handler_field_numeric($view, $table, $table_alias, $real_field, $field_alias, $label);  
  }

  /* Percentage */
  foreach ($industry_field as $field_alias => $label) {
      $field_alias .= '_pct';
      $label .= ' (%)'; 
      $view->field[$field_alias] = _tm_reports_add_handler_field_numeric($view, $table, $table_alias, $real_field, $field_alias, $label);        
  }

  // Fix Count for Industry Segment term
  foreach ($view->result as $i => $result) {

    // Step 1. count number of members with a segment
    $members_with_segment = 0;
    foreach ($industry_field as $field_alias => $label) {
      if (is_numeric($i) && (!empty($view->field[$field_alias]->view->result[$i]->$field_alias))) {
        $field_count = ($view->field[$field_alias]->view->result[$i]->field_count);
        $count = ($view->field[$field_alias]->view->result[$i]->$field_alias);
        $count_normalise = ($field_count != 0 ? $count / $field_count : $count);
        $members_with_segment += $count_normalise;     
      }
    }

    // correct field value. note: this is horrible code, but what can we do as we are wrangling with views :(
    $view->result[$i]->users_flagging__field_data_field_segment_field_segment_tid = $members_with_segment;

    // Step 2. Calculate % and update count
    foreach ($industry_field as $field_alias => $label) {
      if (is_numeric($i) && (!empty($view->field[$field_alias]->view->result[$i]->$field_alias))) {
        $field_count = ($view->field[$field_alias]->view->result[$i]->field_count);
        $count = ($view->field[$field_alias]->view->result[$i]->$field_alias);
        $count_normalise = ($field_count != 0 ? $count / $field_count : $count);
        $view->field[$field_alias]->view->result[$i]->$field_alias = $count_normalise;
          
        /* Percentage */
        $field_alias .= '_pct';
        //$total = $view->result[$i]->flag_counts_node_count;
        $pct = round(($count_normalise * 100 / $members_with_segment), 1);
        $view->field[$field_alias]->view->result[$i]->$field_alias = $pct;          
      }
    }

    // Step 3. Update total %
    //$approved_members = $view->field["total_has_industry_pct"]->view->result[$i]->total_has_industry_pct
    $approved_members = $view->result[$i]->flag_counts_node_count;
    $total_has_industry_pct = round($members_with_segment * 100 / $approved_members, 0);
    $view->field["total_has_industry_pct"]->view->result[$i]->total_has_industry_pct = $total_has_industry_pct;

  }
}

/**
* Helper function _tm_reports_add_handler_field_numeric
*/
function _tm_reports_add_handler_field_numeric(&$view, $table, $table_alias, $real_field, $field_alias, $label) {
  $field = new views_handler_field_numeric();
  $field ->field_alias =  $field_alias;
  $field ->aliases =  array();
  $field ->original_value =  NULL;
  $field ->additional_fields =  array();
  $field ->view =  &$view;
  $field ->query =  &$view->query;
  $field ->handler_type =  'field';
  $field ->table_alias =  $table_alias;
  $field ->real_field =  $real_field;
  $field ->relationship =  NULL;
  $field ->options = array(
    'id' => 'count',
    'table' => $table,
    'field' => 'count',
    'relationship' => $table_alias,
    'group_type' => 'group',
    'ui_name' => '',
    'label' => $label,
    'exclude' => FALSE,
    'alter'  => array(
      'alter_text' => FALSE,
      'text' => '',
      'make_link' => FALSE,
      'path' => '',
      'absolute' => FALSE,
      'external' => FALSE,
      'replace_spaces' => FALSE,
      'path_case' => 'none',
      'trim_whitespace' => FALSE,
      'alt' => '',
      'rel' => '',
      'link_class' => '',
      'prefix' => '',
      'suffix' => '',
      'target' => '',
      'nl2br' =>  FALSE,
      'max_length' => '',
      'word_boundary' =>  TRUE,
      'ellipsis' => TRUE,
      'more_link' => FALSE,
      'more_link_text' => '',
      'more_link_path' => '',
      'strip_tags' =>  FALSE,
      'trim' => FALSE,
      'preserve_tags' => '',
      'html' => FALSE,
    ),
    'element_type' => '',
    'element_class' => '',
    'element_label_type' => '',
    'element_label_class' => '',
    'element_label_colon' => TRUE,
    'element_wrapper_type' => '',
    'element_wrapper_class' => '',
    'element_default_classes' => TRUE,
    'empty' => '',
    'hide_empty' => FALSE,
    'empty_zero' => FALSE,
    'hide_alter_empty' => TRUE,
    'set_precision'  => FALSE,
    'precision' =>  0,
    'decimal' => '.',
    'separator' => ',',
    'format_plural' => FALSE,
    'format_plural_singular' => 1,
    'format_plural_plural' => '@count',
    'prefix' => '',
    'suffix' => '',
  );
  
  $field ->definition =  array(
    'handler' => 'views_handler_field_numeric',
    'click sortable' => TRUE,
    'group' => 'Field',
    'title' => $label,
    'help' => '',
  );
  
  $field ->is_handler =  TRUE;
  $field ->table =  $table;
  $field ->field =  $real_field;
  $field ->position = 0;
  
  return $field;
}

/**
 * Helper function _tm_reports_add_handler_field_numeric
 */
function _tm_reports_add_join_industry($field_alias, $tid) {
  $join = new views_join;
  $join->construct('taxonomy_term_hierarchy', 'users_flagging__field_data_field_segment', 'field_segment_tid', 'tid', array(), 'LEFT');
  $join->extra = array(
    array(
        'field' => 'tid',
        'value' => $tid,
    ),
    array(
        'field' => 'parent',
        'value' => $tid,
        'operator' => '=',
    ),
  );
  $join->extra_type = 'OR';
  return $join;
}

/**
 * Generate chapter stats for chapter leader 
 */
function tm_reports_chapter_insights($nid) {

  global $user;
  global $conf;
  $nid = _orig_nid();

  if($nid == 0) {
    print drupal_not_found();
    return;
  }

  $flag_signup = flag_get_flag('signup', NULL);
  $chapter = node_load($nid);
  $return_link = l(t('View chapter'), url('node/'.$nid, array('absolute' => TRUE)));

  // Generate HTML
  $html = _tm_reports_insights_js_css_header();

  // Insights
  $html .= "<div class='column first'>";
  $html .= "<section class='contained contained-block'>";
  $html .= "<header class='contained-head'>
            <h1 class='prime-title'>" . $chapter->title . " Insights &middot; <span style='color: #0068a8;'>" . $return_link . "</span></h1>
            </header>";
  $html .= _tm_reports_insights_table_html($chapter->nid);
  $html .= "</section>";
  $html .= "</div>";

  // Industry Segments
  $html .= "<div class='column second'>";
  $html .= "<section class='contained contained-block'>";
  $html .= "<header class='contained-head'>
            <h1 class='prime-title'>Industry Segments - " . $chapter->title . "</h1>
            </header>";
  $html .= _tm_reports_insights_segments_html($chapter->nid);
  $html .= "</section>";

  // New Members
  $html .= "<section class='contained contained-block'>";
  $html .= "<header class='contained-head'>
            <h1 class='prime-title'>New Members - " . $chapter->title . "</h1>
            </header>";
  $html .= _tm_reports_insights_flagging_chart_html($chapter->nid, $flag_signup->fid, "", "New Members", "Month", "insights_signups");
  $html .= "</section>";
  $html .= "</div>";

  // show tip?
  if (isset($conf["tm_reports_chapter_insights_tip"])) {
    $html .= "<style>.messages--status.messages { margin-left: 2rem; margin-right: 2rem; } </style>";
    drupal_set_message($conf["tm_reports_chapter_insights_tip"]);
  }

   $form['html'] =  array(
    '#type' => 'markup',
    '#markup' => $html);

  return $form;
}

/**
 * Generate global insights
 */
function tm_reports_global_insights() {

  global $user;
  global $conf;

  $flag_signup = flag_get_flag('signup', NULL);
  //$return_link = l(t('Community Reports'), url('admin/tm_reports', array('absolute' => TRUE)));

  // Generate HTML
  $html = _tm_reports_insights_js_css_header();

  // Insights
  $html .= "<div class='column first'>";
  $html .= "<section class='contained contained-block'>";
  $html .= "<header class='contained-head'>
            <h1 class='prime-title'>Global Insights</span></h1>"; // <!--&middot; <span style='color: #0068a8;'>" . $return_link . "</span></h1>
  $html .= "</header>";
  $html .= _tm_reports_insights_table_html();
  $html .= "</section>";
  $html .= "</div>";

  // Industry Segments
  $html .= "<div class='column second'>";
  $html .= "<section class='contained contained-block'>";
  $html .= "<header class='contained-head'>
            <h1 class='prime-title'>Industry Segments</h1>
            </header>";
  $html .= _tm_reports_insights_segments_html();
  $html .= "</section>";

  // New Members
  $html .= "<section class='contained contained-block'>";
  $html .= "<header class='contained-head'>
            <h1 class='prime-title'>New Members</h1>
            </header>";
  $html .= _tm_reports_insights_all_signups_html();
  $html .= "</section>";

  $form['html'] =  array(
    '#type' => 'markup',
    '#markup' => $html);

  return $form;
}

/**
 * Generate a chart of flags on a node (ie: signups)
 */
function _tm_reports_insights_flagging_chart_html($node_id, $flag_id, $chart_title = "Flagging", $v_title = "Members", $h_title = "Month", $div_id = "insights_flagging") {

  // Step 1. Get chapter insight data
  $results = _tm_reports_flagging_time_series($node_id, $flag_id);

  // Step 2. Render chart
  $html = _tm_reports_insights_chart_html($results, $chart_title, $v_title, $h_title, $div_id);

  return $html;
}

/**
 * Generate a chart of all user signups
 */
function _tm_reports_insights_all_signups_html() {

  // Step 1. Get chapter insight data
  $results = _tm_reports_new_users_time_series();

  // Step 2. Render chart
  $html = _tm_reports_insights_chart_html($results, "", "New Members", "Month", "new_signups");

  return $html;
}

/**
 * Generate Google Chart from a data series
 */
function _tm_reports_insights_chart_html($results, $chart_title, $v_title, $h_title, $div_id) {

  $div_id = "new_members";
  $h_title = "Month";
  $v_title = "New Members";
  $chart_title = "";

  // Format in Google chart
  $html = "<script>
  window.onresize = function(e) {
  delay(function(){
    drawChart(); // workaround, as the drawchart listener is overridden here
    draw_".$div_id."();
  }, 250); 
}

var delay = (function(){
  var timer = 0;
  return function(callback, ms){
    clearTimeout (timer);
    timer = setTimeout(callback, ms);
  };
})();";

  $html .= "\ngoogle.setOnLoadCallback(draw_" . $div_id . ");";
  $html .= "\nfunction draw_" . $div_id . "() {";
  $html .= "\nvar data = new google.visualization.DataTable();";
  $html .= "\ndata.addColumn('string', '" . $h_title . "');";
  $html .= "\ndata.addColumn('number', '" . $v_title . "');";

  $html .= "data.addRows([";

  foreach ($results as $result) {
    $html .= "['" . $result["group_year"] . "-" . $result["group_month"] . "', " . $result["total"] . "],";
  }

  $html .= <<<EOT
      ]);
EOT;

  $html .= "
      var options = {
        title: '" . $chart_title . "',
        hAxis: {
          title: '" . $h_title . "',
        },
        vAxis: {
          title: '" . $v_title . "'
        },
        legend: { position: 'none' },
      };";

  $html .= "\nvar chart = new google.visualization.ColumnChart(document.getElementById('" . $div_id . "'));";
  $html .= "\nchart.draw(data, options);";
  $html .= "\n}";
  $html .= "\n</script>";
  $html .= '<div id="' . $div_id . '" style="width: 100%; height: 400px;"></div>';

  return $html;
}

/**
 * Load Google Chart API via JS
 */
function _tm_reports_insights_js_css_header() {

  // Html to load Google chart data
  $html = <<<EOT
<script type='text/javascript' src='https://www.google.com/jsapi'></script>
<script type='text/javascript'>
// load google charts
google.load('visualization', '1.1', {packages:['corechart', 'table', 'bar']});

// hide drupal title
document.getElementById("page-title").style.display = 'none';
</script>
<style>
.google-visualization-table-tr-head { display: none; }
</style>
EOT;

  return $html;
}

/**
 * Generate Chapter/Global Insights Table via Google Charts
 */
function _tm_reports_insights_table_html($chapter_id = "") {

  // Step 1. Get chapter insight data or global data
  if ($chapter_id == "") {
    $data = _tm_reports_get_global_insights();
  } else {
    $data = _tm_reports_get_chapter_insights($chapter_id);
  }
  $chapter_insights = $data["data_values"];
  $data_labels = $data["data_labels"];

  // Step 2. Format in Google chart
  $html = <<<EOT
<script>
google.setOnLoadCallback(drawTable);
function drawTable() {
  var data = new google.visualization.DataTable();
  data.addColumn('string', 'Description');
  data.addColumn('string', 'Value');
  data.addRows([
EOT;

  $hide_values = [];
  if ($chapter_id != "") {
    $hide_values = ["members_approved_with_segment", "members_approved_without_segment", "members_unapproved_total"];
  }
  foreach ($chapter_insights as $key => $value) {
    if (!in_array($key, $hide_values)) {
      if ($data_labels[$key][0] == "%") {
        $html .= "['" . $data_labels[$key] . "', '" . $value . "%'],";
      } else {
        $html .= "['" . $data_labels[$key] . "', '" . $value . "'],";
      }
    }
  }

  $html .= <<<EOT
  ]);

  var table = new google.visualization.Table(document.getElementById('insights_table'));
  table.draw(data, {showRowNumber: false, sort: false, width: '100%'});
}
</script>
<div id="insights_table" style="width: 100%;"></div>
EOT;

  return $html;
}

/**
 * Get Industry Segment Data from a chapter or global (approved members)
 * Note: CACHED
 */
function _tm_reports_get_industry_segment_data($chapter_id = "") {

  // check cache
  $cache = cache_get('tm-reports-get-industry-segment-data-' . $chapter_id, 'cache');
  if (!empty($cache)) {
    return $cache->data;
  }

  $approved_role = user_role_load_by_name("approved user");

  // SQL - Join to Chapter
  if ($chapter_id != "") {
    $chapter = node_load($chapter_id);
    $flag = flag_get_flag('signup', NULL);
    
    $query = "select count(users.uid) as total, taxonomy_term_data.tid as segment_tid, taxonomy_term_data.name from users
  left join flagging on users.uid = flagging.uid
  left join field_data_field_segment on users.uid = field_data_field_segment.entity_id
  left join taxonomy_term_hierarchy on taxonomy_term_hierarchy.tid = field_data_field_segment.field_segment_tid 
  left join taxonomy_term_data ON (IF (taxonomy_term_hierarchy.parent > 0, taxonomy_term_hierarchy.parent, taxonomy_term_hierarchy.tid) = taxonomy_term_data.tid)
  left join users_roles ON users_roles.uid = users.uid 
  where users_roles.rid = :role_id
  and fid = :fid
  and flagging.entity_id = :chapter_nid
  and flagging.entity_type = 'node'
  and field_data_field_segment.entity_type = 'user'
  and taxonomy_term_data.tid is not null
  group by segment_tid
  order by name";

    $rows = db_query($query, array(':fid' => $flag->fid, ':role_id' => $approved_role->rid, ':chapter_nid' => $chapter->nid))->fetchAll();

  } else {
    // SQL - Global
    $query = "select count(users.uid) as total, taxonomy_term_data.tid as segment_tid, taxonomy_term_data.name from users
  left join field_data_field_segment on users.uid = field_data_field_segment.entity_id
  left join taxonomy_term_hierarchy on taxonomy_term_hierarchy.tid = field_data_field_segment.field_segment_tid 
  left join taxonomy_term_data ON (IF (taxonomy_term_hierarchy.parent > 0, taxonomy_term_hierarchy.parent, taxonomy_term_hierarchy.tid) = taxonomy_term_data.tid)
  left join users_roles ON users_roles.uid = users.uid 
  where users_roles.rid = :role_id
  and field_data_field_segment.entity_type = 'user'
  and taxonomy_term_data.tid is not null
  group by segment_tid
  order by name";

    $rows = db_query($query, array(':role_id' => $approved_role->rid))->fetchAll();

  }
  
  // Prepare row data
  $segment_data = array();
  foreach ($rows as $row) {
    $segment_data[] = array("name" => $row->name, "total" => $row->total, "tid" => $row->segment_tid);
  }

  // RETURN DATA
  $data_labels = tm_reports_get_insights_labels();
  cache_set('tm-reports-get-industry-segment-data-' . $chapter_id, $segment_data, 'cache', time() + 900); // 15 mins
  return $segment_data;
}

/**
 * Get monthly flagging data for a node and flag over time
 */
function _tm_reports_flagging_time_series($node_id, $flag_id, $timestamp_interval = "INTERVAL 1 YEAR") {

  // SQL 
  $query = "select count(*) as total, YEAR(FROM_UNIXTIME(timestamp)) as group_year, MONTH(FROM_UNIXTIME(timestamp)) as group_month from flagging
  where FROM_UNIXTIME(timestamp) >= DATE_SUB(NOW()," . $timestamp_interval . ")
  and entity_id = :node_id 
  and fid = :fid
  and entity_type = 'node'
  group by group_year, group_month order by group_year, group_month asc;";
  
  $rows = db_query($query, array(':node_id' => $node_id, ':fid' => $flag_id))->fetchAll();

  // pad the grouped data data
  $series = _tm_reports_helper_pad_monthly_grouped_data($rows);
  return $series;
}

/**
 * Get monthly new user signup data over time
 */
function _tm_reports_new_users_time_series($timestamp_interval = "INTERVAL 1 YEAR") {

  // SQL 
  $query = "select count(*) as total, YEAR(FROM_UNIXTIME(created)) as group_year, MONTH(FROM_UNIXTIME(created)) as group_month from users
  where FROM_UNIXTIME(created) >= DATE_SUB(NOW()," . $timestamp_interval . ")
  group by group_year, group_month order by group_year, group_month asc;";
  
  $rows = db_query($query)->fetchAll();

  // pad the grouped data data
  $series = _tm_reports_helper_pad_monthly_grouped_data($rows);
  return $series;
}

/**
 * Helper method to pad empty sql grouped data in a time series
 */
function _tm_reports_helper_pad_monthly_grouped_data($rows) {

  // Step 1. Create a keyed array
  // key in array as as YYYY_MM
  $results = array();
  foreach ($rows as $row) {
    $results[$row->group_year . "_" . $row->group_month] = array("total" => $row->total, "group_year" => $row->group_year, "group_month" => $row->group_month);
  }

  // Step 2. Pad results for with no entries
  $start_year = 2014;
  $start_month = 1;
  $series = array();
  $started_data = false;
  for ($i=$start_year; $i <= intval(date("Y")); $i++) {
    for ($j=$start_month; ($j <= 12 || ($i == intval(date("Y")) && $j == intval(date("m")))); $j++) { 
      $key = $i . "_" . $j;
      if (array_key_exists($key, $results)) {
        $started_data = true;
        $series[] = $results[$key]; // add existing data
      } else if ($started_data) {
        // pad data
        $series[] = array("total" => 0, "group_year" => $i, "group_month" => $j);
      }
    }
  }

  return $series;
}


/**
 * Generate Chapter / Global Segments Pie Chart via Google Charts
 */
function _tm_reports_insights_segments_html($chapter_id = "") {

  // // Step 1. Get segment data
  $segment_data = _tm_reports_get_industry_segment_data($chapter_id);

  // Step 2. Format in Google chart
  $html = <<<EOT

<script>
window.onresize = function(e) {
  delayChart(function(){
    drawChart();
  }, 250); 
}

var delayChart = (function(){
  var timer = 0;
  return function(callback, ms){
    clearTimeout (timer);
    timer = setTimeout(callback, ms);
  };
})();

google.setOnLoadCallback(drawChart);
function drawChart() {
  var data = google.visualization.arrayToDataTable([
  ['Industry Segment', 'Members'],
EOT;

  foreach ($segment_data as $segment) {
    $html .= "['" . str_replace("'", "", $segment["name"]) . "'," . $segment["total"] . "],";
  }
  $html .= <<<EOT
  ]);
  
  var options = { };
  var chart = new google.visualization.PieChart(document.getElementById('insights_segments'));
  chart.draw(data, options);
}
</script>
<div id="insights_segments" style="width: 100%; height: 500px;"></div>
EOT;

  return $html;
}

