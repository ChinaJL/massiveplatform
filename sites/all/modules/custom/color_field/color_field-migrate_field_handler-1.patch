diff --git a/sites/all/modules/custom/color_field/color_field.info b/sites/all/modules/custom/color_field/color_field.info
index 635dc03..38e140f 100644
--- a/sites/all/modules/custom/color_field/color_field.info
+++ b/sites/all/modules/custom/color_field/color_field.info
@@ -2,6 +2,8 @@ name = Color Field
 description = Color Field using a hexadecimal notation (HEX)
 package = Fields
 core = 7.x
+; Migrate field handler
+files[] = migrate/color_field_rgb.inc
 
 dependencies[] = libraries
 
diff --git a/sites/all/modules/custom/color_field/color_field.module b/sites/all/modules/custom/color_field/color_field.module
index d4c0721..b5723a8 100644
--- a/sites/all/modules/custom/color_field/color_field.module
+++ b/sites/all/modules/custom/color_field/color_field.module
@@ -4,6 +4,8 @@
  * An color field with a custom color picker using the Field Types API.
  */
 
+include_once 'migrate/color_field_rgb.inc';
+
 /**
  * Implements hook_library().
  */
@@ -679,3 +681,16 @@ function color_field_widget_error($element, $error, $form, &$form_state) {
   }
 }
 
+/**
+ * Implements hook_migrate_api().
+ */
+function color_field_migrate_api() {
+  $api = array(
+    'api' => 2,
+    'field handlers' => array(
+      'ColorFieldRgbHandler',
+    ),
+  );
+
+  return $api;
+}
diff --git a/sites/all/modules/custom/color_field/migrate/color_field_rgb.inc b/sites/all/modules/custom/color_field/migrate/color_field_rgb.inc
new file mode 100644
index 0000000..242253c
--- /dev/null
+++ b/sites/all/modules/custom/color_field/migrate/color_field_rgb.inc
@@ -0,0 +1,32 @@
+<?php
+/**
+ * Class ColorFieldRgbHandler
+ *
+ * Primary value is the hex code of the color, including the pound sign.
+ * Example: '#000000'
+ */
+class ColorFieldRgbHandler extends MigrateFieldHandler {
+  public function __construct() {
+    $this->registerTypes(array('color_field_rgb'));
+  }
+
+  public function prepare($entity, array $field_info, array $instance, array $values) {
+    $arguments = array();
+    if (isset($values['arguments'])) {
+      $arguments = array_filter($values['arguments']);
+      unset($values['arguments']);
+    }
+    $language = $this->getFieldLanguage($entity, $field_info, $arguments);
+
+    // Setup the standard Field API array for saving.
+    $delta = 0;
+    foreach ($values as $value) {
+      $return[$language][$delta] = array(
+        'rgb' => $value,
+      );
+      $delta++;
+    }
+
+    return isset($return) ? $return : NULL;
+  }
+}
