<?php
/**
 * @file
 * Code for the TM Events feature.
 * 
 * @author Olaf Veerman (olaf.veerman@flipside.org)
 * @author Daniel da Silva (daniel.silva@flipside.org)
 */

include_once 'tm_events.features.inc';

/**
 * Implements hook_permission()
 */
function tm_events_permission() {
  return array(
    'add event to any chapter' => array(
      'title' => t('Add event to any chapter'),
      'description' => t('Add events to a chapter, even without being a chapter leader.'),
    ),
  );
}

/**
 * Implement hook_form_FORM_ID_alter()
 */
function tm_events_form_event_node_form_alter(&$form, &$form_state) {
   
  // Field visibilty based on whether the RSVP is handled through the TM.
  
  // Visible when RSVP is handled on TM.
  $form['field_signup_limit']['#states'] = array(
    'visible' => array(
     ':input[name="field_external_rsvp[und]"]' => array('value' => 0),
    ),
  );

  // Visible when using external RSVP.
  $form['field_rsvp_link']['#states'] = array(
    // Only show RSVP link when event is a TM event.
    'visible' => array(
     ':input[name="field_external_rsvp[und]"]' => array('value' => 1),
    ),
  );
  // /end field visibility based on RSVP.
  $form['field_chapter'][LANGUAGE_NONE][0]['target_id']['#ajax'] = array(
    'callback' => '_tm_events_field_organizer_ajax_cb',
    'wrapper' => 'organizer-wrapper',
    'method' => 'replace',
    'effect' => 'fade',
  );

  // Put a wrapper around the field_organizer.
  // This container will be printer and populated after the AJAX request.
  $field_organizer_wrapper = array(
    '#type' => 'container',
    '#prefix' => '<div id="organizer-wrapper">',
    '#suffix' => '</div>',
    '#weight' => $form['field_organizer']['#weight'],
    'field_organizer_child' => $form['field_organizer']
  );
  
  // Set field_organizer as the wrapper, with the actual field as a child.
  // The wrapper needs to have the field_name, to make sure that it abides
  // for example to the fieldgroup configuration.
  $form['field_organizer'] = $field_organizer_wrapper;
  global $user;
  
  // There was an ajax request. Provide correct values.
  if (isset($form_state['values']['field_chapter'][LANGUAGE_NONE][0]['target_id'])) {
    $chapter_id = $form_state['values']['field_chapter'][LANGUAGE_NONE][0]['target_id'];
  } else {
    $chapter_id = null;
  }

  // Get possible options.
  //if (isset($chapter_id)) {
    $opts = array('_none' => t('- None -'))  + _load_organizers_per_chapter($chapter_id);
    $form['field_organizer']['field_organizer_child'][LANGUAGE_NONE]['#options'] = $opts;
    // By default the value of the organizer is the author.
    $form['field_organizer']['field_organizer_child'][LANGUAGE_NONE]['#default_value'] = $user->uid;
  //}
  
  // There's a value for the field_chapter. This means:
  // - the node is being edited; or
  // - the field_chapter was prepopulated.
  if (!empty($form['field_chapter'][LANGUAGE_NONE][0]['target_id']['#default_value'])) {
    // Get id from default value.
    preg_match("/.* \(([0-9]+)\)/", $form['field_chapter'][LANGUAGE_NONE][0]['target_id']['#default_value'], $chapter_id);
    $chapter_id = $chapter_id[1];
    
    // Get possible options.
    $opts = array('_none' => t('- None -'))  + _load_organizers_per_chapter($chapter_id);
    $form['field_organizer']['field_organizer_child'][LANGUAGE_NONE]['#options'] = $opts;
    
    // If there's a default value but we're not editing a node, means that
    // the value was prepopulated from the url.
    // If so, set the default user.
    if (!isset($form['#node']->nid)) {
      $form['field_organizer']['field_organizer_child'][LANGUAGE_NONE]['#default_value'] = $user->uid;
    }
  }
  else {
    // Disable access if we're editing a node for the first time.
    //$form['field_organizer']['field_organizer_child']['#access'] = FALSE;
  }

  // Set timezone automatically from chapter if creating new event
  $node = $form_state['node'];
  if (!isset($node->nid) || isset($node->is_new)) {
    if ($chapter_id != null) {
      $chapter = node_load($chapter_id);
      $chapter_timezone = $chapter->field_chapter_timezone[LANGUAGE_NONE][0]['value'];
      $form['field_event_date'][LANGUAGE_NONE][0]['timezone']['#default_value'] = $chapter_timezone;
    }
  }

}

/**
 * AJAX callback for field organizer.
 * Triggered by field chapter.
 */
function _tm_events_field_organizer_ajax_cb($form, $form_state) {
  return $form['field_organizer'];
}

/**
 * Loads all the available organizers for a given city/chapter.
 * Basically all the chapter leaders of that city/chapter.
 * 
 * @param int $chapter_id
 * 
 * @return Array [stdClass]
 */
function _load_organizers_per_chapter($chapter_id) {

  // if no chapter_id, get all chapter leaders
  if ($chapter_id == null) {
    $result = db_query('
        SELECT users.name AS name, users.uid AS uid
        FROM
          {users} users
        INNER JOIN {field_data_field_chapter_leaders} f_c_l ON users.uid = f_c_l.field_chapter_leaders_target_id AND f_c_l.entity_type = :entity_type AND f_c_l.deleted = :deleted
        WHERE users.status <> :user_status
        ORDER BY name', array(
          ':entity_type' => 'node',
          ':deleted' => 0,
          ':user_status' => 0
      ))->fetchAll();
  } else {
    $result = db_query('
      SELECT users.name AS name, users.uid AS uid, n.nid AS chapter_nid
      FROM
        {users} users
      INNER JOIN {field_data_field_chapter_leaders} f_c_l ON users.uid = f_c_l.field_chapter_leaders_target_id AND f_c_l.entity_type = :entity_type AND f_c_l.deleted = :deleted
      INNER JOIN {node} n ON f_c_l.entity_id = n.nid
      WHERE users.status <> :user_status AND n.nid = :chapter_id
      ORDER BY name', array(
        ':entity_type' => 'node',
        ':deleted' => 0,
        ':user_status' => 0,
        ':chapter_id' => $chapter_id
    ))->fetchAll();
  }

  $data = array();
  foreach ($result as $value) {
    $data[$value->uid] = $value->name;
  }
  
  return $data;
}

/**
 * Implement hook_ds_field_info()
 */
function tm_events_ds_fields_info($entity_type) {
  if ($entity_type != 'node') {
    return;
  }
  $fields = array();

  $fields['tm_ds_next_event'] = array(
    'title' => t('Next event'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('chapter|*'),
    'function' => '_tm_next_event'
  );

  $fields['tm_ds_date_avatar'] = array(
    'title' => t('Date avatar'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('event|*',),
    'function' => '_tm_date_avatar'
  );

  $fields['tm_ds_fulldate_event'] = array(
    'title' => t('Full datetime event'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('event|full',),
    'function' => '_tm_fulldate_event'
  );

  return array($entity_type => $fields);
}

/**
 * Implement hook_theme()
 */
function tm_events_theme() {
  return array(
    'tm_date_avatar' => array(
      'variables' => array(
        'date' => NULL
      ),
      'path' => drupal_get_path('module','tm_events') . '/templates/fields',
      'template' => 'tm_date_avatar'
    )
  );
}

/**
 * Custom function to fetch the next event, used on chapters. Returns interval
 * between the current date and the event's date.
 */
function _tm_next_event($field, $title = NULL) {
  if ($field['entity']->type = 'chapter') {
    $chapter_id = $field['entity']->nid;

    // Fetch the current and make sure it's UTC and user-defined timezone.
    $current_date = new DateTime('now', new DateTimeZone('UTC'));

    // Fetch the nearest upcoming event that references a particular chapter.
    // Only returns one event, the one with the closest starting date.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'event')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_chapter', 'target_id', $chapter_id)
      ->fieldCondition('field_event_date', 'value', $current_date->format('Y-m-d H:i:s'), '>=')
      ->fieldOrderBy('field_event_date', 'value', 'ASC')
      ->range(0,1);
    $result = $query->execute();

    // Initialize time_until.
    $time_until = NULL;
    if (isset($result['node'])) {
      $next_event_array = array_keys($result['node']);
      $next_event = node_load($next_event_array[0]);
      $event_date = field_get_items('node',$next_event,'field_event_date');
      
      // Create datetime object and ensure UTC timezone, instead of user-defined timezone.
      $event_datetime = new DateTime($event_date[0]['value'], new DateTimeZone($event_date[0]['timezone']));
      $time_until = format_interval($event_datetime->format('U') - $current_date->format('U'), 1);
    }
  }
  return $time_until ? t('Event in @time.', array('@time' => $time_until)) : t('No upcoming events.');
}

/**
 * Custom function to prepare date for a date badge.
 */
function _tm_date_avatar($field, $title = NULL) {
  if (isset($field['entity']->field_event_date['und'][0]['value'])) {
    $event_date = new DateTime($field['entity']->field_event_date['und'][0]['value'], new DateTimeZone($field['entity']->field_event_date['und'][0]['timezone']));
    return theme('tm_date_avatar', array(
      'date' => $event_date,
    ));
  }
}

/**
 * Custom function to return the full date and time of an event
 */
function _tm_fulldate_event($field, $title = NULL) {
  // Site timezone is set to UTC. Date field has timezone handling and the 
  // values are stored in the db as provided by user. Since we're interested
  // in local time, we don't need to do conversion.
  if (isset($field['entity']->field_event_date['und'][0]['value'])) {
    $event_date = new DateTime($field['entity']->field_event_date['und'][0]['value'], new DateTimeZone($field['entity']->field_event_date['und'][0]['timezone']));
    $event_date2 = new DateTime($field['entity']->field_event_date['und'][0]['value2'], new DateTimeZone($field['entity']->field_event_date['und'][0]['timezone']));
    if ($event_date != $event_date2) {
      return '<span class="date">' . $event_date->format('l, F j, Y') . '</span><span class="time">' . t('From') . ' ' . $event_date->format('G:i') . ' ' . t('to') . ' ' . $event_date2->format('G:i') . '</span>';      
    }
    else {
      return '<span class="date">' . $event_date->format('l, F j, Y') . '</span><span class="time">' . $event_date->format('G:i') . '</span>';
    }
  } 
}

/**
 * Implement hook_node_presave()
 */
function tm_events_node_presave($node) {
  if (isset($node->field_external_rsvp[LANGUAGE_NONE][0]['value'])) {
    $external_rsvp = $node->field_external_rsvp[LANGUAGE_NONE][0]['value'];
    // If is not a Travel Massive RSVP remove the signup limit.
    if ($external_rsvp !== '0') {
      $node->field_signup_limit[LANGUAGE_NONE] = array();
    }
    // If is not a External RSVP remove the external rsvp link.
    elseif ($external_rsvp !== '1') {
      $node->field_rsvp_link[LANGUAGE_NONE] = array();
    }
  }
  if ($node->type == 'event'){
    // I have absolutely no idea why this is necessary, but the organiser field
    // is being copied and not copied back
    //print_r($node->field_organizer_child);
    if ($node->field_organizer_child['und'][0]['target_id'] != null) {
      $node->field_organizer = $node->field_organizer_child;
    }
  }
}
/*
* Implements hook_menu()
*/
function tm_events_menu() {
  // need to change the permissions on both of these 
  // to be chapter leaders of the referenced event
  $items['node/%node/announcement'] = array(
    'title' => t('Send Announcement'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tm_events_communication_form'),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/rsvp'] = array(
    'title' => t('Manage RSVPs'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tm_events_rsvp_form'),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  $items['download/csv/%'] = array(
    'title' => t('Download RSVPs'),
    'page callback' => 'tm_events_download_csv',
    'page arguments' => array(2),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/test_email'] = array(
    'title' => t('Send test email'),
    'page callback' => 'tm_events_test_email_ajax',
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/send_emails'] = array(
    'title' => t('Send event emails'),
    'page callback' => 'tm_events_send_emails_ajax',
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/* Form for communicating with attendees */
function tm_events_communication_form($event){
  // didn't want to pass from the url
  $event = node_load(arg(1));
  $form = array();
  global $user;

  // get chapter associated with event if there is one
  $chapter = null;
  if (sizeof($event->field_chapter[LANGUAGE_NONE][0] > 0)) {
    $chapterid = $event->field_chapter[LANGUAGE_NONE][0]['target_id'];
    $chapter = node_load($chapterid);
  }

  $form['#prefix'] = l(t('Back to event'),'node/'.$event->nid);

  /*$form['intro_text'] = array(
      '#markup' => 'Here you can send an Announcement about your event to your Chapter.',
    );*/

  if ($event){
    $view = field_view_field('node',$event,'field_event_date',
      array('label'=>'hidden',));
    $date = render($view);

    $form['subject'] = array(
      '#title' => t('Subject: '),
      '#type' =>'textfield',
      '#required' => TRUE,
      '#value' => t('Travel Massive - ').$event->title,
      );

    // prepopulate some of the text
    $event_url = $_SERVER["SERVER_NAME"] . drupal_get_path_alias('node/' . $event->nid);

    
    $prefill = "Hi [first_name],<br><br>";
    $prefill .= "We're pleased to announce a new event, please see details below:<br>";
    $prefill .= "<ul>";
    $prefill .= "<li>" . t('Event').': '.$event->title . "</li>";
    $prefill .= "<li>" . t('Date').': '.strip_tags($date) . "</li>";
    if ($event->field_event_venue_name != null) {
      $prefill .= "<li>" . t('Venue').': '.$event->field_event_venue_name[LANGUAGE_NONE][0]['value'];
    }
    if ($event->field_location != null) {
      $prefill .= "<li>" . t('Location').': '.$event->field_location[LANGUAGE_NONE][0]['value'] . "</li>";
    }
    $prefill .= "<li>" . t('More Info').': <a href="' . $event_url . '">' . $event_url .'</a>'; 
    $prefill .= "</ul>";
    if ($event->body != null) {
      $prefill .= $event->body[LANGUAGE_NONE][0]['value'] . "";
    }
    $prefill .= "Cheers";

    if ($chapter != null) {
      $prefill .= ",<br>- The " . $chapter->title  . " Team";
    }
    

    //$prefill = t('Link').': '.$event->event . "\n";

    $form['body'] = array(
      '#type' =>'text_format',
      '#title' => t('Custom Message'),
      '#rows' => 10,
      '#value' => $prefill,
      '#required' => TRUE,
      '#id' => 'edit-body',
      '#wysiwyg' => TRUE,
      '#description' => "<small>Tip: The text [first_name] will be replaced with your member's first name when sent.</small>",
      );
    $form['eventid'] = array(
      '#type' => 'token',
      '#id' => 'eventid',
      '#value' => $event->nid,
      );
    $form['test_email'] = array(
      '#title' => t('Send test email to:'),
      '#type' =>'textfield',
      '#id' => 'edit-testemail',
      '#value' => $user->mail,
      );
    $form['test_button'] = array(
      '#type' => 'submit',
      '#value' => t('Send test email'),
      '#id' => 'event-test-email-submit',
    );

    $form['danger_zone'] = array(
      '#markup' => '<br><br><hr><span style="color: red;">You are entering the danger zone. Check and test your announcement first.</span>',
    );

    // only show chapter option if the event has a chapter
    if ($chapter != null) {
      $options['chapter'] = t('All Chapter Members'); 
    }
    $options['rsvp'] = t('Members who have RSVPs');  
    $options['waitlist'] = t('Members on the Waitlist');  
    $options['all'] = t('Both RSVPs/Waitlist');  
    
    $form['recipients'] = array(
      '#type' =>'select',
      '#options' => $options,
      '#title' => t('Send to Recipients:'),
      );
    // send test email to this address (box, button, ajax)
    // and confirm popup when you hit the final submit
    $form['submit_button'] = array(
      '#type' => 'submit',
      '#value' => t('Send Email To All Recipients'),
      '#id' => 'event-email-attendees-submit',
      '#attributes' => array('class' => array(t('bttn-success'))),
    );
    $form['confirm_send'] = array(
      '#type' => 'checkbox',
      '#title' => t('<strong>I\'m ready.</strong> Have you tested your email? There\'s no undo or turning back from here!'),
      '#id' => 'event-email-attendees-confirm',
    );

    $form['help_text'] = array(
      '#markup' => '<br><br><small>Note: Members can opt-out by unchecking <i>Chapter and Event Announcements</i> in their notification settings.</small>',
    );

    
  }
  return $form;
}



/* Send emails callback */
function tm_events_send_emails_ajax(){

  if (!isset($_POST['subject'])) return FALSE;
  if (!isset($_POST['message'])) return FALSE;
  if (!isset($_POST['recipients'])) return FALSE;
  if (!isset($_POST['eventid'])) return FALSE;

  $subject = $_POST['subject'];
  $message = $_POST['message'];
  $message .= "<br><p><small>(Manage your Notification Settings at " . $_SERVER["SERVER_NAME"] . '</small>)</p>';
  $recipients = $_POST['recipients'];
  $eventid = $_POST['eventid'];

  $sendcount = tm_events_send_emails($recipients, $subject, $message, $eventid);

  // indicate success to the js ajax handler
  // todo: return a nicer json response and parse it in the js
  print($sendcount);
}


/* Test email callback */
function tm_events_test_email_ajax(){

  if (!isset($_POST['subject'])) return FALSE;
  if (!isset($_POST['message'])) return FALSE;
  if (!isset($_POST['address'])) return FALSE;
  if (!isset($_POST['eventid'])) return FALSE;

  $subject = $_POST['subject'];
  $message = $_POST['message'];
  $message .= "<br><p><small>(Manage your Notification Settings at " . $_SERVER["SERVER_NAME"] . '</small>)</p>';

  $email = $_POST['address'];
  $eventid = $_POST['eventid'];

  $sendcount = tm_events_send_email($email, $subject, $message, $eventid);

  // indicate success to the js ajax handler
  // todo: return a nicer json response and parse it in the js
  print($sendcount);
}

/* Submit function of communication ajax request */
function tm_events_send_emails($recipients, $subject, $message, $eventid){

  // all these user lists are just flags to event or chapter
  $rsvpflag = flag_get_flag('event_register', NULL);
  $waitflag = flag_get_flag('event_waitlist', NULL);
  $chapterflag = flag_get_flag('signup', NULL);
  $sendcount = 0;

  // RSVP list
  if ($recipients == 'rsvp'){
    $results = db_select('flagging', 'f')
      ->fields('f')
      ->condition('fid', $rsvpflag->fid ,'=')
      ->condition('entity_id', $eventid ,'=')
      ->execute();
  }
  // Waitlist
  if ($recipients == 'waitlist'){
    $results = db_select('flagging', 'f')
      ->fields('f')
      ->condition('fid', $waitflag->fid ,'=')
      ->condition('entity_id', $eventid ,'=')
      ->execute();
  }
  // both sets - shouldn't cause duplicates
  if ($recipients == 'all'){
    $results = db_select('flagging', 'f')
      ->fields('f')
      ->condition('fid', array($waitflag->fid, $rsvpflag->fid) ,'in')
      ->condition('entity_id', $eventid ,'=')
      ->execute();
  }
  // everyone in the chapter
  if ($recipients == 'chapter'){
    // load up the event and find out what the chapter is
    $event = node_load($eventid);
    $chapterid = $event->field_chapter[LANGUAGE_NONE][0]['target_id'];

    $results = db_select('flagging', 'f')
      ->fields('f')
      ->condition('fid', $chapterflag->fid ,'=')
      ->condition('entity_id', $chapterid ,'=')
      ->execute();
  }

  // send off the emails
  while ($result = $results->fetchAssoc()){
    $account = user_load($result['uid']);

    // replace [first_name] token
    $message = str_replace("[first_name]", $account->field_user_first_name[LANGUAGE_NONE][0]['value'], $message);

    // Check user notification is checked: user_chapter_announcements
    $notif = new TMNotification("user_chapter_announcements");
    if ($notif->isEnabled($account->uid)) {
        $sendcount++;
        tm_events_send_email($account->mail, $subject, $message);
    }

  }

  // stats and redirects back to the event
  //drupal_set_message(t("Mail sent to $sendcount people."));
  return $sendcount;
  //drupal_goto('node/'.$form_state['values']['eventid']);
}

/* Sends out a single email */
function tm_events_send_email($email, $subject, $message, $eventid){

    $module = 'tm_events';
    $key = 'key';
    $language = language_default();
    $params = array();
    $send = FALSE;
    $email_message = drupal_mail($module, $key, $email, $language, $params, NULL, $send);
    $email_message['headers']['MIME-Version'] = '1.0';
    $email_message['headers']['Content-Type'] = 'multipart/mixed;';
    $email_message['headers']['Content-Type'] = 'text/html;';
    $email_message['subject'] = check_plain($subject);
    $email_message['body'][] = $message;

    // Retrieve the responsible implementation for this message.
    $system = drupal_mail_system($module, $key);

    // Format the message body.
    $format_message = $system->format($email_message);

    // Send e-mail.
    $message['result'] = $system->mail($format_message);

    // Send 1 email
    return 1;
}

/* Form for managing RSVPs */
function tm_events_rsvp_form($event){
  // didn't want to pass from the url
  $event = node_load(arg(1));
  $form = array();

  $form['#prefix'] = l(t('Back to event'),'node/'.$event->nid);

  if ($event){

    $options['rsvp'] = t('RSVP');  
    $options['waitlist'] = t('Waitlist');  
    $options['remove'] = t('Not attending');  

    $form['status'] = array(
      '#type' =>'select',
      '#options' => $options,
      '#title' => t('Change status'),
      );

    $form['eventid'] = array(
      '#type' =>'hidden',
      '#value' => $event->nid,
      );

    $form['submit_button'] = array(
      '#type' => 'submit',
      '#value' => t('Update'),
      '#id' => 'edit-submit'  
    );
    // list of users, each with checkbox
    $users = db_select('flagging', 'f')
          ->fields('f')
          ->condition('entity_id',$event->nid,'=')
          ->condition('entity_type','node','=')
          ->execute();
    $useroptions = array();
    while ($user = $users->fetchAssoc()){
      $account = user_load($user['uid']);
      $useroptions[$user['uid']] = 
        '<span class="tmeventuser">'.tm_events_username($account).'</span>'.
        '<span class="tmeventstatus">'.tm_events_status($user['fid']).'</span>';
    }
    $form['userlist'] = array(
      '#type' =>'checkboxes',
      '#options' => $useroptions,
      '#title' => t('Attendees'),
      );
    $form['download'] = array(
      '#type' => 'markup',
      '#value' => t('Download as CSV'),
      '#markup' => '<a class="form-submit" href="/download/csv/'.$event->nid.'">'.t('Download as CSV').'</a>',
    );
  }
  return $form;
}
/* RSVP form submit function */
function tm_events_rsvp_form_submit($form, &$form_state){
  $rsvpflag = flag_get_flag('event_register', NULL);
  $waitflag = flag_get_flag('event_waitlist', NULL);

  $action = $form_state['values']['status'];
  $event  = $form_state['values']['eventid'];

  // Ian - TODO confirm that flag and unflag do nothing if the flag is already set/unset
  // docs suggest that nothing happens

  foreach($form_state['values']['userlist'] as $uid){
    if (!empty($uid)){
      $account = user_load($uid);
      if ($action == 'remove'){
        $rsvpflag->flag('unflag', $event, $account, TRUE);
        $waitflag->flag('unflag', $event, $account, TRUE);
      }
      else if ($action == 'waitlist'){
        $rsvpflag->flag('unflag', $event, $account, TRUE);
        $waitflag->flag('flag', $event, $account, TRUE);
      }
      else if ($action == 'rsvp'){
        $waitflag->flag('unflag', $event, $account, TRUE);
        $rsvpflag->flag('flag', $event, $account, TRUE);
      }
    }
  }
}

/* RSVP Download function */
function tm_events_download_csv($nid){

  $chapternode = node_load($nid);
  $oldzone = date_default_timezone_get();
  date_default_timezone_set(drupal_get_user_timezone());
  $csvname = $chapternode->title.'_'.date('M_d_Y_Gi',time());
  date_default_timezone_set($oldzone);

  // csv header
  drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment; filename = '.$csvname);
  
  $fh = fopen('php://output', 'w');
  // puts a header row across the top of the csv
  $item = array(t('First name'),t('Last name'),t('Email'),t('Country'),t('Organisation'),t('Type'),t('Date registered'));
  fputcsv($fh, $item);

  // list of users
  $users = db_select('flagging', 'f')
    ->fields('f')
    ->condition('entity_id',$nid,'=')
    ->condition('entity_type','node','=')
    ->execute();
  while ($user = $users->fetchAssoc()){
    $account = user_load($user['uid']);
    if (empty($account->language)) $language = LANGUAGE_NONE;
    else $language = $account->language;

    $item = array();
    // columns in same order as the header array above
    $item[] = $account->field_user_first_name[$language][0]['value'];
    $item[] = $account->field_user_last_name[$language][0]['value'];
    $item[] = $account->mail;
    if (isset($account->field_user_country[$language][0])){
      $item[] = $account->field_user_country[$language][0]['iso2'];
    }
    else $item[] = t('none');
    if (isset($account->field_job_organization[$language][0]['value'])){
      $item[] = $account->field_job_organization[$language][0]['value'];
    }
    else $item[] = t('none');
    $item[] = tm_events_status($user['fid']);
    $item[] = date('j M Y',$user['timestamp']);
    fputcsv($fh, $item);
  } 
  fclose($fh);
}

/* Converts the flag ID to the flag name */
function tm_events_status($fid){
  $flag = flag_get_flag(NULL, $fid);
  if ($flag->name == 'event_register') return t('RSVP');
  if ($flag->name == 'event_waitlist') return t('Waitlist');
  return '';
}
/* Formats the user's name */
function tm_events_username($user){
  if (empty($user->language)) $language = LANGUAGE_NONE;
  else $language = $user->language;
  $name = $user->name;
  if (isset($user->field_user_first_name[$language])){
    $name = $user->field_user_first_name[$language][0]['value'];
    if (isset($user->field_user_first_name[$language])){
      $name .= ' '.$user->field_user_last_name[$language][0]['value'];
    }
  }
  return $name;
}
