<?php
/**
 * @file
 * Code for the TM Events feature.
 * 
 * @author Olaf Veerman (olaf.veerman@flipside.org)
 * @author Daniel da Silva (daniel.silva@flipside.org)
 */

include_once 'tm_events.features.inc';

/**
 * Implement hook_form_FORM_ID_alter()
 */
function tm_events_form_event_node_form_alter(&$form, &$form_state) {
  
  // Field visibilty based on whether the RSVP is handled through the TM.
  
  // Visible when RSVP is handled on TM.
  $form['field_signup_limit']['#states'] = array(
    'visible' => array(
     ':input[name="field_external_rsvp[und]"]' => array('value' => 0),
    ),
  );

  // Visible when using external RSVP.
  $form['field_rsvp_link']['#states'] = array(
    // Only show RSVP link when event is a TM event.
    'visible' => array(
     ':input[name="field_external_rsvp[und]"]' => array('value' => 1),
    ),
  );

  // /end field visibility based on RSVP.
}

/**
 * Implement hook_ds_field_info()
 */
function tm_events_ds_fields_info($entity_type) {
  if ($entity_type != 'node') {
    return;
  }
  $fields = array();

  $fields['tm_ds_next_event'] = array(
    'title' => t('Next event'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('chapter|*'),
    'function' => '_tm_next_event'
  );

  $fields['tm_ds_date_avatar'] = array(
    'title' => t('Date avatar'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('event|*', 'partner_event|*'),
    'function' => '_tm_date_avatar'
  );

  return array($entity_type => $fields);
}

/**
 * Implement hook_theme()
 */
function tm_events_theme() {
  return array(
    'tm_date_avatar' => array(
      'variables' => array(
        'date' => NULL
      ),
      'path' => drupal_get_path('module','tm_events') . '/templates/fields',
      'template' => 'tm_date_avatar'
    )
  );
}

/**
 * Custom function to fetch the next event, used on chapters. Returns interval
 * between the current date and the event's date.
 */
function _tm_next_event($field, $title = NULL) {
  if ($field['entity']->type = 'chapter') {
    $chapter_id = $field['entity']->nid;

    // Fetch the current and make sure it's UTC and user-defined timezone.
    $current_date = new DateTime('now', new DateTimeZone('UTC'));

    // Fetch the nearest upcoming event that references a particular chapter.
    // Only returns one event, the one with the closest starting date.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'event')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_chapter', 'target_id', $chapter_id)
      ->fieldCondition('field_event_date', 'value', $current_date->format('Y-m-d H:i:s'), '>=')
      ->fieldOrderBy('field_event_date', 'value', 'ASC')
      ->range(0,1);
    $result = $query->execute();

    // Initialize time_until.
    $time_until = NULL;
    if (isset($result['node'])) {
      $next_event_array = array_keys($result['node']);
      $next_event = node_load($next_event_array[0]);
      $event_date = field_get_items('node',$next_event,'field_event_date');
      
      // Create datetime object and ensure UTC timezone, instead of user-defined timezone.
      $event_datetime = new DateTime($event_date[0]['value'], new DateTimeZone('UTC'));
      $time_until = format_interval($event_datetime->format('U') - $current_date->format('U'), 1);
    }
  }
  return $time_until ? t('Event in @time.', array('@time' => $time_until)) : t('No event scheduled yet.');
}

/**
 * Custom function to prepare date for a date badge.
 */
function _tm_date_avatar($field, $title = NULL) {
  if (isset($field['entity']->field_event_date['und'][0]['value'])) {
    $event_date = new DateTime($field['entity']->field_event_date['und'][0]['value']);
    return theme('tm_date_avatar', array(
      'date' => $event_date,
    ));
  }
}

/**
 * Implement hook_node_presave()
 */
function tm_events_node_presave($node) {
  // If is not a Travel Massive RSVP remove the signup limit.
  if (isset($node->field_external_rsvp[LANGUAGE_NONE][0]['value']) && $node->field_external_rsvp[LANGUAGE_NONE][0]['value'] !== '0') {
    $node->field_signup_limit[LANGUAGE_NONE] = array();
  }
}