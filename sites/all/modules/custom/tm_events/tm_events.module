<?php
/**
 * @file
 * Code for the TM Events feature.
 * 
 * @author Olaf Veerman (olaf.veerman@flipside.org)
 * @author Daniel da Silva (daniel.silva@flipside.org)
 */

include_once 'tm_events.features.inc';

/**
 * Implements hook_permission()
 */
function tm_events_permission() {
  return array(
    'add event to any chapter' => array(
      'title' => t('Add event to any chapter'),
      'description' => t('Add events to a chapter, even without being a chapter leader.'),
    ),
  );
}

/**
 * Implement hook_form_FORM_ID_alter()
 */
function tm_events_form_event_node_form_alter(&$form, &$form_state) {
  
  // Field visibilty based on whether the RSVP is handled through the TM.
  
  // Visible when RSVP is handled on TM.
  $form['field_signup_limit']['#states'] = array(
    'visible' => array(
     ':input[name="field_external_rsvp[und]"]' => array('value' => 0),
    ),
  );

  // Visible when using external RSVP.
  $form['field_rsvp_link']['#states'] = array(
    // Only show RSVP link when event is a TM event.
    'visible' => array(
     ':input[name="field_external_rsvp[und]"]' => array('value' => 1),
    ),
  );
  // /end field visibility based on RSVP.
  $form['field_chapter'][LANGUAGE_NONE][0]['target_id']['#ajax'] = array(
    'callback' => '_tm_events_field_organizer_ajax_cb',
    'wrapper' => 'organizer-wrapper',
    'method' => 'replace',
    'effect' => 'fade',
  );

  // Put a wrapper around the field_organizer.
  // This container will be printer and populated after the AJAX request.
  $field_organizer_wrapper = array(
    '#type' => 'container',
    '#prefix' => '<div id="organizer-wrapper">',
    '#suffix' => '</div>',
    '#weight' => $form['field_organizer']['#weight'],
    'field_organizer_child' => $form['field_organizer']
  );
  
  // Set field_organizer as the wrapper, with the actual field as a child.
  // The wrapper needs to have the field_name, to make sure that it abides
  // for example to the fieldgroup configuration.
  $form['field_organizer'] = $field_organizer_wrapper;
  global $user;
  
  // There was an ajax request. Provide correct values.
  if (isset($form_state['values']['field_chapter'][LANGUAGE_NONE][0]['target_id'])) {
    $chapter_id = $form_state['values']['field_chapter'][LANGUAGE_NONE][0]['target_id'];
    
    // Get possible options.
    $opts = array('_none' => t('- None -'))  + _load_organizers_per_chapter($chapter_id);
    $form['field_organizer']['field_organizer_child'][LANGUAGE_NONE]['#options'] = $opts;
    // By default the value of the organizer is the author.
    $form['field_organizer']['field_organizer_child'][LANGUAGE_NONE]['#default_value'] = $user->uid;
  }
  
  // There's a value for the field_chapter. This means:
  // - the node is being edited; or
  // - the field_chapter was prepopulated.
  else if (!empty($form['field_chapter'][LANGUAGE_NONE][0]['target_id']['#default_value'])) {
    // Get id from default value.
    preg_match("/.* \(([0-9]+)\)/", $form['field_chapter'][LANGUAGE_NONE][0]['target_id']['#default_value'], $chapter_id);
    $chapter_id = $chapter_id[1];
    
    // Get possible options.
    $opts = array('_none' => t('- None -'))  + _load_organizers_per_chapter($chapter_id);
    $form['field_organizer']['field_organizer_child'][LANGUAGE_NONE]['#options'] = $opts;
    
    // If there's a default value but we're not editing a node, means that
    // the value was prepopulated from the url.
    // If so, set the default user.
    if (!isset($form['#node']->nid)) {
      $form['field_organizer']['field_organizer_child'][LANGUAGE_NONE]['#default_value'] = $user->uid;
    }
  }
  else {
    // Disable access if we're editing a node for the first time.
    $form['field_organizer']['field_organizer_child']['#access'] = FALSE;
  }
}

/**
 * AJAX callback for field organizer.
 * Triggered by field chapter.
 */
function _tm_events_field_organizer_ajax_cb($form, $form_state) {
  return $form['field_organizer'];
}

/**
 * Loads all the available organizers for a given city/chapter.
 * Basically all the chapter leaders of that city/chapter.
 * 
 * @param int $chapter_id
 * 
 * @return Array [stdClass]
 */
function _load_organizers_per_chapter($chapter_id) {
  $result = db_query('
    SELECT users.name AS name, users.uid AS uid, n.nid AS chapter_nid
    FROM
      {users} users
    INNER JOIN {field_data_field_chapter_leaders} f_c_l ON users.uid = f_c_l.field_chapter_leaders_target_id AND f_c_l.entity_type = :entity_type AND f_c_l.deleted = :deleted
    INNER JOIN {node} n ON f_c_l.entity_id = n.nid
    WHERE users.status <> :user_status AND n.nid = :chapter_id
    ORDER BY name', array(
      ':entity_type' => 'node',
      ':deleted' => 0,
      ':user_status' => 0,
      ':chapter_id' => $chapter_id
  ))->fetchAll();
    
  $data = array();
  foreach ($result as $value) {
    $data[$value->uid] = $value->name;
  }
  
  return $data;
}

/**
 * Implement hook_ds_field_info()
 */
function tm_events_ds_fields_info($entity_type) {
  if ($entity_type != 'node') {
    return;
  }
  $fields = array();

  $fields['tm_ds_next_event'] = array(
    'title' => t('Next event'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('chapter|*'),
    'function' => '_tm_next_event'
  );

  $fields['tm_ds_date_avatar'] = array(
    'title' => t('Date avatar'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('event|*', 'partner_event|*'),
    'function' => '_tm_date_avatar'
  );

  $fields['tm_ds_fulldate_event'] = array(
    'title' => t('Full datetime event'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('event|full', 'partner_event|full'),
    'function' => '_tm_fulldate_event'
  );

  return array($entity_type => $fields);
}

/**
 * Implement hook_theme()
 */
function tm_events_theme() {
  return array(
    'tm_date_avatar' => array(
      'variables' => array(
        'date' => NULL
      ),
      'path' => drupal_get_path('module','tm_events') . '/templates/fields',
      'template' => 'tm_date_avatar'
    )
  );
}

/**
 * Custom function to fetch the next event, used on chapters. Returns interval
 * between the current date and the event's date.
 */
function _tm_next_event($field, $title = NULL) {
  if ($field['entity']->type = 'chapter') {
    $chapter_id = $field['entity']->nid;

    // Fetch the current and make sure it's UTC and user-defined timezone.
    $current_date = new DateTime('now', new DateTimeZone('UTC'));

    // Fetch the nearest upcoming event that references a particular chapter.
    // Only returns one event, the one with the closest starting date.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'event')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_chapter', 'target_id', $chapter_id)
      ->fieldCondition('field_event_date', 'value', $current_date->format('Y-m-d H:i:s'), '>=')
      ->fieldOrderBy('field_event_date', 'value', 'ASC')
      ->range(0,1);
    $result = $query->execute();

    // Initialize time_until.
    $time_until = NULL;
    if (isset($result['node'])) {
      $next_event_array = array_keys($result['node']);
      $next_event = node_load($next_event_array[0]);
      $event_date = field_get_items('node',$next_event,'field_event_date');
      
      // Create datetime object and ensure UTC timezone, instead of user-defined timezone.
      $event_datetime = new DateTime($event_date[0]['value'], new DateTimeZone($event_date[0]['timezone']));
      $time_until = format_interval($event_datetime->format('U') - $current_date->format('U'), 1);
    }
  }
  return $time_until ? t('Event in @time.', array('@time' => $time_until)) : t('No upcoming events.');
}

/**
 * Custom function to prepare date for a date badge.
 */
function _tm_date_avatar($field, $title = NULL) {
  if (isset($field['entity']->field_event_date['und'][0]['value'])) {
    $event_date = new DateTime($field['entity']->field_event_date['und'][0]['value'], new DateTimeZone($field['entity']->field_event_date['und'][0]['timezone']));
    return theme('tm_date_avatar', array(
      'date' => $event_date,
    ));
  }
}

/**
 * Custom function to return the full date and time of an event
 */
function _tm_fulldate_event($field, $title = NULL) {
  // Site timezone is set to UTC. Date field has timezone handling and the 
  // values are stored in the db as provided by user. Since we're interested
  // in local time, we don't need to do conversion.
  if (isset($field['entity']->field_event_date['und'][0]['value'])) {
    $event_date = new DateTime($field['entity']->field_event_date['und'][0]['value'], new DateTimeZone($field['entity']->field_event_date['und'][0]['timezone']));
    $event_date2 = new DateTime($field['entity']->field_event_date['und'][0]['value2'], new DateTimeZone($field['entity']->field_event_date['und'][0]['timezone']));
    if ($event_date != $event_date2) {
      return '<span class="date">' . $event_date->format('l, F j, Y') . '</span><span class="time">' . t('From') . ' ' . $event_date->format('G:i') . ' ' . t('to') . ' ' . $event_date2->format('G:i') . '</span>';      
    }
    else {
      return '<span class="date">' . $event_date->format('l, F j, Y') . '</span><span class="time">' . $event_date->format('G:i') . '</span>';
    }
  } 
}

/**
 * Implement hook_node_presave()
 */
function tm_events_node_presave($node) {
  if (isset($node->field_external_rsvp[LANGUAGE_NONE][0]['value'])) {
    $external_rsvp = $node->field_external_rsvp[LANGUAGE_NONE][0]['value'];
    // If is not a Travel Massive RSVP remove the signup limit.
    if ($external_rsvp !== '0') {
      $node->field_signup_limit[LANGUAGE_NONE] = array();
    }
    // If is not a External RSVP remove the external rsvp link.
    elseif ($external_rsvp !== '1') {
      $node->field_rsvp_link[LANGUAGE_NONE] = array();
    }
  }
}
/*
* Implements hook_menu()
*/
function tm_events_menu() {
  // need to change the permissions on both of these 
  // to be chapter leaders of the referenced event
  $items['node/%node/communicate'] = array(
    'title' => t('Communicate with attendees'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tm_events_communication_form'),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/rsvp'] = array(
    'title' => t('Manage RSVPs'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tm_events_rsvp_form'),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  $items['download/csv/%'] = array(
    'title' => t('Manage RSVPs'),
    'page callback' => 'tm_events_download_csv',
    'page arguments' => array(2),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}
/* Form for communicating with attendees */
function tm_events_communication_form($event){
  // didn't want to pass from the url
  $event = node_load(arg(1));
  $form = array();

  if ($event){
    $view = field_view_field('node',$event,'field_event_date',
      array('label'=>'hidden',));
    $date = render($view);
    $view = field_view_field('node',$event,'field_event_venue_name',
      array('label'=>'hidden',));
    $venue = render($view);

    $form['subject'] = array(
      '#title' => t('Subject: '),
      '#type' =>'textfield',
      '#required' => TRUE,
      );
    $form['message'] = array(
      '#title' => t('Event Details'),
      '#type' =>'markup',
      // The first part of the email that is sent out
      '#markup' => '<br/><strong>Event: </strong><br/>'.$event->title.'<br/><strong>Date: </strong>'.$date.'<strong>Venue: </strong>'.$venue,
      );
    $form['body'] = array(
      '#type' =>'textarea',
      '#title' => t('Custom Message'),
      '#rows' => 10,
      );
    $form['eventid'] = array(
      '#type' =>'hidden',
      '#value' => $event->nid,
      );
    /*
    Temporarily remove this and then make it ajax 
    $form['testemail'] = array(
      '#title' => t('Send test email to:'),
      '#type' =>'textfield',
      );
    $form['test_button'] = array(
      '#type' => 'submit',
      '#value' => t('Send test email'),
      '#id' => 'test-submit',
      '#submit' => array('tm_events_test_email'),
    );
    */
    $options['rsvp'] = t('RSVPs');  
    $options['waitlist'] = t('Waitlist');  
    $options['all'] = t('RSVPs/Waitlist');  
    $options['chapter'] = t('Entire chapter');  

    $form['recipients'] = array(
      '#type' =>'select',
      '#options' => $options,
      '#title' => t('Recipients'),
      );
    $form['submit_button'] = array(
      '#type' => 'submit',
      '#value' => t('Send'),
      '#id' => 'edit-submit'  
    );
  }
  return $form;
}
/* Submit functions */
function tm_events_test_email($form, &$form_state){
  if (isset($form_state['values']['testemail'])){
    // actually send that email
    drupal_set_message(t('Sent a test message to '.$form_state['values']['testemail']));
  }
  else{
    drupal_set_message(t('No email set'));
  }
  // needs to go back to that form with everything prefilled .. hmmm
}


/* Form for managing RSVPs */
function tm_events_rsvp_form($event){
  // didn't want to pass from the url
  $event = node_load(arg(1));
  $form = array();

  if ($event){

    $options['rsvp'] = t('RSVP');  
    $options['waitlist'] = t('Waitlist');  
    $options['remove'] = t('Not attending');  

    $form['status'] = array(
      '#type' =>'select',
      '#options' => $options,
      '#title' => t('Change status'),
      );

    $form['eventid'] = array(
      '#type' =>'hidden',
      '#value' => $event->nid,
      );

    $form['submit_button'] = array(
      '#type' => 'submit',
      '#value' => t('Update'),
      '#id' => 'edit-submit'  
    );
    // list of users, each with checkbox
    $users = db_select('flagging', 'f')
          ->fields('f')
          ->condition('entity_id',$event->nid,'=')
          ->condition('entity_type','node','=')
          ->execute();
    $useroptions = array();
    while ($user = $users->fetchAssoc()){
      $account = user_load($user['uid']);
      $useroptions[$user['uid']] = 
        '<span class="tmeventuser">'.tm_events_username($account).'</span>'.
        '<span class="tmeventstatus">'.tm_events_status($user['fid']).'</span>';
    }
    $form['userlist'] = array(
      '#type' =>'checkboxes',
      '#options' => $useroptions,
      '#title' => t('Attendees'),
      );
    $form['download'] = array(
      '#type' => 'markup',
      '#value' => t('Download as CSV'),
      '#markup' => '<a class="form-submit" href="/download/csv/'.$event->nid.'">'.t('Download as CSV').'</a>',
    );
  }
  return $form;
}
/* RSVP form submit function */
function tm_events_rsvp_form_submit($form, &$form_state){
  $rsvpflag = flag_get_flag('event_register', NULL);
  $waitflag = flag_get_flag('event_waitlist', NULL);

  $action = $form_state['values']['status'];
  $event  = $form_state['values']['eventid'];

  // Ian - TODO confirm that flag and unflag do nothing if the flag is already set/unset
  // docs suggest that nothing happens

  foreach($form_state['values']['userlist'] as $uid){
    if (!empty($uid)){
      $account = user_load($uid);
      if ($action == 'remove'){
        $rsvpflag->flag('unflag', $event, $account, TRUE);
        $waitflag->flag('unflag', $event, $account, TRUE);
      }
      else if ($action == 'waitlist'){
        $rsvpflag->flag('unflag', $event, $account, TRUE);
        $waitflag->flag('flag', $event, $account, TRUE);
      }
      else if ($action == 'rsvp'){
        $waitflag->flag('unflag', $event, $account, TRUE);
        $rsvpflag->flag('flag', $event, $account, TRUE);
      }
    }
  }
}

/* RSVP Download function */
function tm_events_download_csv($nid){

  // csv header
  drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment; filename = output.csv');
  
  $fh = fopen('php://output', 'w');
  // puts a header row across the top of the csv
  $item = array(t('First name'),t('Last name'),t('Email'),t('Country'),t('Organisation'),t('Type'),t('Date registered'));
  fputcsv($fh, $item);

  // list of users
  $users = db_select('flagging', 'f')
    ->fields('f')
    ->condition('entity_id',$nid,'=')
    ->condition('entity_type','node','=')
    ->execute();
  while ($user = $users->fetchAssoc()){
    $account = user_load($user['uid']);
    if (empty($account->language)) $language = LANGUAGE_NONE;
    else $language = $account->language;

    $item = array();
    // columns in same order as the header array above
    $item[] = $account->field_user_first_name[$language][0]['value'];
    $item[] = $account->field_user_last_name[$language][0]['value'];
    $item[] = $account->mail;
    if (isset($account->field_user_country[$language])){
      $item[] = $account->field_user_country[$language][0]['value'];
    }
    else $item[] = t('none');
    if (isset($account->field_job_organization[$language])){
      $item[] = $account->field_job_organization[$language][0]['value'];
    }
    else $item[] = t('none');
    $item[] = tm_events_status($user['fid']);
    $item[] = date('j M Y',$user['timestamp']);
    fputcsv($fh, $item);
  } 
  fclose($fh);
}

/* Converts the flag ID to the flag name */
function tm_events_status($fid){
  $flag = flag_get_flag(NULL, $fid);
  if ($flag->name == 'event_register') return t('RSVP');
  if ($flag->name == 'event_waitlist') return t('Waitlist');
  return '';
}
/* Formats the user's name */
function tm_events_username($user){
  if (empty($user->language)) $language = LANGUAGE_NONE;
  else $language = $user->language;
  $name = $user->name;
  if (isset($user->field_user_first_name[$language])){
    $name = $user->field_user_first_name[$language][0]['value'];
    if (isset($user->field_user_first_name[$language])){
      $name .= ' '.$user->field_user_last_name[$language][0]['value'];
    }
  }
  return $name;
}
