<?php
/**
 * @file
 * Code for the TM Theme feature.
 */

include_once 'tm_theme.features.inc';

// Alter html head
// Remove shortlink metatags to node/123
// from: https://gist.github.com/Dreamseer/3865185
function tm_theme_html_head_alter(&$head_elements) {
  
  global $conf;
  global $user;

  // remove unneeded shortlink url
  $remove = array(
    '/^drupal_add_html_head_link:shortlink:/',     // Shortlink
  );
  foreach ($remove as $item) {
    foreach (preg_grep($item, array_keys($head_elements)) as $key) {
      unset($head_elements[$key]);
    }
  }

  // add noindex to /node or /user URLS
  // all URLs we want indexed should be clean URLS
  $url_parts = explode('/', request_uri());
  if (($url_parts[1] == 'node') or ($url_parts[1] == 'user')) {
  	$head_elements['MYMODULE_meta_robots'] = array(
  		'#tag' => 'meta',
  		'#type' => 'html_tag',
  		'#attributes' => array(
  		'name' => 'robots',
  		'content' => 'noindex'
  		)
  	);
  }

  // if front page add vid js for background video
  if (drupal_is_front_page()) {
    drupal_add_js(drupal_get_path('theme', 'tm') . '/js/jquery.vide.min.js', array('group' => JS_THEME));
  }

  // add impromptu js for better alert box handling
  // see: http://trentrichardson.com/Impromptu/
  // https://github.com/trentrichardson/jQuery-Impromptu
  drupal_add_js(drupal_get_path('theme', 'tm') . '/js/jquery-impromptu.js', array('group' => JS_THEME));

  drupal_add_css(drupal_get_path('theme', 'tm') . '/css/jquery-impromptu.css', array('group' => CSS_THEME));

  // impromptu pure css theme effects admin theme
  // allow on /user for profile editing
  if (!path_is_admin(current_path()) or ($url_parts[1] == "user")) {
    drupal_add_css(drupal_get_path('theme', 'tm') . '/css/jquery-impromptu.pure.css', array('group' => CSS_THEME));
  }

  // if not front page add sticky header
  // also ignore node or user edit pages as account menu is obscured when using sticky header
  if (!drupal_is_front_page()) {
    drupal_add_js(drupal_get_path('theme', 'tm') . '/js/jquery.sticky.js', array('group' => JS_THEME));
  }

  // add EU cookie consent
  // https://silktide.com/tools/cookie-consent
  if (isset($conf["tm_cookieconsent_enable"])) {
    if ($conf["tm_cookieconsent_enable"] == true) {

      $privacy_url = $conf["tm_cookieconsent_privacy_url"];
      drupal_add_js(drupal_get_path('theme', 'tm') . '/js/cookieconsent.v2.min.js', array('group' => JS_THEME));
      drupal_add_js('window.cookieconsent_options = {"message":"We use cookies to ensure you get the best experience on our website. ","dismiss":"Ok","learnMore":"Learn more","link":"' . $privacy_url . '","theme":"dark-bottom"};', 'inline');
    }
  }

  // fix css for administrator on edit page
  if (in_array("administrator", $user->roles)) {
    drupal_add_css ('.fieldset-legend { position: relative !important; }', 'inline');
  }

  // tm_branding methods

  // if front page check for partner branding link
  if (drupal_is_front_page()) {

    // set site_branding_partner cookie
    if (isset($_GET["partner"])) {
      if (trim($_GET["partner"]) != "") {

        // store partner
        user_cookie_save(array('site_branding_partner'=>strtolower(trim($_GET["partner"]))));

        // store timestamp
        $now = new DateTime(null, new DateTimeZone('UTC'));
        user_cookie_save(array('site_branding_partner_timestamp'=>$now->getTimestamp()));

        drupal_goto("/");
      }
    }
  }

  // set site_branding_referrer_domain cookie
  // don't match own domain
  if (isset($_SERVER["HTTP_REFERER"])) {
    if ($_SERVER["HTTP_REFERER"] != "") {
      try {
        $referer_domain = parse_url($_SERVER['HTTP_REFERER'], PHP_URL_HOST);
        if (strtolower($referer_domain) != strtolower($_SERVER['HTTP_HOST'])) {

          // store domain
          $referer_domain = str_replace("www.", "", $referer_domain); // remove www
          user_cookie_save(array('site_branding_referer_domain'=>strtolower($referer_domain)));
          
          // store timestamp
          $now = new DateTime(null, new DateTimeZone('UTC'));
          user_cookie_save(array('site_branding_referer_domain_timestamp'=>$now->getTimestamp()));
        }
        
      } catch (Exception $e) {
        // continue
      }
    }
  }

}

/**
 * Add html meta tags
 */
function tm_theme_preprocess_html(&$variables, $hook) {

  global $conf;

  if (drupal_is_front_page()) {
    tm_theme_add_meta_tags_front_page();
  }
}

/**
 * Add meta tags for front page
 */
function tm_theme_add_meta_tags_front_page() {

  global $conf;

  // gererate canonical url
  $canonical = url('/', array('absolute' => TRUE)) . "/";

  // canonical url
  $meta = array(
    '#tag' => 'link', 
    '#attributes' => array(
      'rel' => 'canonical', 
      'href' => $canonical,
    ),
  );
  drupal_add_html_head($meta, 'canonical');

  // og:url
  $meta = array(
    '#tag' => 'meta', 
    '#attributes' => array(
      'property' => 'og:url', 
      'content' => $canonical,
    ),
  );
  drupal_add_html_head($meta, 'og:url');

  // og:title
  if (isset($conf['tm_frontpage_meta_og_title'])) {
    $meta = array(
      '#tag' => 'meta', 
      '#attributes' => array(
        'property' => 'og:title', 
        'content' => $conf['tm_frontpage_meta_og_title'],
      ),
    );
    drupal_add_html_head($meta, 'og:title');
  }

  // og:image
  if (isset($conf['tm_frontpage_meta_og_image'])) {
    if ($conf['tm_frontpage_meta_og_image'] != "") {
        $meta = array(
        '#tag' => 'meta', 
        '#attributes' => array(
          'property' => 'og:image', 
          'content' => $conf['tm_frontpage_meta_og_image'],
        ),
      );
      drupal_add_html_head($meta, 'og:image');
    }
  }

  // description
  if (isset($conf['tm_frontpage_meta_description'])) {
    $meta = array(
      '#tag' => 'meta', 
      '#attributes' => array(
        'name' => 'description',
        'property' => 'og:description',
        'content' => $conf['tm_frontpage_meta_description'],
      ),
    );
    drupal_add_html_head($meta, 'description');
  }
}

/**
 * Add meta tags for user
 */
function tm_theme_add_meta_tags_user($uid) {

  global $conf;

  // load user account
  $account = user_load($uid);
  if ($account == null) {
    return;
  }

  // date published and edited
  /* ie: 
  <meta property="article:published_time" content="2014-12-09T20:46:24-08:00" />
  <meta property="article:modified_time" content="2016-01-19T10:38:35-08:00" />
  <meta property="og:updated_time" content="2016-01-19T10:38:35-08:00" />*/

  $time_format = "Y-m-d\TH:i:s-00:00";
  $published_dt = new Datetime(null, new DateTimeZone('UTC'));
  $published_dt->setTimestamp($account->created);
  $published_time = $published_dt->format($time_format); //"2016-01-19T10:38:35-08:00";

  // article:published_time
  $meta = array(
    '#tag' => 'meta', 
    '#attributes' => array(
      'property' => 'article:published_time', 
      'content' => $published_time,
    ),
  );
  drupal_add_html_head($meta, 'article:published_time');

  // check last update time
  $last_update = tm_users_get_update_timestamp($uid);
  if ($last_update == null) {
    return; // no last update to display
  }

  $updated_dt = new Datetime(null, new DateTimeZone('UTC'));
  $updated_dt->setTimestamp($last_update);
  $updated_time = $updated_dt->format($time_format); //"2016-01-19T10:38:35-08:00";

  // article:modified_time
  $meta = array(
    '#tag' => 'meta', 
    '#attributes' => array(
      'property' => 'article:modified_time', 
      'content' => $updated_time,
    ),
  );
  drupal_add_html_head($meta, 'article:modified_time');

  // og:updated_time
  $meta = array(
    '#tag' => 'meta', 
    '#attributes' => array(
      'property' => 'og:updated_time', 
      'content' => $updated_time,
    ),
  );
  drupal_add_html_head($meta, 'og:updated_time');

}

/**
 * Add meta tags for node
 */
function tm_theme_add_meta_tags_node($nid) {

  global $conf;

  // load node
  $node = node_load($nid);
  if ($node == null) {
    return;
  }

  // only support organization, chapter and events
  if (!in_array($node->type, array("organization", "chapter", "event"))) {
    return;
  }

  // date edited
  /* ie: 
  <meta property="article:modified_time" content="2016-01-19T10:38:35-08:00" />
  <meta property="og:updated_time" content="2016-01-19T10:38:35-08:00" />*/

  // check last update time from status update
  $last_update = null;
  if (module_exists("tm_status_updates")) {
    $last_update = tm_status_updates_get_last_update_timestamp($node->type, $node->nid);
  }

  // get when node was last changed
  $last_changed = $node->changed;

  // get most recent update between status update and last changed
  $most_recent = max(array($last_update, $last_changed));
   
  $time_format = "Y-m-d\TH:i:s-00:00";

  // published
  $published_dt = new Datetime(null, new DateTimeZone('UTC'));
  $published_dt->setTimestamp($node->created);
  $published_time = $published_dt->format($time_format); //"2016-01-19T10:38:35-08:00";

  // modified
  $updated_dt = new Datetime(null, new DateTimeZone('UTC'));
  $updated_dt->setTimestamp($most_recent);
  $updated_time = $updated_dt->format($time_format); //"2016-01-19T10:38:35-08:00";


  // article:published_time
  /*$meta = array(
    '#tag' => 'meta', 
    '#attributes' => array(
      'property' => 'article:published_time', 
      'content' => $published_time,
    ),
  );
  drupal_add_html_head($meta, 'article:published_time');*/

  // article:modified_time
  $meta = array(
    '#tag' => 'meta', 
    '#attributes' => array(
      'property' => 'article:modified_time', 
      'content' => $updated_time,
    ),
  );
  drupal_add_html_head($meta, 'article:modified_time', true);

  // og:updated_time
  $meta = array(
    '#tag' => 'meta', 
    '#attributes' => array(
      'property' => 'og:updated_time', 
      'content' => $updated_time,
    ),
  );
  drupal_add_html_head($meta, 'og:updated_time');

}

/**
 * Add cover video to user profile
 * Add meta tags to user profile
 */
function tm_theme_user_view($account, $view_mode, $langcode) {

  global $conf;

  // Check full view mode
  if ($view_mode != "full") {
    return;
  }

  // check we are viewing user account
  if (!(arg(0) == 'user' and is_numeric(arg(1)) and arg(2) == FALSE)) {
    return;
  }

  // Check cover videos enabled
  if ($conf["tm_cover_videos_enabled"]) {
    tm_theme_add_cover_video_js($account, null);
  }

  // Add additional user meta tags
  tm_theme_add_meta_tags_user(arg(1));

}

/**
 * Add cover video to node profile
 */
function tm_theme_node_view($node, $view_mode, $langcode) {

  global $conf;

  // Check full view mode
  if ($view_mode != "full") {
    return;
  }

  // check we are viewing node
  if (!(arg(0) == 'node' and is_numeric(arg(1)) and arg(2) == FALSE)) {
    return;
  }

  // add video cover
  if ($conf["tm_cover_videos_enabled"]) {
    tm_theme_add_cover_video_js(null, $node);
  }

  // Add additional node meta tags
  tm_theme_add_meta_tags_node(arg(1));

}

/**
 * Check for valid cover video url and apply js
 */
function tm_theme_add_cover_video_js($account, $node) {

  // check if user has cover video
  $cover_video_id = null;
  $cover_video_value = null;

  // account
  if ($account != null) {
    if (isset($account->field_user_cover_video[LANGUAGE_NONE][0]['value'])) {
      $cover_video_value = $account->field_user_cover_video[LANGUAGE_NONE][0]['value'];
    }
  }
  
  // node (event, chapter, company)
  if ($node != null) {
    if ($node->type == "chapter") {
      if (isset($node->field_chapter_cover_video[LANGUAGE_NONE][0]['value'])) {
        $cover_video_value = $node->field_chapter_cover_video[LANGUAGE_NONE][0]['value'];
      }
    }

    if ($node->type == "organization") {
      if (isset($node->field_company_cover_video[LANGUAGE_NONE][0]['value'])) {
        $cover_video_value = $node->field_company_cover_video[LANGUAGE_NONE][0]['value'];
      }
    }

    if ($node->type == "event") {
      if (isset($node->field_event_cover_video[LANGUAGE_NONE][0]['value'])) {
        $cover_video_value = $node->field_event_cover_video[LANGUAGE_NONE][0]['value'];
      }
    }
  }
  
  // validate video url
  if ($cover_video_value != null) {
    
    // match youtube url
    // http://stackoverflow.com/questions/3392993/php-regex-to-get-youtube-video-id
    preg_match("/^(?:http(?:s)?:\/\/)?(?:www\.)?(?:m\.)?(?:youtu\.be\/|youtube\.com\/(?:(?:watch)?\?(?:.*&)?v(?:i)?=|(?:embed|v|vi|user)\/))([^\?&\"'>]+)/", $cover_video_value, $matches);

    if (sizeof($matches) != 0 ) {
      $cover_video_id = $matches[1];
    } else {
      // check if its just id
      if ((strlen($cover_video_value < 20) && (strpos($cover_video_value, ".") === false))) {
        $cover_video_id = $cover_video_value;
      }
    }
  }

  // testing
  // $cover_video_id = "jhFDyDgMVUI"; // "rbtv2zxhufM"

  // add js if user has a cover video
  if ($cover_video_id != null) {

    // add cover video to play
    drupal_add_js(array('tm_theme' => array('cover_video_id' => $cover_video_id)), array('type' => 'setting'));

    // add edit photos script to page
    drupal_add_js(drupal_get_path('module', 'tm_theme') . '/js/tm_theme_cover_video.js');

  }

}
