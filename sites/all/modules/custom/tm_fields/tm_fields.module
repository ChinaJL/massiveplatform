<?php
/**
 * @file
 * Code for the TM Fields feature.
 */

include_once 'tm_fields.features.inc';

/**
 * Implement hook_ds_field_info
 */
function tm_fields_ds_fields_info($entity_type) {
  $fields = array();

  $fields['tm_ds_content_type'] = array(
    'title' => t('Content type'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|search_result', 'user|*'),
    'function' => '_tm_content_type_process'
  );

  $fields['tm_ds_chapter_sticker'] = array(
    'title' => t('Chapter sticker'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('event|*', 'user|*'),
    'function' => '_tm_chapter_sticker_process'
  );

  $fields['tm_ds_organization_sticker'] = array(
    'title' => t('Organization sticker'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('organization|*'),
    'function' => '_tm_organization_sticker_process'
  );

  $fields['tm_ds_approved'] = array(
    'title' => t('Approval status'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('user|*'),
    'function' => '_tm_approved_process'
  );

  $fields['tm_ds_more_actions'] = array(
    'title' => t('More actions'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'function' => '_tm_more_actions_process'
  );

  $fields['tm_ds_communication_actions'] = array(
    'title' => t('Communication actions'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'function' => '_tm_communication_actions_process'
  );
  
  $fields['tm_ds_anon_flag_placeholder'] = array(
    'title' => t('Anonymous flag placeholder'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'function' => '_tm_anon_flag_placeholder'
  );

  $fields['tm_ds_edit_own_profile'] = array(
    'title' => t('Edit own profile button'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('user|*'),
    'function' => '_tm_edit_own_profile_process',
    'properties' => array(
      'settings' => array(
        'Extra classes' => array(
          'type' => 'textfield',
          'description' => t('Classes for the link')
        )
      ),
      'default' => array(
        'Extra classes' => ''
      )
    ),
  );

  $fields['tm_ds_connection_actions'] = array(
    'title' => t('Connection Actions'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('user|*'),
    'function' => 'tm_fields_connection_actions',
    'properties' => array(
      'settings' => array(
        'Extra classes' => array(
          'type' => 'textfield',
          'description' => t('Classes for the link')
        )
      )
    )
  );

  // provided by tm_track_views
  $fields['tm_ds_track_viewers'] = array(
    'title' => t('Who viewed my profile'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('user|*'),
    'function' => '_tm_ds_track_viewers_wrapper'
  );

  // provided by tm_track_views
  $fields['tm_ds_track_company_viewers'] = array(
    'title' => t('Who viewed my company profile'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('organization|*'),
    'function' => '_tm_ds_track_viewers_wrapper'
  );
  
  return array($entity_type => $fields);
}

/**
 * Implements hook_ds_field_settings_form().
 * http://www.elevatedthird.com/blog/advanced-custom-fields-display-suite
 */
function tm_fields_ds_field_settings_form($field) {
  return ds_ds_field_settings_form($field);
}

/**
 * Implements hook_ds_field_format_summary().
 * http://www.elevatedthird.com/blog/advanced-custom-fields-display-suite
 */
function tm_fields_ds_field_format_summary($field) {
  return ds_ds_field_format_summary($field);
}

/**
 * Custom function to return the human readable name of the content type
 */
function _tm_content_type_process($field, $title = NULL) {
  if ($field['entity_type'] == 'node') {
    return node_type_get_name($field['bundle']);
  }
  elseif ($field['entity_type'] == 'user') {
    return t('Member');
  }
}

/**
 * Custom function to build the chapter sticker
 */
function _tm_chapter_sticker_process($field, $title = NULL) {

  global $conf;
  $id = null;

  // field_chapter
  if (isset($field['entity']->field_chapter['und'][0]['target_id'])) {
    $id = $field['entity']->field_chapter['und'][0]['target_id'];
  }

  // field_home_chapter (user)
  if (isset($field['entity']->field_home_chapter['und'][0]['target_id'])) {
    $id = $field['entity']->field_home_chapter['und'][0]['target_id'];
  }

  if ($id != null) {
    $related_chapter = node_load($id);
    if ($related_chapter){
      return theme('tm_chapter_sticker', array(
        'custom_url' => null,
        'chapter_id' => $related_chapter->nid,
        'shortcode' => $related_chapter->field_chapter_shortcode['und'][0]['value'],
        'color' => $related_chapter->field_chapter_color['und'][0]['rgb'],
      ));
    }
  }

  if ($id == null) {

    // defaults
    $event_type = null;
    $event_type_name = "Member Event";
    $url = url("events");

    // get event type name
    if (isset($field['entity']->field_event_type['und'][0]['value'])) {
      $event_type = $field['entity']->field_event_type['und'][0]['value'];
      if (isset($conf['tm_event_types'][$event_type])) {
         $event_type_name = $conf['tm_event_types'][$event_type];
      } 
    }

    // member event
    if ($event_type == "member" || $event_type == "all") {
      $url = url("user/" . $field['entity']->uid);
    }

    // company event
    if ($event_type == "company") {
      $url = url("events/list/company");
      if (isset($field['entity']->field_event_company['und'][0]['target_id'])) {
        $company_id = $field['entity']->field_event_company['und'][0]['target_id'];
        $url = url("node/" . $company_id);
      }
    }

    // conference event
    if ($event_type == "conference") {
      $url = url("events/list/conference");
    }

    // don't show community (chapter) event badge
    if ($event_type == "community") {
      $event_type = null;
    }
   
    if ($event_type != null) {
      return theme('tm_chapter_sticker', array(
        'custom_url' => $url,
        'chapter_id' => null,
        'shortcode' => $event_type_name,
        'color' => $conf["tm_event_types_sticker_icon_color"]
      ));
    }

  }
}

/**
 * Custom function to build the organization sticker
 */
function _tm_organization_sticker_process($field, $title = NULL) {

  if (!module_exists("tm_subscriptions")) {
    return;
  }
  
  global $conf;
  global $user;

  $node_id = $field['entity']->nid;
  $organization = $field['entity'];

  // show all other users the learn_more_url
  // show customers the support url
  if (tm_organizations_is_company_profile_manager($user->uid, $node_id)) {
    $custom_url = tm_subscriptions_get_organization_subscription_field($organization, "support_url");
  } else {
    $custom_url = tm_subscriptions_get_organization_subscription_field($organization, "learn_more_url");
  }


  $is_subscriber = tm_subscriptions_is_organization_subscription_enabled($node_id);
  return theme('tm_organization_sticker', array(
    'is_subscriber' => $is_subscriber,
    'label' => $conf["tm_subscriptions_organization_label_short"],
    'custom_url' => $custom_url
    )
  );

}

/**
 * Custom function to build the approved status
 */
function _tm_approved_process($field, $title = NULL) {

  global $conf;
  global $user;

  // default unapproved
  $approval = "notapproved";
  $approval_text = tm_users_get_unapproved_member_label();

  // approved
  if (in_array("approved user", $field['entity']->roles)){
    $approval = "approved";
    $approval_text = tm_users_get_approved_member_label();
  }

  // subscriber
  if (in_array("subscriber", $field['entity']->roles)){
    $approval = "subscriber";
    $approval_text = "Pro Member";
  }

  // so small it's not really worth a tpl
  $html = '<p class="approval"><span class="text_'.$approval.'">'.$approval_text.'</span></p>';

  // if user is looking at their own profile and its unapproved, show them approval link
  if (($approval == "notapproved") and ($field['entity']->uid == $user->uid))  {

    // show last time request info was flagged
    $loaded = user_load($user->uid);
    $who_flagged = flag_get_entity_flags("user", $loaded->uid, "approval_requested_by_user");
    if (sizeof($who_flagged) > 0) {
      foreach ($who_flagged as $flagger) {
        $difference = time() - $flagger->timestamp;
      }
      $flagged_time = format_interval($difference, 1) . " ago";

      // 1. Show approval requested link
      $approval_link = l(t($conf['tm_requested_approval_text'] . ' (' . $flagged_time . ')'), 'javascript:jq_approval_already_requested();', array('fragment' => '','external'=>true));
      $html .= '<span class="approval_pending" style="font-size: 10pt;">' . $approval_link . '</span>';

    } else {

      // 2. Show "Approve my account" link
      $tm_request_approval_text = 'Request approval';
      if (isset($conf["tm_request_approval_text"])) {
        $tm_request_approval_text = $conf["tm_request_approval_text"];
      }
      $approval_link = l(t($tm_request_approval_text), 'javascript:jq_request_approval(' . $loaded->uid . ')', array('fragment' => '','external'=>true, 'attributes' => array('class' => array('approval-link'))));

      $html .= '<span class="approval" style="font-size: 10pt;">' . $approval_link . '</span>';
    }
  }

  return $html;
}

/**
 * Custom function to build the communication actions menu
 */
function _tm_communication_actions_process($field, $title = NULL) {

  global $base_root, $user;
  global $conf;
  $base = $base_root . request_uri();
  $links = array(
    'edition' => array(),
  );

  $show_menu = false;

  $menu_item = menu_get_item();

  // START Contact chapter owners.
  if (isset($menu_item['page_arguments'][0]->nid)) {
    
    $node = menu_get_object();

    if ($node->type == 'chapter') {
      
      $dest = $node->nid;
     
      if ($dest) {
        $show_menu = true;

        $current_uri = request_uri();
        $current_uri = substr($current_uri, 1); // delete first slash

        // chapter invitations
        $link_path = $current_uri.'/message';

        // check if user logged in
        if ($user->uid > 0) {

          // show contact leaders form
          $links['contactleaders'][] = array(
            'wrapper_class' => array('contactleaders'),
            'content' => l(t('Message chapter leaders'), $link_path, array(
              'attributes' => array(
              'title' => t('Message chapter leaders')
              )
            ))
          );

        } else {

          // show login box
          $links['contactleaders'][] = array(
            'wrapper_class' => array('contactleaders'),
            'content' => l(t('Message chapter leaders'), 'javascript:jq_login_signup_box();', array(
              'external' => true,
              'attributes' => array(
              'title' => t('Message chapter leaders')
              )
            ))
          );
        }
      }
    }
  }
  // END contact chapter owners

  // START Contact event organizers.
  if (isset($menu_item['page_arguments'][0]->nid)) {
    
    $node = menu_get_object();
    
    if ($node->type == 'event') {

      $dest = $node->nid;
     
      if ($dest) {
        $show_menu = true;

        // chapter invitations
        $link_path = 'events/message/' . $node->nid;

        // check if user logged in
        if ($user->uid > 0) {

          // show contact leaders form
          $links['contactleaders'][] = array(
            'wrapper_class' => array('contactorganizers'),
            'content' => l(t('Message event organizers'), $link_path, array(
              'attributes' => array(
              'title' => t('Message event organizers')
              )
            ))
          );

        } else {

          // show login box
          $links['contactleaders'][] = array(
            'wrapper_class' => array('contactleaders'),
            'content' => l(t('Message event organizers'), 'javascript:jq_login_signup_box();', array(
              'external' => true,
              'attributes' => array(
              'title' => t('Message event organizers')
              )
            ))
          );
        }
      }
    }
  }
  // END contact event organizers

  // START message member link
  if ($menu_item['path'] == 'user/%') {

    $uid = $menu_item['page_arguments'][0]->uid;
    $targetuser = user_load($uid);

    // Only show link for approved users
    if (in_array("approved user", $user->roles)){

      $send_message_html = tm_messaging_make_send_message_link($user, $targetuser);

      if ($send_message_html != null) {
        $show_menu = true;
        $links['messaging'][] = array(
        'wrapper_class' => array('messaging'),
        'content' => $send_message_html
        );
      }
    }
  }
  // END message member link

  // Don't show menu if there are no communication options
  if (!$show_menu) { 
    return null;
  }

  // Return links
  return theme('communication_actions', array('links' => $links));

}


/**
 * Custom function to build the more_actions menu
 */
function _tm_more_actions_process($field, $title = NULL) {
  global $base_root, $user;
  global $conf;
  $base = $base_root . request_uri();
  $links = array(
    'edition' => array(),
    'share' => array()
  );

  $menu_item = menu_get_item();

  // START Edit link.
  // Is it a node?
  if (isset($menu_item['page_arguments'][0]->nid)) {
    $nid = $menu_item['page_arguments'][0]->nid;

    $allowed_to_edit = false;
    if (isset($field['entity']->type) && $field['entity']->type == 'event') {
      // use our own permission method for events
      $allowed_to_edit = tm_events_check_permission_edit_event($user, $field['entity']);
    } else {
      $edit_menu = menu_get_item('node/' . $nid . '/edit');
      $allowed_to_edit = $edit_menu['access'];
    }

    if ($allowed_to_edit) {
      $links['edition'][] = array(
        'wrapper_class' => array('edit'),
        'content' => l(t('Edit'), 'node/' . $nid . '/edit', array(
          'attributes' => array(
            'title' => t('Edit')
          )
        ))
      );
    }
  }

  // Is it a user?
  else if (isset($menu_item['page_arguments'][0]->uid)) {
    $uid = $menu_item['page_arguments'][0]->uid;
    $edit_menu = menu_get_item('user/' . $uid . '/edit');
    if ($edit_menu['access']) {
      $links['edition'][] = array(
        'wrapper_class' => array('edit'),
        'content' => l(t('Edit'), 'user/' . $uid . '/edit', array(
          'attributes' => array(
            'title' => t('Edit user profile')
          )
        ))
      );
    }
  }
  // END Edit link.

  // START manage RSVPs
  if (isset($menu_item['page_arguments'][0]->nid) && $user->uid > 0) {
    $node = menu_get_object();
    if ($node->type == 'event') {
      
      $show_menu_item = false;

      // check permission
      $show_menu_item = tm_events_check_permission_edit_event($user, $field['entity']);
    
      // if event is external rsvp, don't show
      if ($node->field_external_rsvp['und'][0]['value']) {
        $show_menu_item = false;
      }

      if ($show_menu_item) {
        $links['manageattendees'][] = array(
          'wrapper_class' => array('managersvp'),
          'content' => l(t('Manage registrations'), 'events/manage-registrations/' . $nid, array(
            'attributes' => array( 
            'title' => t('Manage registrations')
            )
          ))
        );
      }
    }
  }
  // END manage RSVPs

  // START download RSVP list
  if (isset($menu_item['page_arguments'][0]->nid) && $user->uid > 0) {
    $node = menu_get_object();
    if ($node->type == 'event') {
      
      // check permission
      $show_menu_item = tm_events_check_permission_edit_event($user, $field['entity']);
    
      // also see if user is featured and has access to download csv
      if (!$show_menu_item) {
        $show_menu_item = tm_events_check_featured_member_download_csv($user, $field['entity']);
      }

      // if event is external rsvp, don't show
      if ($node->field_external_rsvp['und'][0]['value']) {
        $show_menu_item = false;
      }

      if ($show_menu_item) {
        $links['manageattendees'][] = array(
          'wrapper_class' => array('managersvp'),
          'content' => l(t('Download attendee list'), 'events/download-csv/' . $nid, array(
            'attributes' => array( 
            'title' => t('Download attendee list')
            )
          ))
        );
      }
    }
  }
  // END download RSVP list

  // START contact attendees
  if (isset($menu_item['page_arguments'][0]->nid) && $user->uid > 0) {
    $node = menu_get_object();
    if ($node->type == 'event') {

      // check permission
      $show_menu_item = tm_events_check_permission_announce_event($user, $field['entity']);

      // if event is external rsvp, don't show
      if (isset($conf['tm_event_restrict_announcement_rsvp'])) {
        if ($conf['tm_event_restrict_announcement_rsvp'] == true) {
      
          if ($node->field_external_rsvp['und'][0]['value']) {
            $show_menu_item = false;
            $links['manageattendees'][] = array(
              'wrapper_class' => array('contactattendees'),
              'content' => l(t('Send announcement'), "javascript:jq_alert('Enable event management features', 'Make it easier for members to register and get access to event management features by enabling <i>Allow members to RSVP instantly</i> in your event settings.')", array(
                                'fragment' => '',
                                'external'=>true,
                                'attributes' => array('title' => t('Send member'))
                            ))
              );
          }
        }
      }

      if ($show_menu_item) {
        $links['manageattendees'][] = array(
          'wrapper_class' => array('contactattendees'),
          'content' => l(t('Send announcement'), 'events/send-announcement/' . $nid, array(
            'attributes' => array( 
            'title' => t('Send announcement')
            )
          ))
        );

        // Display when last sent announcement
        $announcement_last_sent_flagged = flag_get_entity_flags("node", $nid, "announcement_last_sent");
        if (sizeof($announcement_last_sent_flagged) > 0) {
          $flagged_last = array_pop($announcement_last_sent_flagged);
          $difference = time() - $flagged_last->timestamp;
          $flagged_time = format_interval($difference, 1) . " ago";
          $who_sent = user_load($flagged_last->uid);
          $last_sent_text = "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Sent " . $flagged_time . " by " . l($who_sent->field_user_first_name[LANGUAGE_NONE][0]['value'], "/" . drupal_get_path_alias("user/" . $who_sent->uid), array('attributes' => array('target' => '_blank', 'class' => array('report-flagged-link')))) . "</span><br>";
          $links['manageattendees'][] = array(
            'wrapper_class' => array('contactattendees'),
            'content' => t($last_sent_text),
          );
        }

      }
    }
  }
  // END contact attendees

  // START event insights
  if (isset($menu_item['page_arguments'][0]->nid) && $user->uid > 0) {
    $node = menu_get_object();
    
    if ($node->type == 'event') {

      // check permission
      $show_menu_item = tm_events_check_permission_announce_event($user, $field['entity']);
      if ($show_menu_item) {

        if ($node->field_external_rsvp[LANGUAGE_NONE][0]['value']) {

          $links['manageattendees'][] = array(
            'wrapper_class' => array('contactattendees'),
            'content' => l(t('Event insights'), "javascript:jq_alert('Get detailed reporting', 'Manage your attendee list and view detailed insights by enabling <i>Allow members to RSVP instantly</i> in your event settings.')", array(
                              'fragment' => '',
                              'external'=>true,
                              'attributes' => array('title' => t('Event insights'))
                          ))
            );

        } else {

          $links['manageattendees'][] = array(
            'wrapper_class' => array('managersvp'),
            'content' => l(t('Event insights'), 'events/insights/' . $nid, array(
              'attributes' => array( 
              'title' => t('Event insights')
              )
            ))
          );
        
        }
      }
    }
  }
  // END event insights

  // START View event viewers
  if (module_exists("tm_track_views")) {
    if (isset($field['entity']->type) && $field['entity']->type == 'event') {

      // Check if is moderator or administrator
      if (tm_events_check_permission_edit_event($user, $field['entity'])) {

        // get number of viewers
        $max_view_days = $conf["tm_track_views_store_days"];
        $num_views = tm_track_views_how_many_viewed($field['entity']->nid, "node", $user->uid, $max_view_days);

        if ($num_views > 0) {

          $num_views_plural = "members";
          if ($num_views == 1) {
            $num_views_plural = "member";
          }
        
          $menu_text = "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'><a style='display: inline; padding: 0rem;' href='/event/" . $field['entity']->nid . "/viewers'>Viewed by " . $num_views .  " " . $num_views_plural . "</a></span>";

          $links['manageattendees'][] = array(
            'wrapper_class' => array('viewers'),
            'content' => t($menu_text),
          );

        }
      }
    }
  }
  // END View event viewers

  // START ticket sales
  if (module_exists("tm_payments")) {
    if (isset($menu_item['page_arguments'][0]->nid) && $user->uid > 0) {
      $node = menu_get_object();
      if ($node->type == 'event') {

        // check permission
        $show_menu_item = false;
        $allowed_manage_event = tm_events_check_permission_edit_event($user, $field['entity']);
        if ($allowed_manage_event) {

          // check payments are enabled
          if (_tm_payments_is_payment_enabled($field['entity'])) {
             $show_menu_item = true;
          }
        }

        // if event is external rsvp, don't show
        if ($node->field_external_rsvp[LANGUAGE_NONE][0]['value']) {
          $show_menu_item = false;
        }

        if ($show_menu_item) {
          $links['manageattendees'][] = array(
            'wrapper_class' => array('ticketsales'),
            'content' => l(t('Ticket sales'), 'payment/reports/event-sales/' . $nid, array(
              'attributes' => array( 
              'title' => t('Ticket sales')
              )
            ))
          );
        }
      }
    }
  }
  // END ticket sales

  // START show calendar link
  if (isset($menu_item['page_arguments'][0]->nid) && $user->uid > 0) {
    $node = menu_get_object();
    if ($node->type == 'event') {
      
      $show_menu_item = false;

      // check permission
      $show_menu_item = tm_events_check_permission_edit_event($user, $field['entity']);
    
      if ($show_menu_item) {

        $calendar_link = '/events/download-ical/' . $nid;
        $links['manageattendees'][] = array(
          'wrapper_class' => array('downloadcalendar'),
          'content' => l(t('Download calendar'), $calendar_link, array(
            'attributes' => array(
              'title' => t('Download calendar')
            )
          ))
        );
      }
    }
  }
  // END show calendar link

  // START download chapter members.
  if (isset($menu_item['page_arguments'][0]->nid) && $user->uid > 0) {
    $node = menu_get_object();
    if ($node->type == 'chapter') {
      global $user;
      $show_menu_item = false;

      // show to chapter leaders
      $targetuser = user_load($user->uid);
      if (tm_users_is_chapter_leader($targetuser->uid, $node->nid)) {
        $show_menu_item = true;
      }

      // if is admin or moderator always show
      if ((in_array('administrator', array_values($user->roles))) or (in_array('moderator', array_values($user->roles)))) {
        $show_menu_item = true;
      }

      if ($show_menu_item) {

        $current_uri = request_uri();
        $current_uri = substr($current_uri, 1); // delete first slash

        // export data
        $link_path = $current_uri.'/export';
        $links['chapterdata'][] = array(
          'wrapper_class' => array('downloadmembers'),
          'content' => l(t('Download members CSV'), $link_path, array(
            'attributes' => array( 
            'title' => t('Download members CSV')
            )
          ))
        );
      }
    }
  }
  // END download chapter members

  // START chapter invitations and unapproved members
  if (isset($menu_item['page_arguments'][0]->nid) && $user->uid > 0) {
    $node = menu_get_object();
    if ($node->type == 'chapter') {
      global $user;
      $show_menu_item = false;

      // show to chapter leaders
      if (tm_users_is_chapter_leader($user->uid, $node->nid) || user_access('tm invite all chapters')) {
        $show_menu_item = true;
      }

      // if is admin or moderator always show
      if ((in_array('administrator', array_values($user->roles))) or (in_array('moderator', array_values($user->roles)))) {
        $show_menu_item = true;
      }

      if ($show_menu_item) {
        $current_uri = request_uri();
        $current_uri = substr($current_uri, 1); // delete first slash

        // chapter invitations
        $link_path = $current_uri.'/invitations';
        $links['chaptertools'][] = array(
          'wrapper_class' => array('chapterinvitiations'),
          'content' => l(t('Chapter invitations'), $link_path , array(
            'attributes' => array( 
            'title' => t('Chapter invitations')
            )
          ))
        );

        // unapproved members
        $unapproved_label = tm_users_get_unapproved_member_label("plural");
        $link_path = $current_uri.'/unapproved-members';
        $links['chaptertools'][] = array(
          'wrapper_class' => array('chapterinvitiations'),
          'content' => l(t($unapproved_label), $link_path , array(
            'attributes' => array( 
            'title' => t($unapproved_label)
            )
          ))
        );

        // chapter announcement
        if ($conf['tm_chapters_announcements_enabled']) {
          $link_path = '/chapters/send-announcement/' . $node->nid;
          $links['chaptertools'][] = array(
            'wrapper_class' => array('chapter_stats'),
            'content' => l(t('Chapter announcement'), $link_path, array(
              'attributes' => array( 
              'title' => t('Chapter announcement')
              )
            ))
          );

          // Display when last sent announcement
          $announcement_last_sent_flagged = flag_get_entity_flags("node", $node->nid, "announcement_last_sent");
          if (sizeof($announcement_last_sent_flagged) > 0) {
            $flagged_last = array_pop($announcement_last_sent_flagged);
            $difference = time() - $flagged_last->timestamp;
            $flagged_time = format_interval($difference, 1) . " ago";
            $who_sent = user_load($flagged_last->uid);
            $last_sent_text = "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Sent " . $flagged_time . " by " . l($who_sent->field_user_first_name[LANGUAGE_NONE][0]['value'], "/" . drupal_get_path_alias("user/" . $who_sent->uid), array('attributes' => array('target' => '_blank', 'class' => array('report-flagged-link')))) . "</span><br>";
            $links['chaptertools'][] = array(
              'wrapper_class' => array('chapter_stats'),
              'content' => t($last_sent_text),
            );
          }

        }

        // view stats
        $link_path = $current_uri.'/insights';
        $links['chaptertools'][] = array(
          'wrapper_class' => array('chapter_stats'),
          'content' => l(t('Chapter insights'), $link_path, array(
            'attributes' => array( 
            'title' => t('Chapter insights')
            )
          ))
        );

        if (module_exists("tm_commissions")) {
          // view chapter commissions
          $link_path = $current_uri.'/commissions';
          $links['chaptertools'][] = array(
            'wrapper_class' => array('chapter_stats'),
            'content' => l(t('Commissions'), $link_path, array(
              'attributes' => array( 
              'title' => t('Commissions')
              )
            ))
          );
        }
        
      }
    }
  }
  // END chapter invitiations and unapproved members 

  // START approve link
  //drupal_set_message("<pre>".print_r($menu_item,TRUE)."</pre>");
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {
    if (isset($menu_item['page_arguments'][0]->uid)){
      $uid = $menu_item['page_arguments'][0]->uid;
      $targetuser = user_load($uid);
      if (!in_array("approved user", $targetuser->roles)){

        // Need approve users access
        if (user_access("approve users")){

          // Show approval tool if:
          // 1. if user is a moderator or administrator
          // 2. or if they are chapter leader and the member is signed up their chapter
          // 3. or if they are a community manager and the member is a chapter they community manage
          if ((in_array("moderator", $user->roles) or user_access('administer')) 
          or ((in_array("chapter leader", $user->roles))) and (tm_users_member_in_users_chapter($targetuser->uid, $user->uid, true))) {

            // Check if user can be approved
            // Note: users can request if score > 50
            // We allow approval if score >= 50 to give a bit of flexibility
            $user_score = tm_users_signup_score($uid);
            $score_threshold = 50; 
            
            if (($user_score >= $score_threshold) or (in_array("moderator", $user->roles) or user_access('administer'))) {

              // Show approve user link
              $community_values_url = $conf["tm_community_values_url"];
              $links['approve'][] = array(
                'wrapper_class' => array('approve'),
                'content' => l(t('Approve member'), "javascript:jq_confirm_approve_member(" . $uid . ", '" . $community_values_url . "')", array(
                  'fragment' => '',
                  'external'=>true,
                  'attributes' => array(
                    'title' => t('Approve member')
                  )
                ))
              );

            } else {

              // Incomplete profile
              $links['approve'][] = array(
                'wrapper_class' => array('approve'),
                'content' => l(t('Approve member'), "javascript:jq_alert('Incomplete Profile', 'Sorry, you can\'t approve this member as their profile is only " . $user_score . "% complete.')", array(
                  'fragment' => '',
                  'external'=>true,
                  'attributes' => array(
                    'title' => t('Approve member')
                  )
                ))
              );

            }

          }
        }
      }
    }
  }
  // END approve link


  // START unapprove link
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {
    if (isset($menu_item['page_arguments'][0]->uid)){
      $uid = $menu_item['page_arguments'][0]->uid;
      $targetuser = user_load($uid);
      if (in_array("approved user", $targetuser->roles)){

        if (user_access("unapprove users")){

          // Don't show unapproval of moderators and admins
          if ((!in_array("moderator", $targetuser->roles)) and (!in_array("chapter leader", $targetuser->roles)) and (!in_array("administrator", $targetuser->roles))) {

            $links['approve'][] = array(
              'wrapper_class' => array('unapprove'),
              'content' => l(t('Un-Approve'), 'javascript:jq_confirm_unapprove_user(' . $targetuser->uid . ')', array(
                'fragment' => '',
                'external'=>true,
                'attributes' => array(
                  'title' => t('Un-Approve user')
                )
              ))
            );
            
          }   
        }
      }
    }
  }
  // END unapprove link

  // START requested approval note
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {

    // Only show link for unapproved users
    if (!in_array("approved user", $targetuser->roles)){

      // Show requested approval or date of signup if:
      // 1. if user is a moderator or administrator
      // 2. or if they are chapter leader and the member is signed up their chapter
      if ((in_array("moderator", $user->roles) or user_access('administer'))
        or ((in_array("chapter leader", $user->roles))) and (tm_users_member_in_users_chapter($targetuser->uid, $user->uid, true))) {

        // show if user request approval
        $flag = flag_get_flag('approval_requested_by_user');

        // get list of people who flagged
        $self_flagged = flag_get_entity_flags("user", $uid, "approval_requested_by_user");

        // There should only be one flag (by the user)
        $menu_text = "";
        foreach ($self_flagged as $flagger) {
          $difference = time() - $flagger->timestamp;
          $flagged_time = format_interval($difference, 1) . " ago";
          $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Requested " . $flagged_time . "</span><br>";
        }

        if ($menu_text != "") {
          $links['approve'][] = array(
            'wrapper_class' => array('approve'),
            'content' => t($menu_text),
          );
        }
      }
    }
  }
  // END requested approval note


  // START moderator info
  // Signup date
  // Reason for joining
  // Who approved
  // Email
  // Geoip
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {

    // show who approved user
    if ((in_array("moderator", $user->roles) or user_access('administer')) 
    or ((in_array("chapter leader", $user->roles)))) {

      // 1. SIGNUP AND MODIFIED DATE
      $menu_text = "";
      $show_user = user_load($uid);
      $difference = time() - $show_user->created;
      $flagged_time = format_interval($difference, 1) . " ago";
      $menu_text = "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Signed up " . $flagged_time . "</span><br>";
      
      $links['moderate'][] = array(
        'wrapper_class' => array('approve'),
        'content' => t($menu_text),
      );

      // 2. WHO APPROVED
      $flag = flag_get_flag('approval_approved_by');

      // get list of people who flagged
      $who_flagged = flag_get_entity_flags("user", $uid, "approval_approved_by");

      // sort by flag time
      usort($who_flagged, function($a, $b){
        return ($a->timestamp > $b->timestamp) ? -1 : 1;
      });

      $menu_text = "";
      $approved_difference = null;
      foreach ($who_flagged as $flagger) {
        $approved_difference = time() - $flagger->timestamp;
        $flagged_time = format_interval($approved_difference, 1) . " ago";
        $flagged_user = user_load($flagger->uid);
        if ($flagged_user->uid > 0) {
          $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Approved by " . l($flagged_user->field_user_first_name[LANGUAGE_NONE][0]['value'], "/" . drupal_get_path_alias("user/" . $flagged_user->uid), array('attributes' => array('target' => '_blank', 'class' => array('report-flagged-link')))) . " " . $flagged_time . "</span><br>";
        } else {
          // Approved by a user who has removed their account
          $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Approved " . $flagged_time . "</span><br>";
        }
      }

      // if empty menu text, then user was approved before we started flagging
      if (($menu_text == "") and (in_array("approved user", $targetuser->roles))) {
        $menu_text = "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Approved by administrator</span>";
      }

      $links['moderate'][] = array(
        'wrapper_class' => array('approve'),
        'content' => t($menu_text),
      );

      // 3. SHOW MODIFIED TIME
      if (isset($show_user->field_last_modified_timestamp[LANGUAGE_NONE][0]['value'])) {
        $updated_difference = time() - $show_user->field_last_modified_timestamp[LANGUAGE_NONE][0]['value'];
        // show if updated different to approval time
        if ($updated_difference <> $approved_difference) {
          $flagged_time = format_interval($updated_difference, 1) . " ago";
          $menu_text = "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Profile updated " . $flagged_time . "</span><br>";
          $links['moderate'][] = array(
            'wrapper_class' => array('approve'),
            'content' => t($menu_text),
          );
        }
      }

      // 4. WHO HAS VIEWED PROFILE
      if (module_exists("tm_track_views")) {
        if (in_array("moderator", $user->roles) or in_array("administrator", $user->roles)) {
        
          // get number of viewers  
          $max_view_days = $conf["tm_track_views_store_days"];
          $num_views = tm_track_views_how_many_viewed($targetuser->uid, "user", $targetuser->uid, $max_view_days);
          
          if ($num_views > 0) {

            $num_views_plural = "members";
            if ($num_views == 1) {
              $num_views_plural = "member";
            }

            $menu_text = "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'><a style='display: inline; padding: 0rem;' href='/user/" . $targetuser->uid . "/viewers'>Viewed by " . $num_views .  " " . $num_views_plural . "</a></span>";

            $links['moderate'][] = array(
              'wrapper_class' => array('approve'),
              'content' => t($menu_text),
            );
          }
          
        }
      }

      // 5. REASON FOR JOINING
      if (isset($targetuser->field_reason_for_joining[LANGUAGE_NONE][0]['value'])) {
        $reason_for_joining = strip_tags($targetuser->field_reason_for_joining[LANGUAGE_NONE][0]['value']);
        if (trim($reason_for_joining) != "") {
          $menu_text = "<div style='font-size: smaller; font-style: italic; padding-left: 2em; background-color: #efefef;'>Reason for joining:<br><span style='color: #888; font-style: normal;'>" . $reason_for_joining . "</span></div>";

          $links['moderate'][] = array(
            'wrapper_class' => array('approve'),
            'content' => t($menu_text),
          );
        }
      }

      // 6. Show Facebook signin
      if (isset($targetuser->field_facebook_signin_link[LANGUAGE_NONE][0]['value'])) {
        $facebook_signin_link = strip_tags($targetuser->field_facebook_signin_link[LANGUAGE_NONE][0]['value']);
        if (trim($facebook_signin_link) != "") {
          $menu_text = "<div style='font-size: smaller; font-style: italic; padding-left: 2em; background-color: #efefef;'>Signed in with Facebook:<br><span style='color: #888; font-style: normal;'><a style='display: inline; padding: 0rem;' target='_blank' href='" . $facebook_signin_link . "'>view Facebook profile</a></span></div>";

          $links['moderate'][] = array(
            'wrapper_class' => array('approve'),
            'content' => t($menu_text),
          );
        }
      }

      // 7. Show any possible duplicate logins
      if (isset($conf["tm_users_check_duplicate_accounts"])) {
        if ($conf["tm_users_check_duplicate_accounts"] == true) {

          // Check duplicates
          $possible_duplicates = tm_users_get_duplicate_accounts($targetuser->uid);
          if (sizeof($possible_duplicates) > 0) {

            // Show duplicate accounts
            $duplicate_message = "Possible duplicate";
            if (sizeof($possible_duplicates) > 1) {
              $duplicate_message = "Possible duplicates";
            }
            $menu_text = "<div style='font-size: smaller; font-style: italic; padding-left: 2em; background-color: #efefef;'>" . $duplicate_message . ":<br>";
            foreach ($possible_duplicates as $duplicate_uid) {

              $duplicate_account = user_load($duplicate_uid);
              $duplicate_first_name = strip_tags($duplicate_account->field_user_first_name[LANGUAGE_NONE][0]['value']);
              $duplicate_last_name = strip_tags($duplicate_account->field_user_last_name[LANGUAGE_NONE][0]['value']);

              $duplicate_user_url = drupal_get_path_alias("user/" . $duplicate_uid);
              $menu_text .= "<span style='color: #888; font-style: normal;'><a style='display: inline; padding: 0rem;' target='_blank' href='/" . $duplicate_user_url . "'>" . $duplicate_first_name . " " . $duplicate_last_name . " (id: " . $duplicate_uid . ")</a><br></span>";
            }
            $menu_text .= "</div>";

            $links['moderate'][] = array(
              'wrapper_class' => array('approve'),
              'content' => t($menu_text),
            );

          }

        }
      }
      
      // 8. Show email address to chapter leader if unapproved
      // Always show to moderators
      $targetuser = user_load($uid);
      if ((!in_array("approved user", $targetuser->roles) and (tm_users_member_in_users_chapter($targetuser->uid, $user->uid, true))) or (in_array("moderator", $user->roles))) {

        $verified_text = "not-verified";
        if (!in_array('non-validated', $targetuser->roles)) {
          $verified_text = "verified";
        }

        $menu_text = "<div style='font-size: smaller; font-style: italic; padding-left: 2em; background-color: #efefef;'>Signup email:<br><span style='color: #888; font-style: normal;'><a style='display: inline; padding: 0rem;' href='mailto:" . $targetuser->mail . "'>" . $targetuser->mail . "</a> (" . $verified_text . ")</span></div>";

        $links['moderate'][] = array(
          'wrapper_class' => array('approve'),
          'content' => t($menu_text),
        );
      }

      // 9. Show last activity time if in your chapter and IP to moderator
      if (tm_users_member_in_users_chapter($targetuser->uid, $user->uid, true) or (in_array("moderator", $user->roles))) {

        // Get last active time    
        $last_visit_timestamp = $targetuser->access;
        if (($last_visit_timestamp == null) or ($last_visit_timestamp == 0)) {
          $last_visit_time = "never";
        } else {
          $last_visit_difference = time() - $last_visit_timestamp;
          if ($last_visit_difference < (60 * 60 * 24)) {
            // $last_visit_time = "today";
            $last_visit_time = format_interval($last_visit_difference, 1) . " ago";
          } else {
            $last_visit_time = format_interval($last_visit_difference, 1) . " ago";
          }
        }

        // Get geoip info
        $last_ip = tm_geoip_get_users_last_ip($targetuser->uid);
        $geoip_details = "";
        if ($last_ip == null) {
          $last_ip = "never signed in";
        } else {
          $geoip_info = tm_geoip_lookup($last_ip);
          if ($geoip_info != null) {
            $geoip_labels = array();
            if (isset($geoip_info["city"]["names"]["en"])) {
              $geoip_labels[] = htmlentities($geoip_info["city"]["names"]["en"]);
            }
            if (isset($geoip_info["country"]["names"]["en"])) {
              $geoip_labels[] = htmlentities($geoip_info["country"]["names"]["en"]);
            }
            $geoip_details .= implode(", ", $geoip_labels);
          }
        }

        // Show IP to moderator
        if (in_array("moderator", $user->roles)) {
          if ($geoip_details != "") {
            $geoip_details .= "<br>";
          }
          // link to /admin/geoip_text
          $geoip_details .= "IP: <a style='display: inline; padding: 0rem;' target='_blank' href='/admin/geoip_info?ip=" . $last_ip . "'>" . $last_ip . "</a>";
        }
       
        $menu_text = "<div style='font-size: smaller; font-style: italic; padding-left: 2em; background-color: #efefef;'>Last active " . $last_visit_time . "<br><span style='color: #888; font-style: normal;'>" . $geoip_details . "</span></div>";

        $links['moderate'][] = array(
          'wrapper_class' => array('approve'),
          'content' => t($menu_text),
        );
      }

      // 10. Show if user has set profile to private
      if (in_array("moderator", $user->roles) or in_array("administrator", $user->roles)) {
        if (isset($targetuser->field_user_has_private_profile[LANGUAGE_NONE][0]['value'])) {
          if ($targetuser->field_user_has_private_profile[LANGUAGE_NONE][0]['value']) {

            $menu_text = "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Profile set to private</span>";

            $links['moderate'][] = array(
              'wrapper_class' => array('approve'),
              'content' => t($menu_text),
            );
          }
        }
      }

    }
  }
  // END moderator info
    

  // START profile incomplete link
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {

    // Only show link for unapproved users
    if (!in_array("approved user", $targetuser->roles)){

      // Show flagging tool if:
      // 1. if user is a moderator or administrator
      // 2. or if they are chapter leader and the member is signed up their chapter
      if ((in_array("moderator", $user->roles) or user_access('administer'))
        or ((in_array("chapter leader", $user->roles))) and (tm_users_member_in_users_chapter($targetuser->uid, $user->uid, true))) {

        $links['approve'][] = array(
          'wrapper_class' => array('approve'),
          'content' => l(t('Flag: Incomplete profile'), 'javascript:jq_confirm_incomplete_profile(' . $uid . ')',
            array(
            'fragment' => '',
            'external'=> true,
            'attributes' => array(
              'title' => t('Profile incomplete')
            )
          ))
        );
        
        // show last time request info was flagged
        $flag = flag_get_flag('approval_need_more_info');

        // get list of people who flagged
        $who_flagged = flag_get_entity_flags("user", $uid, "approval_need_more_info");

        // sort by flag time
        usort($who_flagged, function($a, $b){
          return ($a->timestamp > $b->timestamp) ? -1 : 1;
        });

        $menu_text = "";
        foreach ($who_flagged as $flagger) {
          $difference = time() - $flagger->timestamp;
          $flagged_time = format_interval($difference, 1) . " ago";
          $flagged_user = user_load($flagger->uid);
          $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Flagged by " . l($flagged_user->field_user_first_name[LANGUAGE_NONE][0]['value'], "/" . drupal_get_path_alias("user/" . $flagged_user->uid), array('attributes' => array('target' => '_blank', 'class' => array('report-flagged-link')))) . " " . $flagged_time . "</span><br>";
        }
        
        $links['approve'][] = array(
          'wrapper_class' => array('approve'),
          'content' => t($menu_text),
        );
      }
    }
  }
  // END profile incomplete link

  // START is company or brand link
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {

    // Only show link for unapproved users
    if (!in_array("approved user", $targetuser->roles)){

      // Show flagging tool if:
      // 1. if user is a moderator or administrator
      // 2. or if they are chapter leader and the member is signed up their chapter
      if ((in_array("moderator", $user->roles) or user_access('administer')) 
        or ((in_array("chapter leader", $user->roles))) and (tm_users_member_in_users_chapter($targetuser->uid, $user->uid, true))) {

        $links['approve'][] = array(
          'wrapper_class' => array('approval_is_company_or_brand'),
          'content' => l(t('Flag: Is company or brand'), 'javascript:jq_confirm_company_profile(' . $uid . ')',
            array(
            'fragment' => '',
            'external'=> true,
            'attributes' => array(
              'title' => t('Is company or brand')
            )
          ))
        );
        
        // show last time request info was flagged
        $flag = flag_get_flag('approval_is_company_or_brand');

        // get list of people who flagged
        $who_flagged = flag_get_entity_flags("user", $uid, "approval_is_company_or_brand");

        // sort by flag time
        usort($who_flagged, function($a, $b){
          return ($a->timestamp > $b->timestamp) ? -1 : 1;
        });

        $menu_text = "";
        foreach ($who_flagged as $flagger) {
          $difference = time() - $flagger->timestamp;
          $flagged_time = format_interval($difference, 1) . " ago";
          $flagged_user = user_load($flagger->uid);
          $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Flagged by " . $flagged_user->field_user_first_name['und'][0]['value'] . " " . $flagged_time . "</span><br>";
        }
        
        $links['approve'][] = array(
          'wrapper_class' => array('approve'),
          'content' => t($menu_text),
        );

      }
    }
  }
  // END is company or brand link

  // START moderate community values link
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {

    // Don't show flag for chapter leaders or moderators
    if ((!in_array("moderator", $targetuser->roles)) and (!in_array("chapter leader", $targetuser->roles)) and (!in_array("administrator", $targetuser->roles))) {

      // Show flagging tool if:
      // 1. if user is a moderator or administrator
      // 2. or if they are chapter leader and the member is signed up their chapter
      if ((in_array("moderator", $user->roles) or user_access('administer'))
        or ((in_array("chapter leader", $user->roles))) and (tm_users_member_in_users_chapter($targetuser->uid, $user->uid, true))) {

        $community_values_url = $conf["tm_community_values_url"];

        $links['approve'][] = array(
          'wrapper_class' => array('approve'),
          'content' => l(t('Flag: Non-community'), 'javascript:jq_confirm_non_community_profile(' . $uid . ', \'' . $community_values_url . '\')',
            array(
            'fragment' => '',
            'external'=> true,
            'attributes' => array(
              'title' => t('Non-community profile')
            )
          ))
        );
        
        // show last time request info was flagged
        $flag = flag_get_flag('moderate_non_community_profile');

        // get list of people who flagged
        $who_flagged = flag_get_entity_flags("user", $uid, "moderate_non_community_profile");

        // sort by flag time
        usort($who_flagged, function($a, $b){
          return ($a->timestamp > $b->timestamp) ? -1 : 1;
        });

        $menu_text = "";
        foreach ($who_flagged as $flagger) {
          $difference = time() - $flagger->timestamp;
          $flagged_time = format_interval($difference, 1) . " ago";
          $flagged_user = user_load($flagger->uid);
          $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Flagged by " . $flagged_user->field_user_first_name['und'][0]['value'] . " " . $flagged_time . "</span><br>";
        }
        
        $links['approve'][] = array(
          'wrapper_class' => array('approve'),
          'content' => t($menu_text),
        );
      }
    }
  }
  // END moderate community values link
 
  // START Add member event link
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {

    if ($conf['tm_event_member_events_enabled'] == true) {
      if ($user->uid == $field['entity']->uid) {

        // member can create event
        if (_tm_events_check_create_member_event($user)) {

          // chapter leader
          if (in_array("chapter leader", $user->roles)) {
            // don't display a link for chapter leaders to create a member event
          } else {
            $links['edition'][] = array(
              'wrapper_class' => array('add'),
              'content' => l(t('Add event'), '/node/new/event',
                array('attributes' => array('title' => t('Add your own event')))
              )
            );
          }
         
        } else {
          // member not able to create event
          $member_event_message = _tm_events_check_create_member_event_message($user);
          if ($member_event_message != "") {
            $links['edition'][] = array(
              'wrapper_class' => array('add'),
              'content' => l(t('Add event'), 'javascript:jq_create_member_event_message();',
                array(
                  'fragment' => '',
                  'external' => true,
                  'attributes' => array('title' => t('Add your own event'))
                )
              )
            );
          }

        } // end else
      }
    }
  }
  // END Add member event link

  // START Add chapter event Link
  if (isset($field['entity']->type) && $field['entity']->type == 'chapter') {
    if (_tm_events_check_create_chapter_event($user, $field['entity']->nid)) {
      $links['edition'][] = array(
      'wrapper_class' => array('add'),
      'content' => l(t('Add chapter event'), '/node/new/event', array(
        'query' => array(
          'field_chapter' => $field['entity']->nid
        ),
        'attributes' => array(
          'title' => t('Add event for @chapter', array('@chapter' => $field['entity']->title))
        )
      )));
    }
  }
  // END Add chapter event Link

  // START Add company event Link
  if (isset($field['entity']->type) && $field['entity']->type == 'organization') {

    // Check if can create company event
    if (_tm_events_check_create_company_event($user, $field['entity']->nid)) {
      $links['edition'][] = array(
      'wrapper_class' => array('add'),
      'content' => l(t('Add event'), '/node/new/event', array(
        'query' => array(
          'field_event_company' => $field['entity']->nid
        ),
        'attributes' => array(
          'title' => t('Add event for @organization', array('@organization' => $field['entity']->title))
        )
      )));

    } else {

      // If events enabled, show user a message
      if ($conf['tm_event_company_events_enabled'] == true) {

        // Set create member event message as js var
        // We use this in jq_create_company_event_message()
        $company_event_message = _tm_events_check_create_company_event_message($user, $field['entity']->nid);
        drupal_add_js(array('tm_events' => array('create_company_event_message' => $company_event_message)), array('type' => 'setting'));

        if ($company_event_message != "") {
          $links['edition'][] = array(
            'wrapper_class' => array('add'),
            'content' => l(t('Add event'), 'javascript:jq_create_company_event_message();',
            array('fragment' => '','external'=>true)
          ));
        }
      }
    }
  }
  // END Add company event Link
  
  // START Set as sponsor link
  if (isset($field['entity']->nid) && $flag_link = flag_create_link('tm_sponsor', $field['entity']->nid)) {

      // 1. Show Flag / Unflag link
      // only show for admin and moderator
      // chapter leaders flag sponsors via the event page but not directly
      if ((in_array('administrator', array_values($user->roles))) or (in_array('moderator', array_values($user->roles)))) {

      $links['edition'][] = array(
        'wrapper_class' => array('sponsor'),
        'content' => $flag_link
      );

      // 2. WHO FLAGGED
      $flag = flag_get_flag('tm_sponsor');

      // get list of people who flagged
      $who_flagged = flag_get_entity_flags("node", $field['entity']->nid, "tm_sponsor");

      // sort by flag time
      usort($who_flagged, function($a, $b){
        return ($a->timestamp > $b->timestamp) ? -1 : 1;
      });

      $menu_text = "";
      foreach ($who_flagged as $flagger) {
        $difference = time() - $flagger->timestamp;
        $flagged_time = format_interval($difference, 1) . " ago";
        if ($flagger->uid == 0) { 
          $flagger_name = "Administrator"; // global flags used to record 0
        }
        else {
          $flagged_user = user_load($flagger->uid);
          $flagger_name = $flagged_user->field_user_first_name['und'][0]['value'];
        }
        $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Set by " . $flagger_name . " " . $flagged_time . "</span><br>";
      }

      $links['edition'][] = array(
        'wrapper_class' => array('approve'),
        'content' => t($menu_text),
      );

    }
  }
  // END Set as sponsor link

  // START View subscription details
  if (module_exists("tm_subscriptions") && (isset($field['entity']->nid) && $flag_link = flag_create_link('organization_subscription_enable', $field['entity']->nid))) {

      // 1. Show Flag / Unflag link
      // only show for admin and moderator
      // chapter leaders flag sponsors via the event page but not directly
    if ((in_array('administrator', array_values($user->roles))) or (in_array('moderator', array_values($user->roles)))) {

      $links['edition'][] = array(
        'wrapper_class' => array('subscription'),
        'content' => $flag_link
      );

      // 2. WHO PURCHASED
      $flag = flag_get_flag('organization_subscription_paid');

      // get list of people who flagged
      $who_purchased = flag_get_entity_flags("node", $field['entity']->nid, "organization_subscription_paid");

      // sort by flag time
      usort($who_purchased, function($a, $b){
        return ($a->timestamp > $b->timestamp) ? -1 : 1;
      });

      $menu_text = "";
      $purchased_user = null;
      $purchased_user_uid = null;
      foreach ($who_purchased as $flagger) {
        $difference = time() - $flagger->timestamp;
        $flagged_time = format_interval($difference, 1) . " ago";
        if ($flagger->uid == 0) { 
          $flagger_name = "Adminstrator"; // global flags used to record 0
        }
        else {
          $purchased_user = user_load($flagger->uid);
          $purchased_user_uid = $purchased_user->uid;
          $flagger_name = $purchased_user->field_user_first_name['und'][0]['value'];
        }
        $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Purchased by " . l($purchased_user->field_user_first_name[LANGUAGE_NONE][0]['value'], "/" . drupal_get_path_alias("user/" . $purchased_user->uid), array('attributes' => array('target' => '_blank', 'class' => array('report-flagged-link')))) . " " . $flagged_time . "</span><br>";
      }

      $links['edition'][] = array(
        'wrapper_class' => array('approve'),
        'content' => t($menu_text),
      );

      // 3. WHO FLAGGED
      $flag = flag_get_flag('organization_subscription_enable');

      // get list of people who flagged
      $who_flagged = flag_get_entity_flags("node", $field['entity']->nid, "organization_subscription_enable");

      // sort by flag time
      usort($who_flagged, function($a, $b){
        return ($a->timestamp > $b->timestamp) ? -1 : 1;
      });

      $menu_text = "";
      foreach ($who_flagged as $flagger) {
        $difference = time() - $flagger->timestamp;
        $flagged_time = format_interval($difference, 1) . " ago";
        if ($flagger->uid == 0) { 
          $flagger_name = "Administrator"; // global flags used to record 0
        }
        else {
          $flagged_user = user_load($flagger->uid);
          $flagger_name = $flagged_user->field_user_first_name['und'][0]['value'];
        }
        if ($flagged_user->uid != $purchased_user_uid) {
          $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Set by " . l($flagged_user->field_user_first_name[LANGUAGE_NONE][0]['value'], "/" . drupal_get_path_alias("user/" . $flagged_user->uid), array('attributes' => array('target' => '_blank', 'class' => array('report-flagged-link')))) . " " . $flagged_time . "</span><br>";
        }
      }

      $links['edition'][] = array(
        'wrapper_class' => array('approve'),
        'content' => t($menu_text),
      );

      // 4. SUBSCRIPTION TYPE
      $subscription_type = tm_subscriptions_get_subscription_type($field['entity']);
      if ($subscription_type != null) {
        $menu_text = "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Subscription: " . stripslashes($subscription_type) . "</span><br>";
        $links['edition'][] = array(
          'wrapper_class' => array('approve'),
          'content' => t($menu_text),
        );
      }
     

      // 4. SUBSCRIPTION END DATE
      $subscription_date = tm_subscriptions_get_subscription_date($field['entity']);
      if ($subscription_date != null) {

        $subscription_date_text = date('Y-m-d', strtotime($subscription_date));
        $subscription_date_text .= " (" . tm_subscriptions_get_subscription_expires_text($field['entity']) . ")";

        $menu_text = "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Expires: " . $subscription_date_text . "</span><br>";
        $links['edition'][] = array(
          'wrapper_class' => array('approve'),
          'content' => t($menu_text),
        );
      }


    }
  }
  // END View subscription details

  // START View organization subscription payments
  if (module_exists("tm_subscriptions")) {
    if (isset($field['entity']->type) && $field['entity']->type == 'organization') {

      // Check if is moderator or administrator
      $is_moderator_or_administrator = (in_array("administrator", $user->roles) or in_array("moderator", $user->roles));

      // Check if is company manager
      if ((tm_organizations_is_company_profile_manager($user->uid, $field['entity']->nid)) or $is_moderator_or_administrator) {

        // Check if company has made payment
        if (tm_subscriptions_is_organization_subscription_paid($field['entity']->nid)) {

            $links['edition'][] = array(
            'wrapper_class' => array('edit'),
            'content' => l(t('View payments'), '/payment/reports/subscription-payments/' . $field['entity']->nid, array(
              'attributes' => array(
                'title' => t('View payments for @organization', array('@organization' => $field['entity']->title))
              )
            )));

        }
      }
    }
  }
  // END View organization subscription payments

  // START View organization viewers
  if (module_exists("tm_track_views")) {
    if (isset($field['entity']->type) && $field['entity']->type == 'organization') {

      // Check if is moderator or administrator
      if (in_array("administrator", $user->roles) or in_array("moderator", $user->roles)) {

        // get number of viewers
        $max_view_days = $conf["tm_track_views_store_days"];
        $num_views = tm_track_views_how_many_viewed($field['entity']->nid, "node", $user->uid, $max_view_days);

        if ($num_views > 0) {

          $num_views_plural = "members";
          if ($num_views == 1) {
            $num_views_plural = "member";
          }
        
          $menu_text = "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'><a style='display: inline; padding: 0rem;' href='/company/" . $field['entity']->nid . "/viewers'>Viewed by " . $num_views .  " " . $num_views_plural . "</a></span>";

          $links['edition'][] = array(
            'wrapper_class' => array('edit'),
            'content' => t($menu_text),
          );
        }

      }

    }
  }
  // END View organization viewers

  // START View user subscription details
  if (module_exists("tm_subscriptions_user") && (!isset($field['entity']->nid) && $flag_link = flag_create_link('user_subscription_enable', $field['entity']->uid))) {

    // 1. Show Flag / Unflag link
    // only show for admin and moderator
    // chapter leaders flag sponsors via the event page but not directly
    if ((in_array('administrator', array_values($user->roles))) or (in_array('moderator', array_values($user->roles)))) {

      $links['edition'][] = array(
        'wrapper_class' => array('sponsor'),
        'content' => $flag_link
      );

      // 2. WHO PURCHASED
      $flag = flag_get_flag('user_subscription_paid');

      // get list of people who flagged
      $who_purchased = flag_get_entity_flags("user", $field['entity']->uid, "user_subscription_paid");

      // sort by flag time
      usort($who_purchased, function($a, $b){
        return ($a->timestamp > $b->timestamp) ? -1 : 1;
      });

      $menu_text = "";
      $purchased_user = null;
      $purchased_user_uid = null;
      foreach ($who_purchased as $flagger) {
        $difference = time() - $flagger->timestamp;
        $flagged_time = format_interval($difference, 1) . " ago";
        if ($flagger->uid == 0) { 
          $flagger_name = "Adminstrator"; // global flags used to record 0
        }
        else {
          $purchased_user = user_load($flagger->uid);
          $purchased_user_uid = $purchased_user->uid;
          $flagger_name = $purchased_user->field_user_first_name['und'][0]['value'];
        }
        $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Purchased by " . l($purchased_user->field_user_first_name[LANGUAGE_NONE][0]['value'], "/" . drupal_get_path_alias("user/" . $purchased_user->uid), array('attributes' => array('target' => '_blank', 'class' => array('report-flagged-link')))) . " " . $flagged_time . "</span><br>";
      }

      $links['edition'][] = array(
        'wrapper_class' => array('approve'),
        'content' => t($menu_text),
      );

      // 3. WHO FLAGGED
      $flag = flag_get_flag('user_subscription_enable');

      // get list of people who flagged
      $who_flagged = flag_get_entity_flags("user", $field['entity']->uid, "user_subscription_enable");

      // sort by flag time
      usort($who_flagged, function($a, $b){
        return ($a->timestamp > $b->timestamp) ? -1 : 1;
      });

      $menu_text = "";
      foreach ($who_flagged as $flagger) {
        $difference = time() - $flagger->timestamp;
        $flagged_time = format_interval($difference, 1) . " ago";
        if ($flagger->uid == 0) { 
          $flagger_name = "Administrator"; // global flags used to record 0
        }
        else {
          $flagged_user = user_load($flagger->uid);
          $flagger_name = $flagged_user->field_user_first_name['und'][0]['value'];
        }
        if ($flagged_user->uid != $purchased_user_uid) {
          $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Set by " . l($flagged_user->field_user_first_name[LANGUAGE_NONE][0]['value'], "/" . drupal_get_path_alias("user/" . $flagged_user->uid), array('attributes' => array('target' => '_blank', 'class' => array('report-flagged-link')))) . " " . $flagged_time . "</span><br>";
        }
      }

      $links['edition'][] = array(
        'wrapper_class' => array('approve'),
        'content' => t($menu_text),
      );

      // 4. SUBSCRIPTION TYPE
      $subscription_type = tm_subscriptions_user_get_subscription_type($field['entity']);
      if ($subscription_type != null) {
        $menu_text = "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Subscription: " . stripslashes($subscription_type) . "</span><br>";
        $links['edition'][] = array(
          'wrapper_class' => array('approve'),
          'content' => t($menu_text),
        );
      }
     

      // 4. SUBSCRIPTION END DATE
      $subscription_date = tm_subscriptions_user_get_subscription_date($field['entity']);
      if ($subscription_date != null) {

        $subscription_date_text = date('Y-m-d', strtotime($subscription_date));
        $subscription_date_text .= " (" . tm_subscriptions_user_get_subscription_expires_text($field['entity']) . ")";

        $menu_text = "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Expires: " . $subscription_date_text . "</span><br>";
        $links['edition'][] = array(
          'wrapper_class' => array('approve'),
          'content' => t($menu_text),
        );
      }


    }
  }
  // END View user subscription details

  // START View user subscription payments
  if (module_exists("tm_subscriptions_user")) {
    if (isset($field['entity']->uid) and (!isset($field['entity']->nid))) {

      // Check if is moderator or administrator
      $is_moderator_or_administrator = (in_array("administrator", $user->roles) or in_array("moderator", $user->roles));

      // Check if company has made payment
      if (tm_subscriptions_is_user_subscription_paid($field['entity']->uid)) {

        $links['edition'][] = array(
        'wrapper_class' => array('edit'),
        'content' => l(t('View payments'), '/payment/reports/subscription-payments-member/' . $field['entity']->uid, array(
          'attributes' => array(
            'title' => t('View payments for @account', array('@account' => $field['entity']->name))
          )
        )));

      }
    }
  }
  // END View user subscription payments

  // START preview notification link
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {

    // Only show to administrator or moderator
    if (in_array("administrator", $user->roles) or in_array("moderator", $user->roles)) {

      if (module_exists("tm_newsfeed") and ($conf["tm_newsfeed_moderator_preview"])) {
        $links['moderator_tools'][] = array(
          'wrapper_class' => array('moderator_tools'),
          'content' => l(t('Preview news update'), '/admin/newsfeed/notification_preview?uid=' . $targetuser->uid,
            array(
            'external' => true,
            'attributes' => array(
              'target' => '_blank',
            )
          ))
        );
      }
      
    }
  }
  // END preview notification link

  // START sharing links
  $links['share'][] = array(
    'wrapper_class' => array('facebook'),
    'content' => l(t('Share on Facebook'), 'https://www.facebook.com/sharer/sharer.php', array(
      'absolute' => TRUE,
      'query' => array('u' => $base),
      'attributes' => array(
        'target' => '_blank',
        'class' => array('facebook'),
        'title' => t('Share this on Facebook')
      )
    ))
  );
  
  $links['share'][] = array(
    'wrapper_class' => array('twitter'),
    'content' => l(t('Share on Twitter'), 'https://twitter.com/share', array(
      'absolute' => TRUE,
      'query' => array('url' => $base),
      'attributes' => array(
        'target' => '_blank',
        'class' => array('twitter'),
        'title' => t('Share this on Twitter')
      )
    ))
  );

  // https://developer.linkedin.com/docs/share-on-linkedin#!
  $links['share'][] = array(
    'wrapper_class' => array('twitter'),
    'content' => l(t('Share on LinkedIn'), 'https://www.linkedin.com/shareArticle', array(
      'absolute' => TRUE,
      'query' => array('url' => $base, 'mini' => true, 'source' => $conf["tm_site_name"]),
      'attributes' => array(
        'target' => '_blank',
        'class' => array('linkedin'),
        'title' => t('Share this on LinkedIn')
      )
    ))
  );

  // END sharing links

  // BEGIN google analytics report link
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'node/%')) {

    global $user;
    
    if (in_array("access-google-analytics-report", $user->roles)) {

      // get report path
      if ($menu_item['path'] == 'user/%') {
        $report_path = drupal_get_path_alias("user/" . $field['entity']->uid);
      } else {
        $report_path = drupal_get_path_alias("node/" . $field['entity']->nid);
      }      
      $google_analytics_report_link = tm_fields_google_analytics_report_link($report_path);

      // create link
      $links['moderator_tools'][] = array(
        'wrapper_class' => array('approve'),
        'content' => l(t('View analytics'), $google_analytics_report_link,
          array(
          'fragment' => '',
          'external'=> true,
          'attributes' => array(
            'title' => t('View analytics'),
            'target' => '_blank'
          )
        ))
      );

    }
  }
  // END google analytics report link


  // START add member to chapter
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {

    // Only show to chapter leader or moderator
    if (((in_array("chapter leader", $user->roles) or (in_array("moderator", $user->roles)))) 
      and ($targetuser->uid != $user->uid)) {

      // Only show if user is not in the members chapter, or is a moderator
      $leading_chapters = tm_users_get_chapters_leading($user);
      $members_chapters = tm_users_get_chapters($targetuser);
      $chapters_available_to_add = array_diff($leading_chapters, $members_chapters);
    
      if ((sizeof($chapters_available_to_add) > 0) or (in_array("moderator", $user->roles))) {

        // Get user name
        $first_name = strip_tags($targetuser->field_user_first_name[LANGUAGE_NONE][0]['value']);
        $last_name = strip_tags($targetuser->field_user_last_name[LANGUAGE_NONE][0]['value']);
        $full_name = $first_name . " " . $last_name;

        $links['approve'][] = array(
          'wrapper_class' => array('chapter_tools'),
          'content' => l(t('Add to chapter'), 'javascript:jq_add_member_to_chapter(' . $targetuser->uid . ', "' . htmlentities($full_name) . '")',
            array(
            'fragment' => '',
            'external'=> true,
            'attributes' => array(
              'title' => t('Add to chapter')
            )
          ))
        );
      }

    }
  }
  // END add member to chapter


  // START remove member from chapter
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {

    // Only show to chapter leader or moderator
    if ((in_array("chapter leader", $user->roles) or (in_array("moderator", $user->roles))) 
      and ($targetuser->uid != $user->uid)) {

      // Dont allow removal of chapter leader or moderator
      if (!in_array("chapter leader", $targetuser->roles) and (!in_array("moderator", $targetuser->roles))) {

        // Only show if user is in the members chapter, or is a moderator
        if (tm_users_member_in_users_chapter($targetuser->uid, $user->uid) or (in_array("moderator", $user->roles))) {

          // Display if member has joined at least one chapter
          $members_chapters = tm_users_get_chapters($targetuser);
          if (sizeof($members_chapters) > 0) {

            // Get user name
            $first_name = strip_tags($targetuser->field_user_first_name[LANGUAGE_NONE][0]['value']);
            $last_name = strip_tags($targetuser->field_user_last_name[LANGUAGE_NONE][0]['value']);
            $full_name = $first_name . " " . $last_name;

            $links['approve'][] = array(
              'wrapper_class' => array('chapter_tools'),
              'content' => l(t('Remove from chapter'), 'javascript:jq_remove_member_to_chapter(' . $targetuser->uid . ', "' . htmlentities($full_name) . '")',
                array(
                'fragment' => '',
                'external'=> true,
                'attributes' => array(
                  'title' => t('Remove from chapter')
                )
              ))
            );

          }
        }
      }
    }
  }
  // END remove member from chapter

  // START register member to event
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {

    // Only show to chapter leader or moderator
    if (((in_array("chapter leader", $user->roles) or (in_array("moderator", $user->roles)))) 
      and ($targetuser->uid != $user->uid)) {

      // get list of chapters user is leading or is community manager of
      $leading_chapters = tm_users_get_chapters_leading($user, true);

      // get list of chapter
      $members_chapters = tm_users_get_chapters($targetuser);

      // get list of leading chapters that member is in
      if (sizeof($members_chapters) > 0) {
        $leading_members_chapters = array();
        foreach($members_chapters as $chapter_id) {
          if (in_array($chapter_id, $leading_chapters)) {
            $leading_members_chapters[] = $chapter_id;
          }
        }
      } else {
        // member is not in any chapter
        $leading_members_chapters = $leading_chapters;
      }
      
      // get list of upcoming events in chapters
      $upcoming_events = array();
      if (sizeof($leading_members_chapters) > 0) {
        $upcoming_events = tm_events_get_future_events_for_chapters($leading_members_chapters);
      }
    
      // if chapter has upcoming events, or user is moderator
      if ((sizeof($upcoming_events) > 0) or (in_array("moderator", $user->roles))) {

        // Get user name
        $first_name = strip_tags($targetuser->field_user_first_name[LANGUAGE_NONE][0]['value']);
        $last_name = strip_tags($targetuser->field_user_last_name[LANGUAGE_NONE][0]['value']);
        $full_name = $first_name . " " . $last_name;

        $links['approve'][] = array(
          'wrapper_class' => array('chapter_tools'),
          'content' => l(t('Register to event'), 'javascript:jq_register_member_to_event(' . $targetuser->uid . ', "' . htmlentities($full_name) . '")',
            array(
            'fragment' => '',
            'external'=> true,
            'attributes' => array(
              'title' => t('Register to event')
            )
          ))
        );
      }

    }
  }
  // END register member to event

  // START report member profile link
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {

    // Don't show flag for administrators or own acccount
    if (!in_array("administrator", $targetuser->roles) and ($uid != $user->uid)) {

      // Step 1. Show report flag to approved members
      if (tm_users_moderate_report_check($user)) {

        $community_values_url = $conf["tm_community_values_url"];

        $links['approve'][] = array(
          'wrapper_class' => array('approve'),
          'content' => l(t('Report'), 'javascript:void(0);',
            array(
            'fragment' => '',
            'external'=> true,
            'attributes' => array(
              'title' => t('Report'),
              'onClick' => 'javascript:jq_confirm_report_member(' . $uid . ', \'' . $community_values_url . '\')'
            )
          ))
        );
      }

      // Step 2. Show who flagged this member to moderators and chapter leaders
      $who_flagged = array();
      if ((in_array("moderator", $user->roles) or user_access('administer'))
      or (in_array("chapter leader", $user->roles))) {

        // show last time request info was flagged
        $flag = flag_get_flag('moderate_report_member');

        // get list of people who flagged
        $who_flagged = flag_get_entity_flags("user", $uid, "moderate_report_member");

        // sort by flag time
        usort($who_flagged, function($a, $b){
          return ($a->timestamp > $b->timestamp) ? -1 : 1;
        });

        $menu_text = "";
        foreach ($who_flagged as $flagger) {
          $difference = time() - $flagger->timestamp;
          $flagged_time = format_interval($difference, 1) . " ago";
          $flagged_user = user_load($flagger->uid);
          $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Reported by " . l($flagged_user->field_user_first_name[LANGUAGE_NONE][0]['value'], "/" . drupal_get_path_alias("user/" . $flagged_user->uid), array('attributes' => array('target' => '_blank', 'class' => array('report-flagged-link')))) . " " . $flagged_time . "</span><br>";
        }
        
        $links['approve'][] = array(
          'wrapper_class' => array('approve'),
          'content' => t($menu_text),
        );
      }

      // Step 3. Show unflag link to moderators
      if (sizeof($who_flagged) > 0) {

        if (in_array("moderator", $user->roles) or user_access('administer')) {

          $menu_text = "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>" . l("Issue resolved", 'javascript:void(0);',
              array('fragment' => '','external'=>true, 'attributes' => array('onClick' => 'javascript:jq_confirm_report_member_resolved(' . $uid . ');', 'class' => array('report-flagged-link')))) . "</span><br>";

           $links['approve'][] = array(
            'wrapper_class' => array('approve'),
            'content' => t($menu_text),
          );
        }
      }

    }
  }
  // END report member profile link

  // START report organization profile link
  if (isset($field['entity']->type) && $field['entity']->type == 'organization') {

     // Keep track of org nid
     $organization_nid = $field['entity']->nid;

    // Don't show flag for profiles that you manage
    if (!tm_organizations_is_company_profile_manager($user->uid, $organization_nid)) {

      // Step 1. Show report flag to approved members
      if (tm_organizations_moderate_report_check($user)) {

        $community_values_url = $conf["tm_community_values_url"];

        $links['approve'][] = array(
          'wrapper_class' => array('approve'),
          'content' => l(t('Report'), 'javascript:void(0);',
            array(
            'fragment' => '',
            'external'=> true,
            'attributes' => array(
              'title' => t('Report'),
              'onClick' => 'javascript:jq_confirm_report_organization(' . $organization_nid . ', \'' . $community_values_url . '\')'
            )
          ))
        );
      }

      // Step 2. Show who flagged this profile to moderators and chapter leaders
      $who_flagged = array();
      if ((in_array("moderator", $user->roles) or user_access('administer'))
      or (in_array("chapter leader", $user->roles))) {

        // show last time request info was flagged
        $flag = flag_get_flag('moderate_report_organization');

        // get list of people who flagged
        $who_flagged = flag_get_entity_flags("node", $organization_nid, "moderate_report_organization");

        // sort by flag time
        usort($who_flagged, function($a, $b){
          return ($a->timestamp > $b->timestamp) ? -1 : 1;
        });

        $menu_text = "";
        foreach ($who_flagged as $flagger) {
          $difference = time() - $flagger->timestamp;
          $flagged_time = format_interval($difference, 1) . " ago";
          $flagged_user = user_load($flagger->uid);
          $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Reported by " . l($flagged_user->field_user_first_name[LANGUAGE_NONE][0]['value'], "/" . drupal_get_path_alias("user/" . $flagged_user->uid), array('attributes' => array('target' => '_blank', 'class' => array('report-flagged-link')))) . " " . $flagged_time . "</span><br>";
        }
        
        $links['approve'][] = array(
          'wrapper_class' => array('approve'),
          'content' => t($menu_text),
        );
      }

      // Step 3. Show unflag link to moderators
      if (sizeof($who_flagged) > 0) {

        if (in_array("moderator", $user->roles) or user_access('administer')) {

          $menu_text = "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>" . l("Issue resolved", '',
              array('fragment' => 'javascript:void(0);','external'=>true, 'attributes' => array('onClick' => 'javascript:jq_confirm_report_organization_resolved(' . $organization_nid . ');', 'class' => array('report-flagged-link')))) . "</span><br>";

           $links['approve'][] = array(
            'wrapper_class' => array('approve'),
            'content' => t($menu_text),
          );
        }
      }

    }
  }
  // END report organization profile link

  // START cancel member profile link
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {

    // Only show to administrator or moderator
    if (((in_array("administrator", $user->roles) or (in_array("moderator", $user->roles)))) 
      and ($targetuser->uid != $user->uid)) {

      $links['approve'][] = array(
        'wrapper_class' => array('approve'),
        'content' => l(t('Cancel account'), '/user/' . $targetuser->uid . '/cancel',
          array(
          'attributes' => array(
            'title' => t('Cancel account'),
          )
        ))
      );
    }
  }
  // END cancel account profile link
  
  return theme('more_actions', array('links' => $links));
}
/**
 * Custom function to build the more_actions menu
 */
function _tm_edit_own_profile_process($field, $title = NULL) {
  $menu_item = menu_get_item();
  // Is it a user?
  if (!isset($menu_item['page_arguments'][0]->nid) && isset($menu_item['page_arguments'][0]->uid)) {
    global $user;
    // Extra classes for the link.
    $classes = $field['formatter_settings']['Extra classes'];
    $uid = $menu_item['page_arguments'][0]->uid;
    
    if ($user->uid == $uid) {
      $classes = $field['formatter_settings']['Extra classes'];
      return l(t('Edit'), 'user/' . $uid . '/edit', array(
        'attributes' => array(
          'class' => $classes,
          'title' => t('Edit your profile')
        )
      ));
    }
  }
}

/**
 * Custom function to build the flag placeholder for anonymous users.
 *
 * When not logged in, the users should still see the follow / join buttons.
 * This can't be achieved with flags since flags, normally, don't show up for
 * anonymous users.
 * To solve this problem a faux field is created. This filed will be used
 * throughout the website with a flag like appearence. Upon click will redirect
 * the users to the login page.
 * This is a very specific field and will differ according with the content
 * type being viewed.
 */
function _tm_anon_flag_placeholder($field, $title = NULL) {

  global $user;
  if (!$user->uid) {
    $entity = $field['entity'];
    $css_classes = 'follow bttn bttn-secondary bttn-m';
    
    if (isset($entity->pass)) {
      // Password set, it's a user;
      return l(t('Follow'), 'javascript:jq_login_signup_box();', array(
        'external' => true,
        'attributes' => array(
          'title' => t('Follow :user', array(':user' => $entity->realname)),
          'class' => array($css_classes)
        )
      ));
    }
    
    // Behaviour based on content type.
    switch ($entity->type) {
      case 'chapter':
        return l(t('Join'), 'javascript:jq_login_signup_box();', array(
          'external' => true,
          'attributes' => array(
            'title' => t('Join :chapter', array(':chapter' => $entity->title)),
            'class' => array($css_classes)
          )
        ));
        break;
      case 'organization':
        return l(t('Follow'), 'javascript:jq_login_signup_box();', array(
          'external' => true,
          'attributes' => array(
            'title' => t('Follow :organization', array(':organization' => $entity->title)),
            'class' => array($css_classes)
          )
        ));
        break;
      case 'event':
        $result = _tm_event_display_flag($entity->nid);
        
        // Only show the button for managed events.
        // The other events will have an external RSVP link.
        if ($result == 'show_external_rsvp') {
          return;
        }
        
        // Show register
        if (($result == 'show_register') or ($result == 'show_not_approved')) {

          $button_text = "Register";
          if (module_exists("tm_payments")) {
            if (_tm_payments_is_payment_enabled($entity)) {
              $button_text = "Buy Ticket";
            }

            global $conf;
            $tm_payments_stripe_logo = $conf["tm_payments_stripe_logo"];
            $stripe_js = <<<EOT

            jQuery(document).ready(function($) {

              // Add stripe logo to information panel
              $('.detail-item.price').after("<div class='detail-item tm-payment-gateway-logo'>{$tm_payments_stripe_logo}</div>");

            });
EOT;

            drupal_add_js($stripe_js, 'inline'); // add inline js

          }
          $css_classes .= ' disabled';
          return l(t($button_text), 'javascript:jq_login_signup_box();', array(
            'external' => true,
            'attributes' => array(
            'title' => t('Register for :event', array(':event' => $entity->title)),
            'class' => array($css_classes)
          )
          ));
        }

        // Show closed
        if (($result == 'show_closed')) {
          $css_classes .= ' disabled';
          return l(t('Past Event'), 'javascript:jq_login_signup_box();', array(
          'external' => true,
          'attributes' => array(
            'title' => t('Register for :event', array(':event' => $entity->title)),
            'class' => array($css_classes)
          )
          ));
        }

        // Show waitlist
        if ($result == 'show_waitlist') {
          $css_classes .= ' disabled';
          return l(t('Join Waitlist'), 'javascript:jq_login_signup_box();', array(
            'external' => true,
            'attributes' => array(
            'title' => t('Join waitlist for :event', array(':event' => $entity->title)),
            'class' => array($css_classes)
          )
          ));
        }
        
        
        break;
    }
  }
}

/**
 * Implement hook_theme()
 */
function tm_fields_theme() {
  return array(
    'tm_chapter_sticker' => array(
      'variables' => array(
        'chapter_id' => NULL,
        'shortcode' => NULL,
        'color' => NULL
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_chapter_sticker'
    ),
    'tm_organization_sticker' => array(
      'variables' => array(
        'organization_id' => NULL,
        'label' => NULL,
        'color' => NULL
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_organization_sticker'
    ),
    'more_actions' => array(
      'variables' => array(
        'links' => array()
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_more_actions'
    ),
    'communication_actions' => array(
      'variables' => array(
        'links' => array()
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_communication_actions'
    ),
    'tm_fields_link' => array(
      'variables' => array(
        'title' => NULL,
        'url' => NULL,
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_fields_link',
    ),
    'tm_fields_facebook' => array(
      'variables' => array(
        'title' => NULL,
        'url' => NULL,
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_fields_facebook',
    ),
    'tm_fields_linkedin' => array(
      'variables' => array(
        'title' => NULL,
        'url' => NULL,
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_fields_linkedin',
    ),
    'tm_fields_twitter' => array(
      'variables' => array(
        'title' => NULL,
        'url' => NULL,
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_fields_twitter',
    ),
    'tm_fields_instagram' => array(
      'variables' => array(
        'title' => NULL,
        'url' => NULL,
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_fields_instagram',
    ),
    'tm_fields_youtube' => array(
      'variables' => array(
        'title' => NULL,
        'url' => NULL,
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_fields_youtube',
    ),
    'tm_fields_vimeo' => array(
      'variables' => array(
        'title' => NULL,
        'url' => NULL,
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_fields_vimeo',
    ),
    'tm_fields_snapchat' => array(
      'variables' => array(
        'title' => NULL,
        'url' => NULL,
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_fields_snapchat',
    ),
    'tm_fields_strava' => array(
      'variables' => array(
        'title' => NULL,
        'url' => NULL,
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_fields_strava',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function tm_fields_ctools_plugin_directory($module, $plugin) {
  if ($module == 'field_validation' && $plugin == 'validator') {
    return 'plugins/' . $plugin;
  }
  if ($module == 'entityreference') {
    return 'plugins/entityreference_' . $plugin;
  }
}

/**
* Implements hook_field_formatter_info().
* see: See more at: http://www.whenwhowhere.com/tech-blog/create-custom-field-formatter-drupal-7#sthash.pf9Fsjzp.dpuf
*/
function tm_fields_field_formatter_info() {
  $info = array(
    'tm_fields_link' => array(
      'label' => t('TM Link'), 
      'field types' => array('link_field'),
      'description' => t('Diplays URL without http:// prefix'),
    ),
    'tm_fields_twitter' => array(
      'label' => t('TM Twitter'), 
      'field types' => array('link_field'),
      'description' => t('Diplays a Twitter URL from an @ or # name'),
    ),
    'tm_fields_facebook' => array(
      'label' => t('TM Facebook'), 
      'field types' => array('link_field'),
      'description' => t('Diplays a Facebook URL'),
    ),
    'tm_fields_linkedin' => array(
      'label' => t('TM LinkedIn'), 
      'field types' => array('link_field'),
      'description' => t('Diplays a LinkedIn URL'),
    ),
    'tm_fields_instagram' => array(
      'label' => t('TM Instagram'), 
      'field types' => array('link_field'),
      'description' => t('Diplays an Instagram URL from an @ or # name'),
    ),
    'tm_fields_youtube' => array(
      'label' => t('TM YouTube'), 
      'field types' => array('link_field'),
      'description' => t('Diplays a YouTube URL from a URL or channel name'),
    ),
    'tm_fields_vimeo' => array(
      'label' => t('TM Vimeo'), 
      'field types' => array('link_field'),
      'description' => t('Diplays a Vimeo URL from a URL or user name'),
    ), 
    'tm_fields_snapchat' => array(
      'label' => t('TM Snapchat'), 
      'field types' => array('link_field'),
      'description' => t('Diplays a Snapchat URL from a user name'),
    ),
    'tm_fields_strava' => array(
      'label' => t('TM Strava'), 
      'field types' => array('link_field'),
      'description' => t('Diplays a Strava URL from a user name'),
    ), 
  );
  return $info;
}

/* 
 * Helper method return full URL
 * Note: you should sanitize urls returned from this method before displaying them
 */
function _tm_fields_full_url($item, $allow_queries = true) {

  // Note: as of link-7.x-1.4:
  // - the full url is in the item
  // - non-http links have a leading / added
  // - social links are htmlentities ie: @ = %40

  $full_url = $item['url'];
  
  // replace %40 with @ symbol (for social links)
  $full_url = str_replace("%40", "@", $full_url);

  // remove any leading / or ?
  $full_url = ltrim($full_url, "/");

  // Remove ? query string
  if (!$allow_queries) {
    $full_url = ltrim($full_url, "?");
    $parts = explode("?", $full_url);
    $full_url = $parts[0];
  }

  return $full_url;

  // For link-7.x-1.3
  // $item['url'] is cut off at argument list
  // so we need to construct the full url from the query array
  // ie: ?options=abc
  /*$full_url = $item['url'];
  print_r($item);
  $arg_seperator = "?";
  if (sizeof($item['query']) > 0) {
    foreach($item['query'] as $key => $val) {
      if ($val != null) {
        $full_url .= $arg_seperator . t($key) . "=" . t($val);
      } else {
        $full_url .= $arg_seperator . t($key);
      }
      $arg_seperator = "&"; 
    }
  }
  return $full_url;*/
}

/**
* Implements hook_field_formatter_view()
* see: See more at: http://www.whenwhowhere.com/tech-blog/create-custom-field-formatter-drupal-7#sthash.pf9Fsjzp.dpuf
* Note: It's the renderer's responsibility to run check_url() and check_plain() when displaying
*/
function tm_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'tm_fields_link':
      foreach ($items as $delta => $item) {

        // $item['url'] is cut off at argument list
        // so we need to construct the full url from the query array
        // ie: ?options=abc
        $full_url = _tm_fields_full_url($item);
        
        // valid URL
        // use diegoperini regex from https://gist.github.com/dperini/729294
        $url_regex = '_^(?:(?:https?|ftp)://)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\x{00a1}-\x{ffff}0-9]-*)*[a-z\x{00a1}-\x{ffff}0-9]+)(?:\.(?:[a-z\x{00a1}-\x{ffff}0-9]-*)*[a-z\x{00a1}-\x{ffff}0-9]+)*(?:\.(?:[a-z\x{00a1}-\x{ffff}]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$_iuS';

        // Only render if URL is valid
        if(preg_match($url_regex, $full_url)) {

          // sanitize for output
          $element[$delta] = array(
            '#theme' => 'tm_fields_link', 
            '#title' => $item['title'], 
            '#url' => $full_url,
          );
        }
      }

    break;
    case 'tm_fields_twitter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'tm_fields_twitter', 
          '#title' => $item['title'], 
          '#url' => _tm_fields_full_url($item, false), // remove ? arguments
        );
     }

    break;
    case 'tm_fields_facebook':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'tm_fields_facebook', 
          '#title' => $item['title'], 
          '#url' => _tm_fields_full_url($item, false), // remove ? arguments
        );
     }
    break;
    case 'tm_fields_linkedin':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'tm_fields_linkedin', 
          '#title' => $item['title'], 
          '#url' => _tm_fields_full_url($item), // may contain ? arguments
        );
     }
    break;
    case 'tm_fields_instagram':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'tm_fields_instagram', 
          '#title' => $item['title'], 
          '#url' => _tm_fields_full_url($item, false), // remove ? arguments
        );
     }
    break;
    case 'tm_fields_youtube':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'tm_fields_youtube', 
          '#title' => $item['title'], 
          '#url' => _tm_fields_full_url($item), // may contain ? arguments
        );
     }
    break;
    case 'tm_fields_vimeo':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'tm_fields_vimeo', 
          '#title' => $item['title'], 
          '#url' => _tm_fields_full_url($item, false), // remove ? arguments
        );
     }
    break;
    case 'tm_fields_snapchat':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'tm_fields_snapchat', 
          '#title' => $item['title'], 
          '#url' => _tm_fields_full_url($item, false), // remove ? arguments
        );
     }
    break;
    case 'tm_fields_strava':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'tm_fields_strava', 
          '#title' => $item['title'], 
          '#url' => _tm_fields_full_url($item, false), // remove ? arguments
        );
     }
    break;
  }
  return $element;
}

/**
 * Display connection actions for following
 */
function tm_fields_connection_actions($field) {
  
  if (!user_is_logged_in()) {
    return;
  }

  if (isset($field['entity']->name)) {

    global $user;
    global $conf;

    $my_uid = $user->uid;
    $their_uid = $field['entity']->uid;
    $their_name = $field['entity']->realname;
    $first_name = $field['entity']->field_user_first_name[LANGUAGE_NONE][0]['value'];

    // check if looking at self
    if ($my_uid == $their_uid) {
      return;
    }

    $flag = flag_get_flag('follow_members');
    $you_are_following_them = ($flag->is_flagged($their_uid, $my_uid));
    $they_are_following_you = ($flag->is_flagged($my_uid, $their_uid));

    if ($you_are_following_them and $they_are_following_you) {
      $html = "You are connected";

      // Generate message link
      $messaging_html = tm_messaging_make_send_message_link($user, $field['entity']);

      if ($messaging_html != null) {
        $html .= '<span class="hierarchical-select-item-separator">›</span>';
        $html .= $messaging_html;
      }

      return $html;
    }

    if ($they_are_following_you) {
      $html = $their_name . " is following you";
      if (tm_messaging_check_send_message($my_uid, $their_uid, true)) {
        drupal_set_message("You can message " . $their_name . " if you follow them back.", 'page_notice');
        drupal_add_js(drupal_get_path('module', 'tm_messaging') . '/js/tm_messaging_turn_off_flag_ajax.js');

      }
      return $html;
    }

    if ($you_are_following_them) {
      return "You are following " . $their_name;
    }

    if (!$you_are_following_them and !$they_are_following_you) {
      return;
    }
  }
}

/**
 * Helper method to generate google analytics report link
 */
function tm_fields_google_analytics_report_link($path) {

  global $conf;

  // Construct a link to google analytics report drilldown

  // Example:
  // Original url:
  // /events/2016/08/example-event-name/
  // 
  // Is converted to:
  // https://analytics.google.com/analytics/web/?authuser=1#report/content-drilldown/GOOGLE_AUTH_KEY/%3F_u.dateOption%3Dlast30days%26explorer-table.plotKeys%3D%5B%5D%26_r.drilldown%3Danalytics.pagePathLevel1%3A%2Fevents%2F%2Canalytics.pagePathLevel2%3A%2F2016%2F%2Canalytics.pagePathLevel3%3A%2F08%2F%2Canalytics.pagePath%3A%2Fevents%2F2016%2F08%2Fexample-event-name/

  // Part 1. Report base path
  // https://analytics.google.com/analytics/web/?authuser=1#report/content-drilldown/GOOGLE_ANALYTICS_HASH/%3F_u.dateOption%3Dlast30days%26explorer-table.plotKeys%3D%5B%5D%26_r.drilldown%3D
  $report_base_path = $conf["tm_google_analytics_report_path"];

  // Part 2. Add paths
  $parts = explode("/", $path);
  $path_levels = array();
  for ($i = 0; $i < sizeof($parts); $i++) {

      // construct path level
      // ie: Level 1 = /events/
      // ie: Level 2 = /2016/
      // ie: Level 3 = /08/ etc
      $path_level = $parts[$i]; //

      // construct path_prefix
      // ie: analytics.pagePathLevel for all levels except last
      // ie: analytics.pagePath for last level
      if ($i == (sizeof($parts)-1)) {
        $path_prefix = "analytics.pagePath";
        $path_levels[] = $path_prefix . "%3A%2F" . implode("%2F", $parts);
      } else {
        $path_prefix = "analytics.pagePathLevel" . ($i+1);
        $path_levels[] = $path_prefix . "%3A%2F" . $path_level;
      }

      
  }

  $path_levels_string = implode("%2F%2C", $path_levels);

  // Part 3. Join report base path and path levels string
  $google_analytics_report_link = $report_base_path . $path_levels_string;

  return $google_analytics_report_link;
}

/**
 * Check that tm_track_views is enabled first
 */
function _tm_ds_track_viewers_wrapper($field, $title = NULL) {

  // call ds function in tm_track_views.display
  if (module_exists("tm_track_views")) {
    return _tm_ds_track_viewers($field, $title);
  }

  // tm_track_views not enabled
  return "";
}

