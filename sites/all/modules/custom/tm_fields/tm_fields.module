<?php
/**
 * @file
 * Drupal needs this blank file.
 */

/**
 * Implement hook_ds_field_info
 */
function tm_fields_ds_fields_info($entity_type) {
  $fields = array();

  $fields['tm_ds_content_type'] = array(
    'title' => t('Content type'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|search_result', 'user|*'),
    'function' => '_tm_content_type_process'
  );

  $fields['tm_ds_chapter_sticker'] = array(
    'title' => t('Chapter sticker'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('event|*', 'user|*'),
    'function' => '_tm_chapter_sticker_process'
  );

  $fields['tm_ds_approved'] = array(
    'title' => t('Approval status'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('user|*'),
    'function' => '_tm_approved_process'
  );

  $fields['tm_ds_more_actions'] = array(
    'title' => t('More actions'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'function' => '_tm_more_actions_process'
  );
  
  $fields['tm_ds_anon_flag_placeholder'] = array(
    'title' => t('Anonymous flag placeholder'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'function' => '_tm_anon_flag_placeholder'
  );

  $fields['tm_ds_edit_own_profile'] = array(
    'title' => t('Edit own profile button'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('user|*'),
    'function' => '_tm_edit_own_profile_process',
    'properties' => array(
      'settings' => array(
        'Extra classes' => array(
          'type' => 'textfield',
          'description' => t('Classes for the link')
        )
      ),
      'default' => array(
        'Extra classes' => ''
      )
    ),
  );
  
  return array($entity_type => $fields);
}

/**
 * Implements hook_ds_field_settings_form().
 * http://www.elevatedthird.com/blog/advanced-custom-fields-display-suite
 */
function tm_fields_ds_field_settings_form($field) {
  return ds_ds_field_settings_form($field);
}

/**
 * Implements hook_ds_field_format_summary().
 * http://www.elevatedthird.com/blog/advanced-custom-fields-display-suite
 */
function tm_fields_ds_field_format_summary($field) {
  return ds_ds_field_format_summary($field);
}

/**
 * Custom function to return the human readable name of the content type
 */
function _tm_content_type_process($field, $title = NULL) {
  if ($field['entity_type'] == 'node') {
    return node_type_get_name($field['bundle']);
  }
  elseif ($field['entity_type'] == 'user') {
    return t('Member');
  }
}

/**
 * Custom function to build the chapter sticker
 */
function _tm_chapter_sticker_process($field, $title = NULL) {

  $id = null;

  // field_chapter
  if (isset($field['entity']->field_chapter['und'][0]['target_id'])) {
    $id = $field['entity']->field_chapter['und'][0]['target_id'];
  }

  // field_home_chapter (user)
  if (isset($field['entity']->field_home_chapter['und'][0]['target_id'])) {
    $id = $field['entity']->field_home_chapter['und'][0]['target_id'];
  }

  if ($id != null) {
    $related_chapter = node_load($id);
    if ($related_chapter){
      return theme('tm_chapter_sticker', array(
        'chapter_id' => $related_chapter->nid,
        'shortcode' => $related_chapter->field_chapter_shortcode['und'][0]['value'],
        'color' => $related_chapter->field_chapter_color['und'][0]['rgb']
      ));
    }
  }
}
/**
 * Custom function to build the approved status
 */
function _tm_approved_process($field, $title = NULL) {
  $approval = "notapproved";
  $approval_text = "Pending Approval";
  $approval_img = "/sites/all/themes/tm/images/notapproved_icon_32x32.png";
  if (in_array("approved user", $field['entity']->roles)){
    $approval = "approved";
    $approval_text = "Approved Member";
    $approval_img = "/sites/all/themes/tm/images/approved_icon_32x32.png";
  }
  // so small it's not really worth a tpl
  return '<p class="approval"><img style="width:16px; height:16px; padding:0px; margin-right: 4px;" src="'.$approval_img.'"><span class="text_'.$approval.'">'.$approval_text.'</span></p>';
}
/**
 * Custom function to build the more_actions menu
 */
function _tm_more_actions_process($field, $title = NULL) {
  global $base_root, $user;
  $base = $base_root . request_uri();
  $links = array(
    'edition' => array(),
    'share' => array()
  );

  // START Edit link.
  $menu_item = menu_get_item();
  // Is it a node?
  if (isset($menu_item['page_arguments'][0]->nid)) {
    $nid = $menu_item['page_arguments'][0]->nid;
    $edit_menu = menu_get_item('node/' . $nid . '/edit');
    if ($edit_menu['access']) {
      $links['edition'][] = array(
        'wrapper_class' => array('edit'),
        'content' => l(t('Edit'), 'node/' . $nid . '/edit', array(
          'attributes' => array(
            'title' => t('Edit')
          )
        ))
      );
    }
  }
  // Is it a user?
  else if (isset($menu_item['page_arguments'][0]->uid)) {
    $uid = $menu_item['page_arguments'][0]->uid;
    $edit_menu = menu_get_item('user/' . $uid . '/edit');
    if ($edit_menu['access']) {
      $links['edition'][] = array(
        'wrapper_class' => array('edit'),
        'content' => l(t('Edit'), 'user/' . $uid . '/edit', array(
          'attributes' => array(
            'title' => t('Edit user profile')
          )
        ))
      );
    }
  }
  // END Edit link.

  // START manage RSVPs.
  if (isset($menu_item['page_arguments'][0]->nid) && $user->uid > 0) {
    $node = menu_get_object();
    if ($node->type == 'event') {
      
      $show_menu_item = false;

      $targetuser = user_load($user->uid);
      //if (!in_array("chapter leader", $targetuser->roles)){

      // if is chapter leader
      if (isset($node->field_chapter[LANGUAGE_NONE][0])){
        if (tm_users_is_chapter_leader($user->uid, $node->field_chapter[LANGUAGE_NONE][0]['target_id'])) { 
            $show_menu_item = true;
          }
      }

      // if is admin or moderator always show
      if ((in_array('administrator', array_values($user->roles))) or (in_array('moderator', array_values($user->roles)))) {
        $show_menu_item = true;
      }

      // if event is external rsvp, don't show
      if ($node->field_external_rsvp['und'][0]['value']) {
        $show_menu_item = false;
      }

      if ($show_menu_item) {
        $links['manageattendees'][] = array(
          'wrapper_class' => array('managersvp'),
          'content' => l(t('Manage RSVPs'), 'node/' . $nid . '/rsvp', array(
            'attributes' => array( 
            'title' => t('Manage RSVPs')
            )
          ))
        );
      }
    }
  }
  // END manage RSVPs

  // START contact attendees.
  if (isset($menu_item['page_arguments'][0]->nid) && $user->uid > 0) {
    $node = menu_get_object();
    if ($node->type == 'event') {

      $show_menu_item = false;

      $targetuser = user_load($user->uid);
      //if (in_array("chapter leader", $targetuser->roles)){
      if (isset($node->field_chapter[LANGUAGE_NONE][0])){
        if (tm_users_is_chapter_leader($user->uid, $node->field_chapter[LANGUAGE_NONE][0]['target_id'])) {
          $show_menu_item = true;
        }
      }

      // if is admin or moderator always show
      if ((in_array('administrator', array_values($user->roles))) or (in_array('moderator', array_values($user->roles)))) {
        $show_menu_item = true;
      }

      // if event is external rsvp, don't show
      if ($node->field_external_rsvp['und'][0]['value']) {
        $show_menu_item = false;
      }

      if ($show_menu_item) {
        $links['manageattendees'][] = array(
          'wrapper_class' => array('contactattendees'),
          'content' => l(t('Send Announcement'), 'node/' . $nid . '/announcement', array(
            'attributes' => array( 
            'title' => t('Send Announcement')
            )
          ))
        );
      }
    }
  }
  // END contact attendees

  // START download chapter members.
  if (isset($menu_item['page_arguments'][0]->nid) && $user->uid > 0) {
    $node = menu_get_object();
    if ($node->type == 'chapter') {
      global $user;
      $show_menu_item = false;

      // show to chapter leaders
      $targetuser = user_load($user->uid);
      if (tm_users_is_chapter_leader($targetuser->uid, $node->nid)) {
        $show_menu_item = true;
      }

      // if is admin or moderator always show
      if ((in_array('administrator', array_values($user->roles))) or (in_array('moderator', array_values($user->roles)))) {
        $show_menu_item = true;
      }

      if ($show_menu_item) {
        $links['downloadmembers'][] = array(
          'wrapper_class' => array('downloadmembers'),
          'content' => l(t('Download Members CSV'), 'chapters/export/' . $nid, array(
            'attributes' => array( 
            'title' => t('Download Members CSV')
            )
          ))
        );
      }
    }
  }
  // END download chapter members

  // START chapter invitiations.
  if (isset($menu_item['page_arguments'][0]->nid) && $user->uid > 0) {
    $node = menu_get_object();
    if ($node->type == 'chapter') {
      global $user;
      $show_menu_item = false;

      // show to chapter leaders
      if (tm_users_is_chapter_leader($user->uid, $node->nid) || user_access('tm invite all chapters')) {
        $show_menu_item = true;
      }

      // if is admin or moderator always show
      if ((in_array('administrator', array_values($user->roles))) or (in_array('moderator', array_values($user->roles)))) {
        $show_menu_item = true;
      }

      if ($show_menu_item) {
        $current_uri = request_uri();
        $current_uri = substr($current_uri, 1); // delete first slash
        $link_path = $current_uri.'/invitations';
        $links['chapterinvitiations'][] = array(
          'wrapper_class' => array('chapterinvitiations'),
          'content' => l(t('Chapter Invitations'), $link_path , array(
            'attributes' => array( 
            'title' => t('Chapter Invitations')
            )
          ))
        );
      }
    }
  }
  // END chapter invitiations  

  // START approve link
  //drupal_set_message("<pre>".print_r($menu_item,TRUE)."</pre>");
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {
    if (isset($menu_item['page_arguments'][0]->uid)){
      $uid = $menu_item['page_arguments'][0]->uid;
      $targetuser = user_load($uid);
      if (!in_array("approved user", $targetuser->roles)){

        // Need approve users access
        if (user_access("approve users")){

          // Show approval tool if:
          // 1. if user is a moderator or administrator
          // 2. or if they are chapter leader and the member is signed up their chapter
          if ((in_array("moderator", $user->roles) or user_access('administer')) 
          or ((in_array("chapter leader", $user->roles))) and (tm_users_member_in_users_chapter($targetuser->uid, $user->uid))) {

            // Show approve user link
            $links['approve'][] = array(
              'wrapper_class' => array('approve'),
              'content' => l(t('Approve member'), 'user/' . $uid . '/approve', array(
                'attributes' => array(
                'onclick' => "javascript:return confirm('Do you want to approve this account?\\n\\nGuidelines for approval:\\n* Account is a real person\\n* Profile is filled out\\n* Profile is not a company or brand');",
                'title' => t('Approve member')
                )
              ))
            );
          }
        }
      }
    }
  }
  // END approve link

  // START requested approval note
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {

    // Only show link for unapproved users
    if (!in_array("approved user", $targetuser->roles)){

      // Show requested approval or date of signup if:
      // 1. if user is a moderator or administrator
      // 2. or if they are chapter leader and the member is signed up their chapter
      if ((in_array("moderator", $user->roles) or user_access('administer'))
        or ((in_array("chapter leader", $user->roles))) and (tm_users_member_in_users_chapter($targetuser->uid, $user->uid))) {

        // show if user request approval
        $flag = flag_get_flag('approval_requested_by_user');

        // get list of people who flagged
        $self_flagged = flag_get_entity_flags("user", $uid, "approval_requested_by_user");

        // There should only be one flag (by the user)
        $menu_text = "";
        foreach ($self_flagged as $flagger) {
          $difference = time() - $flagger->timestamp;
          $flagged_time = format_interval($difference, 1) . " ago";
          $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Requested " . $flagged_time . "</span><br>";
        }

        // If user hasn't requested approval, show signup date
        if ($menu_text == "") {
          $show_user = user_load($uid);
          $difference = time() - $show_user->created;
          $flagged_time = format_interval($difference, 1) . " ago";
          $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Signed up " . $flagged_time . "</span><br>";
        }
        
        if ($menu_text != "") {
          $links['approve'][] = array(
            'wrapper_class' => array('approve'),
            'content' => t($menu_text),
          );
        }
        
      }
    }
  }
  // END requested approval note

  // START profile incomplete link
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {

    // Only show link for unapproved users
    if (!in_array("approved user", $targetuser->roles)){

      // Show flagging tool if:
      // 1. if user is a moderator or administrator
      // 2. or if they are chapter leader and the member is signed up their chapter
      if ((in_array("moderator", $user->roles) or user_access('administer'))
        or ((in_array("chapter leader", $user->roles))) and (tm_users_member_in_users_chapter($targetuser->uid, $user->uid))) {

        $links['approve'][] = array(
          'wrapper_class' => array('approve'),
          'content' => l(t('Flag: Incomplete profile'), 'user/' . $uid . '/approval_need_more_info', array(
            'attributes' => array(
            'onclick' => "javascript:return confirm('Do you want to flag this account as incomplete?\\n\\nThis action will:\\n* Notify the member they need to update their profile\\n* Notify you when the member requests approval');",
            'title' => t('Profile incomplete')
            )
          ))
        );
        
        // show last time request info was flagged
        $flag = flag_get_flag('approval_need_more_info');

        // get list of people who flagged
        $who_flagged = flag_get_entity_flags("user", $uid, "approval_need_more_info");

        // sort by flag time
        usort($who_flagged, function($a, $b){
          return ($a->timestamp > $b->timestamp) ? -1 : 1;
        });

        $menu_text = "";
        foreach ($who_flagged as $flagger) {
          $difference = time() - $flagger->timestamp;
          $flagged_time = format_interval($difference, 1) . " ago";
          $flagged_user = user_load($flagger->uid);
          $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Flagged by " . $flagged_user->field_user_first_name['und'][0]['value'] . " " . $flagged_time . "</span><br>";
        }
        
        $links['approve'][] = array(
          'wrapper_class' => array('approve'),
          'content' => t($menu_text),
        );
      }
    }
  }
  // END profile incomplete link

  // START is company or brand link
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {

    // Only show link for unapproved users
    if (!in_array("approved user", $targetuser->roles)){

      // Show flagging tool if:
      // 1. if user is a moderator or administrator
      // 2. or if they are chapter leader and the member is signed up their chapter
      if ((in_array("moderator", $user->roles) or user_access('administer')) 
        or ((in_array("chapter leader", $user->roles))) and (tm_users_member_in_users_chapter($targetuser->uid, $user->uid))) {

        $links['approve'][] = array(
          'wrapper_class' => array('approval_is_company_or_brand'),
          'content' => l(t('Flag: Is company or brand'), 'user/' . $uid . '/approval_is_company_or_brand', array(
            'attributes' => array(
            'onclick' => "javascript:return confirm('Flag this account as a company or brand?\\n\\nThis action will:\\n* Notify the member to personalize their profile\\n* Inform member on how to list their company\\n* Notify you when the member requests approval');",
            'title' => t('Is company or brand')
            )
          ))
        );
        
        // show last time request info was flagged
        $flag = flag_get_flag('approval_is_company_or_brand');

        // get list of people who flagged
        $who_flagged = flag_get_entity_flags("user", $uid, "approval_is_company_or_brand");

        // sort by flag time
        usort($who_flagged, function($a, $b){
          return ($a->timestamp > $b->timestamp) ? -1 : 1;
        });

        $menu_text = "";
        foreach ($who_flagged as $flagger) {
          $difference = time() - $flagger->timestamp;
          $flagged_time = format_interval($difference, 1) . " ago";
          $flagged_user = user_load($flagger->uid);
          $menu_text .= "<span style='font-size: smaller; font-style: italic; padding-left: 2em;'>Flagged by " . $flagged_user->field_user_first_name['und'][0]['value'] . " " . $flagged_time . "</span><br>";
        }
        
        $links['approve'][] = array(
          'wrapper_class' => array('approve'),
          'content' => t($menu_text),
        );
      }
    }
  }
  // END is company or brand link

  // START unapprove link
  if (($menu_item['path'] == 'user/%') or ($menu_item['path'] == 'user/%/view')) {
    if (isset($menu_item['page_arguments'][0]->uid)){
      $uid = $menu_item['page_arguments'][0]->uid;
      $targetuser = user_load($uid);
      if (in_array("approved user", $targetuser->roles)){
        if (user_access("unapprove users")){
          $links['approve'][] = array(
            'wrapper_class' => array('unapprove'),
            'content' => l(t('Un-Approve'), 'user/' . $uid . '/unapprove', array(
              'attributes' => array(
              'title' => t('Un-Approve user')
              )
            ))
          );    
        }
      }
    }
  }
  // END unapprove link

  // START Add event Link
  // The 'Add event' link should be available to the leaders of the city, moderators and admins.
  $control = FALSE;
  $path = 'node/add/event';

  if (user_access('add event to any chapter') && isset($field['entity']->type) && $field['entity']->type == 'chapter') {
    $control = TRUE;
  }
  else if (isset($field['entity']->type) && $field['entity']->type == 'chapter') {
    // Does the user have access.
    $router_item = menu_get_item($path);
    if ($router_item['access']) {
      if (isset($field['entity']->field_chapter_leaders[LANGUAGE_NONE]) && !empty($field['entity']->field_chapter_leaders[LANGUAGE_NONE])) {
        // Check if the current user is a chapter leader.
        dsm($user);
        foreach ($field['entity']->field_chapter_leaders[LANGUAGE_NONE] as $chapter_leader) {
          if ($chapter_leader['target_id'] == $user->uid) {
            // Found chapter leader.
            $control = TRUE;
            break;
          }
        }
      }
    }
  }

  if ($control) {
    $links['edition'][] = array(
      'wrapper_class' => array('add'),
      'content' => l(t('Add event'), $path, array(
        'query' => array(
          'field_chapter' => $field['entity']->nid
        ),
        'attributes' => array(
          'title' => t('Add event for @chapter', array('@chapter' => $field['entity']->title))
        )
      ))
    );    
  }
  // END Add event Link
  
  // START Set as sponsor link
  if (isset($field['entity']->nid) && $flag_link = flag_create_link('tm_sponsor', $field['entity']->nid)) {
    $links['edition'][] = array(
      'wrapper_class' => array('sponsor'),
      'content' => $flag_link
    );
  }
  // END Set as sponsor link

  // START Contact chapter owners.
  if (isset($menu_item['page_arguments'][0]->nid) && $user->uid > 0) {
    $node = menu_get_object();
    if ($node->type == 'event' || $node->type == 'chapter') {
      $dest = 0;
      if ($node->type == 'event') {
        if (isset($node->field_chapter[$node->language])){
          $dest = $node->field_chapter[$node->language][0]['target_id'];
        }
      }
      if ($node->type == 'chapter') $dest = $node->nid;
      if ($dest){
        $links['contactleaders'][] = array(
          'wrapper_class' => array('contactleaders'),
          'content' => l(t('Contact Chapter Leaders'), 'chapters/contact/'.$dest, array(
            'attributes' => array(
            'title' => t('Contact Chapter Leaders')
            )
          ))
        );
        }
      }
    }
  // END contact chapter owners

  $links['share'][] = array(
    'wrapper_class' => array('facebook'),
    'content' => l(t('Share on Facebook'), 'https://www.facebook.com/sharer/sharer.php', array(
      'absolute' => TRUE,
      'query' => array('u' => $base),
      'attributes' => array(
        'target' => '_blank',
        'class' => array('facebook'),
        'title' => t('Share this on Facebook')
      )
    ))
  );
  
  $links['share'][] = array(
    'wrapper_class' => array('twitter'),
    'content' => l(t('Share on Twitter'), 'https://twitter.com/share', array(
      'absolute' => TRUE,
      'query' => array('url' => $base),
      'attributes' => array(
        'target' => '_blank',
        'class' => array('twitter'),
        'title' => t('Share this on Twitter')
      )
    ))
  );
  
  $links['share'][] = array(
    'wrapper_class' => array('google-plus'),
    'content' => l(t('Share on Google+'), 'https://plus.google.com/share', array(
      'absolute' => TRUE,
      'query' => array('url' => $base),
      'attributes' => array(
        'onclick' => "javascript:window.open(this.href, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600'); return false;",
        'class' => array('google-plus'),
        'title' => t('Share this on Google+')
      )
    ))
  );
  
  return theme('more_actions', array('links' => $links));
}
/**
 * Custom function to build the more_actions menu
 */
function _tm_edit_own_profile_process($field, $title = NULL) {
  $menu_item = menu_get_item();
  // Is it a user?
  if (!isset($menu_item['page_arguments'][0]->nid) && isset($menu_item['page_arguments'][0]->uid)) {
    global $user;
    // Extra classes for the link.
    $classes = $field['formatter_settings']['Extra classes'];
    $uid = $menu_item['page_arguments'][0]->uid;
    
    if ($user->uid == $uid) {
      $classes = $field['formatter_settings']['Extra classes'];
      return l(t('Edit'), 'user/' . $uid . '/edit', array(
        'attributes' => array(
          'class' => $classes,
          'title' => t('Edit your profile')
        )
      ));
    }
  }
}

/**
 * Custom function to build the flag placeholder for anonymous users.
 *
 * When not logged in, the users should still see the follow / join buttons.
 * This can't be achieved with flags since flags, normally, don't show up for
 * anonymous users.
 * To solve this problem a faux field is created. This filed will be used
 * throughout the website with a flag like appearence. Upon click will redirect
 * the users to the login page.
 * This is a very specific field and will differ according with the content
 * type being viewed.
 */
function _tm_anon_flag_placeholder($field, $title = NULL) {

  global $user;
  if (!$user->uid) {
    $entity = $field['entity'];
    $css_classes = 'follow bttn bttn-secondary bttn-m';
    
    if (isset($entity->pass)) {
      // Password set, it's a user;
      return l(t('Follow'), 'user',array(
        'attributes' => array(
          'title' => t('Follow :user', array(':user' => $entity->realname)),
          'class' => array($css_classes)
        )
      ));
    }
    
    // Behaviour based on content type.
    switch ($entity->type) {
      case 'chapter':
        return l(t('Join'), 'user',array(
          'attributes' => array(
            'title' => t('Join :chapter', array(':chapter' => $entity->title)),
            'class' => array($css_classes)
          )
        ));
        break;
      case 'organization':
        return l(t('Follow'), 'user',array(
          'attributes' => array(
            'title' => t('Follow :organization', array(':organization' => $entity->title)),
            'class' => array($css_classes)
          )
        ));
        break;
      case 'event':
        $result = _tm_event_display_flag($entity->nid);
        
        // Only show the button for travel massive events.
        // The other events will have an external RSVP link.
        if ($result == 'show_external_rsvp') {
          return;
        }
        
        // Show register
        if (($result == 'show_register') or ($result == 'show_not_approved')) {
          $css_classes .= ' disabled';
          return l(t('Register'), 'user/login', array(
          'attributes' => array(
            'title' => t('Register for :event', array(':event' => $entity->title)),
            'class' => array($css_classes)
          )
          ));
        }

        // Show waitlist
        if ($result == 'show_waitlist') {
          $css_classes .= ' disabled';
          return l(t('Join Waitlist'), 'user',array(
          'attributes' => array(
            'title' => t('Join waitlist for :event', array(':event' => $entity->title)),
            'class' => array($css_classes)
          )
          ));
        }
        
        
        break;
    }
  }
}

/**
 * Implement hook_theme()
 */
function tm_fields_theme() {
  return array(
    'tm_chapter_sticker' => array(
      'variables' => array(
        'chapter_id' => NULL,
        'shortcode' => NULL,
        'color' => NULL
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_chapter_sticker'
    ),
    'more_actions' => array(
      'variables' => array(
        'links' => array()
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_more_actions'
    ),
    'tm_fields_link' => array(
      'variables' => array(
        'title' => NULL,
        'url' => NULL,
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_fields_link',
    ),
    'tm_fields_twitter' => array(
      'variables' => array(
        'title' => NULL,
        'url' => NULL,
      ),
      'path' => drupal_get_path('module','tm_fields') . '/templates/fields',
      'template' => 'tm_fields_twitter',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function tm_fields_ctools_plugin_directory($module, $plugin) {
  if ($module == 'field_validation' && $plugin == 'validator') {
    return 'plugins/' . $plugin;
  }
}

/**
* Implements hook_field_formatter_info().
* see: See more at: http://www.whenwhowhere.com/tech-blog/create-custom-field-formatter-drupal-7#sthash.pf9Fsjzp.dpuf
*/
function tm_fields_field_formatter_info() {
  $info = array(
    'tm_fields_link' => array(
      'label' => t('TM Link'), 
      'field types' => array('link_field'),
      'description' => t('Diplays URL without http:// prefix'),
    ),
    'tm_fields_twitter' => array(
      'label' => t('TM Twitter'), 
      'field types' => array('link_field'),
      'description' => t('Diplays a Twitter URL from an @ or # name'),
    ), 
  );
  return $info;
}

/**
* Implements hook_field_formatter_view()
* see: See more at: http://www.whenwhowhere.com/tech-blog/create-custom-field-formatter-drupal-7#sthash.pf9Fsjzp.dpuf
*/
function tm_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'tm_fields_link':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'tm_fields_link', 
          '#title' => $item['title'], 
          '#url' => $item['url'], 
        );
     }
    break;
    case 'tm_fields_twitter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'tm_fields_twitter', 
          '#title' => $item['title'], 
          '#url' => $item['url'], 
        );
     }
    break;
  }
  return $element;
}


