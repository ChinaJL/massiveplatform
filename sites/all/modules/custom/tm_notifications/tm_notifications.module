<?php
/**
 * @file
 * Code for the TM Notifications feature.
 */

include_once 'tm_notifications.features.inc';
/**
 * @file tm_notifications.module
 * 
 * @author Daniel Silva (daniel.silva@flipside.org)
 * 
 */

module_load_include('inc', 'tm_notifications', 'tm_notifications_TMNotification');
 
/**
 * Implements hook_menu()
 */
function tm_notifications_menu() {
  $items['admin/config/tm/tm_notifications'] = array(
    'title' => 'Notifications',
    'description' => 'Settings for Travel Massive notifications.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tm_notifications_messages_admin_form'),
    'access arguments' => array('manage tm notifications'),
    'file' => 'tm_notifications.admin.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission()
 */
function tm_notifications_permission() {
  return array(
    'manage tm notifications' => array(
      'title' => t('Manage notifications'),
      'description' => t('Manage Travel Massive notifications.'),
    ),
  );
}

/**
 * Implements hook_field_extra_fields()
 * Add a new field to the user form that contain the notifications.
 * The actual form element will be created in the form_alter hook
 */
function tm_notifications_field_extra_fields() {
  $return['user']['user']  = array(
    'form' => array(
      'tm_notifications' => array(
        'label' => t('Notifications'),
        'description' => t('User notifications settings.'),
        'weight' => 50,
      ),
    )
  );

  return $return;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function tm_notifications_form_user_profile_form_alter(&$form, &$form_state) {
  $user = $form['#user'];
  
  // Get all the registered notifications.
  $notifications = module_invoke_all('tm_notif_info');
  
  if (!empty($notifications)) {

    $form['tm_notifications'] = array(
      '#type' => 'fieldset',
      '#title' => t('Notification settings'),
      '#description' => t('On this page you can edit your notifications and reminder settings.'),
      '#attributes' => array(
        'class' => array('field-group-fieldset')
      ),
      // Tree is needed to keep the array structure when saving the variable.
      '#tree' => TRUE,
    );
    
    // sort notifications by their printed description
    $sort = array();
    foreach ($notifications as $name => $value) {
      $sort[$name] = $value['description'] . "";
    }
    array_multisort($notifications, SORT_DESC, SORT_NUMERIC, $sort);
    
    // Special check if a featured member is set to recieve event notifications
    $event_notifications = array("events_register_flag", "events_waitlist_flag", "events_register_unflag", "events_waitlist_unflag");

    $change_overide = false;
    $flag = flag_get_flag('featured_member');
    if ($flag->is_flagged($user->uid)) {

      // search for any events where this user has been featured and field_notify_featured_members = true 
      $query = "SELECT count(*) AS num_rows
                FROM field_data_field_event_featured_members 
                LEFT JOIN field_data_field_notify_featured_members
                ON field_data_field_event_featured_members.entity_id = field_data_field_notify_featured_members.entity_id 
                WHERE field_notify_featured_members_value = 1 
                AND field_event_featured_members_target_id = :uid limit 1";
      $result = db_query($query, array(':uid' => $user->uid))->fetch();
      $result->num_rows;

      if ($result->num_rows > 0) {
        $change_overide = true;
      }
    }


    foreach ($notifications as $name => $value) {
      $notif = new TMNotification($name);

      // Determine if the user can change the settings
      // If change_allowed true and change_allowed_roles, then check if user is in role
      // Otherwise use value of change_allowed
      $change_allowed = false;
      $change_roles_allowed = $notif->getChangeAllowedRoles();

      if ($change_overide && in_array($name, $event_notifications)) {
        $change_allowed = true;
      }
      else if ($notif->isChangeAllowed() && (sizeof($change_roles_allowed) > 0)) {
        foreach($change_roles_allowed as $role) {
          if (in_array($role, $user->roles)) {
            $change_allowed = true;
          }
        }
      } else {
        $change_allowed = $notif->isChangeAllowed();
      }

      // format set title for non-chapter leaders
      $title = $notif->getLabel($value['title']);
      if ($change_overide) { 
        $title = str_replace("[Chapter Leaders]", "Events &rarr; ", $title);
      }

      if ($change_allowed) {
        $form['tm_notifications'][$name] = array(
          '#type' => 'checkbox',
          '#title' => $title,
          '#default_value' => $notif->isEnabled($user->uid),
        );
      }
    }

    // Attach submit handler to save the notification state.
    $form['#submit'][] = 'tm_notifications_user_form_submit';
  }
}

/**
 * Additional submit handler for form user_profile_form.
 * Used to save the notifications.
 */
function tm_notifications_user_form_submit($form, &$form_state) {
  $user = $form['#user'];
  foreach ($form_state['values']['tm_notifications'] as $key => $value) {
    $notif = new TMNotification($key);
    $notif->setForUser($user->uid, (bool) $value);
  }
}

/**
 * Implements hook_mail()
 * Compose the email to send.
 */
function tm_notifications_mail($key, &$message, $params) {

  global $conf;
  $notif = new TMNotification($key);
  $subject = $notif->getEmailSubject();
  $msg = $notif->getEmailMessage();
  
  // STEP 1. 
  // Replace tokens
  if (!empty($params['tokens'])) {
    $subject = token_replace($subject, $params['tokens']);
    $msg = token_replace($msg, $params['tokens']);
  }
  
  // replace custom tokens ie: __PROFILE_URL__
  // replace in message and subject
  foreach ($params['tokens'] as $token_name => $token_value) {
    if (strpos($token_name, "__") === 0) {
      $msg = str_replace($token_name, $token_value, $msg);
      $subject = str_replace($token_name, $token_value, $subject);
    }
  }

  // set reply to from token
  if (isset ($params['tokens']['__REPLY_TO__'])) {
    $message['headers']['Reply-To'] = $params['tokens']['__REPLY_TO__'];
  }
  

  // STEP 2. LOAD HTML TEMPLATE
  $template_file = drupal_get_path('module', 'tm_notifications') . '/templates/tm_notifications-email_template.tpl.php';
  $template = file_get_contents($template_file);
 

  // STEP 3. SET MAIL HTML HEADERS
  $module = 'tm_notifications';
  $language = language_default();
  $params = array();
  $send = FALSE;
  //$email_message = drupal_mail($module, $key, $email, $language, $params, NULL, $send);
  $message['headers']['MIME-Version'] = '1.0';
  $message['headers']['Content-Type'] = 'multipart/mixed;';
  $message['headers']['Content-Type'] = 'text/html;';


  // STEP 4. SET SUBJECT
  $subject = str_replace("__SERVER_NAME__", $_SERVER["SERVER_NAME"], $subject);
  $subject = str_replace("__SERVER_HTTP__", $conf["tm_email_server_http"], $subject);  
  $subject = str_replace("__SITE_NAME__", $conf["tm_site_name"], $subject);  

  $message['subject'] = check_plain($subject);


  // STEP 5. REPLACE BODY AND FOOTER IN HTML TEMPLATE
  $template = str_replace("__EMAIL_BODY__", $msg, $template);
  $footer = $conf["tm_email_default_footer"];
  if (isset ($params['footer'])) {
    $footer = $params['footer'];
  }
  $template = str_replace("__EMAIL_FOOTER__", $footer, $template);

  // Other vars
  $template = str_replace("__SERVER_NAME__", $_SERVER["SERVER_NAME"], $template); 
  $template = str_replace("__SERVER_HTTP__", $conf["tm_email_server_http"], $template);  
  $template = str_replace("__SITE_NAME__", $conf["tm_site_name"], $template);  
  $template = str_replace("__EMAIL_SIGNOFF__", $conf["tm_email_signoff"], $template);
  $template = str_replace("__MEMBERS_LABEL__", $conf["tm_members_label"], $template); 

  // STEP 6. LOAD HTML TEMPLATE INTO EMAIL BODY
  $message['body'] = $template;


  // STEP 7. Cron Flag
  // TODO: This is untested with mimemail
  // Notifications that are likely to be sent to multiple user at the
  // same time should be put in a queue and sent through cron.
  // To achieve this we mimic the behaviour of queue_mail and use
  // its functions to accomplish this.
  // Whether or not to use cron is defined by the developer in the hook.
  $notifications = module_invoke_all('tm_notif_info');
  $info = $notifications[$key];
  if (isset($info['use_cron']) && $info['use_cron']) {
    // Store the message for sending on cron.
    _queue_mail_get_queue()->createItem($message);
    // And prevent the message from being sent instantly.
    $message['send'] = FALSE;
  }

}

/**
 * Implements hook_cronapi()
 */
function tm_notifications_cronapi() {
  $items = array();
  $items['tm_notifications_scheduled_worker_run'] = array(
    'title' => t('Run scheduled workers'),
    'callback' => 'tm_notifications_scheduled_worker_run',
    'enabled' => TRUE,
    'scheduler' => array(
      'name' => 'crontab',
      'crontab' => array(
        'rules' => array('*/5 * * * *'),
      ),
    ),
  );
  return $items;
}

/**
 * Cron worker.
 */
function tm_notifications_scheduled_worker_run() {
  $now = new DateTime(null, new DateTimeZone('UTC'));
  
  $result = db_query('SELECT * FROM {tm_notifications_worker_schedule} WHERE status = :status AND schedule_date <= :date', array(
    'status' => 1 ,
    'date' => $now->format('Y-m-d H:i:s')
  ))->fetchAll();
  
  foreach ($result as $notification) {
    $data = @unserialize($notification->data);
    $fn = $notification->worker;
    
    if (function_exists($fn)) {
      $fn($data);
    }
    
    // Clean rows.
    tm_notifications_schedule_remove($notification->identifier);
  }
}

/**
 * Notify the user using the data set through the settings form.
 * Only active users will be notified.
 * 
 * @param $notification
 *   Notification name.
 * @param StdClass $account
 *   User account. (destination)
 * @param array $tokens
 *   If the message includes tokens they need to be specified here. This uses
 *   token settings.
 * 
 * @return boolean
 *   TRUE if the notification is enabled for the user and it was scheduled.
 */
function tm_notifications_notify($notification, $account, $tokens = array(), $from = null) {

  // You can go one step further and disable any outbound notifications triggered by a non-validated member
  // Just uncomment below.
  /*global $user;
  if (in_array('non-validated', $user->roles)) {
    watchdog('Not sending email trigged by non-verified user ', $notification . ", " . $account->mail);
    return;
  }*/

  // if notified user is not validated, then don't trigger any notifications
  // allow the user_approved and related notification to be sent
  $allow_unverified_notifications = array("user_approved", "user_approval_need_more_info", "user_approval_is_company_or_brand", "user_approval_non_community");
  if (in_array('non-validated', $account->roles) && !in_array($notification, $allow_unverified_notifications)) {
    watchdog('Not sending email to a non-verified user ', $notification . ", " . $account->mail);
    return;
  }

  $notification = new TMNotification($notification);
  if ($notification->isEnabled($account->uid) && $account->status) {
    drupal_mail('tm_notifications', $notification->getName(), $account->mail, user_preferred_language($account), array('tokens' => $tokens), $from);
    return TRUE;
  }
  
  return FALSE;
}

/**
 * Schedules a worker to run at a given date.
 * Note: The worker may not be run exactly at the specified date. +-5min
 * 
 * When a worker is scheduled, additional data can be saved in the database.
 * When a crun runs checks if there are any workers to call and calls them 
 * with the provided data as parameter.
 * 
 * In the worker the function tm_notifications_notify() should be used to
 * send the notifications.
 * 
 * Note: It is HIGHLY advisable to set the use_cron param in the
 * hook_tm_notif_info() to TRUE to prevent timeouts.
 * 
 * @see tm_notifications_notify()
 * 
 * @param String $identifier
 *   A unique identifier for this schedule.
 *   This can be any string but should contain the name of the module
 *   that is making the call.
 *   This is useful when a schedule needs to be removed.
 * @param DateTime $date
 *   The date when the notification should be sent.
 * @param StdClass $worker
 *   The worker to run. Must be a valid function.
 * @param array $data
 *   Additional data that will be passed to the worker.
 * 
 * @return boolean
 *   FALSE if the $worker does not exist, TRUE otherwise.
 */
function tm_notifications_schedule($identifier, DateTime $date, $worker, $data = array()) {
  // Save in UTC format.
  $date->setTimezone(new DateTimeZone('UTC'));
  
  if (!function_exists($worker)) {
    return FALSE;
  }
  
  db_insert('tm_notifications_worker_schedule')
    ->fields(array(
      'schedule_date' => $date->format('Y-m-d H:i:s'),
      'identifier' => $identifier,
      'worker' => $worker,
      'data' => serialize($data),
  ))->execute();
  
  return TRUE;
}

/**
 * Removes the schedule with the given identifier.
 * 
 * @param String $identifier
 *   The unique identifier for the schedule.
 * 
 * @return boolean
 *   The result of the operation.
 */
function tm_notifications_schedule_remove($identifier) {
  $res = db_delete('tm_notifications_worker_schedule')
  ->condition('identifier', $identifier)
  ->execute();
  
  return (bool) $res;
}

/**
 * Removes all user related notifications from the database.
 * The settings set through the admin page will not be removed.
 * 
 * @param String $notification_name
 *   The name of the notification.
 */
function tm_notifications_preferences_remove($notification_name) {
  db_delete('tm_notifications')
  ->condition('bundle', $notification_name)
  ->execute();
}

/**
 * Removes all entries in the database related to the given notification.
 * This refers to the user preferences (subscribed/unsubscribed)
 * All the admin settings are also removed.
 * 
 * NOTE: When a module implementing notifications is uninstalled this function
 * should be called.
 * 
 * @param String $notifications_name
 */
function tm_notifications_preferences_purge($notification_name) {
  tm_notifications_preferences_purge_bulk(array($notification_name));
}

/**
 * Removes all entries in the database related to the given notifications.
 * This refers to the user preferences (subscribed/unsubscribed)
 * All the admin settings are also removed.
 * 
 * NOTE: When a module implementing notifications is uninstalled this function
 * should be called.
 * 
 * @param Array $notifications_name
 */
function tm_notifications_preferences_purge_bulk($notification_names) {
  module_load_include('inc', 'tm_notifications', 'tm_notifications_TMNotification');
  foreach($notification_names as $name) {
    $notif = new TMNotification($name);
    
    tm_notifications_preferences_remove($notif->getName());
    variable_delete($notif->getVarName());
  }
}
