<?php

/**
 * Implements hook_tm_notif_info()
 */
function tm_notifications_event_tm_notif_info() {
  $notification = array();
  $notification['user_event_join'] = array(
    'title' => 'User joined event',
    'description' => 'User joined an event',
    'use_cron' => FALSE,
    'tokens' => array(
      // The token types that have specific context. Can be multiple token types like 'term' and/or 'user'
      'token_types' => array('node', 'current-user'),
      // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
      'global_types' => FALSE,
      // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
      'click_insert' => TRUE
    )
  );
  
  $notification['user_event_unjoin'] = array(
    'title' => 'User unjoined event',
    'description' => 'User unjoined an event',
    'use_cron' => FALSE,
    'tokens' => array(
      // The token types that have specific context. Can be multiple token types like 'term' and/or 'user'
      'token_types' => array('node', 'current-user'),
      // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
      'global_types' => FALSE,
      // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
      'click_insert' => TRUE
    )
  );
  
  $notification['event_added_member_chapter'] = array(
    'title' => 'Event in City',
    'description' => 'Event was added in a city the user belongs to.',
    'use_cron' => TRUE,
    'tokens' => array(
      // The token types that have specific context. Can be multiple token types like 'term' and/or 'user'
      'token_types' => array('node', 'current-user'),
      // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
      'global_types' => FALSE,
      // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
      'click_insert' => TRUE
    )
  );
  
  return $notification;
}

/**
 * Implement hook_flag_flag()
 */
function tm_notifications_event_flag_flag($flag, $entity_id, $account, $flagging) {
  // We want to target the signup flag on nodes.
  if ($flag->name == 'signup' && $flag->entity_type == 'node') {
    $node = node_load($entity_id);
    // Only for event nodes.
    if ($node->type == 'event') {
      tm_notifications_notify('user_event_join', $account, array('node' => $node));
    }
  }
}

/**
 * Implement hook_flag_unflag()
 */
function tm_notifications_event_flag_unflag($flag, $entity_id, $account, $flagging) {
  // We want to target the signup flag on nodes.
  if ($flag->name == 'signup' && $flag->entity_type == 'node') {
    $node = node_load($entity_id);
    // Only for event nodes.
    if ($node->type == 'event') {
      tm_notifications_notify('user_event_unjoin', $account, array('node' => $node));
    }
  }
}

/**
 * Implements hook_node_insert()
 */
function tm_notifications_event_node_insert($node) {
  if ($node->type == 'event') {
    $chapter_nid = $node->field_chapter[LANGUAGE_NONE][0]['target_id'];
    
    // Get all the users that flagged the chapter
    $chapter_members = flag_get_entity_flags('node', $chapter_nid, 'signup');
    
    foreach ($chapter_members as $member) {
      $account = user_load($member->uid);
      tm_notifications_notify('event_added_member_chapter', $account, array('node' => $node));
    }
  }
}
