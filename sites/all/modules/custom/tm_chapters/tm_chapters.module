<?php
/**
 * @file
 * Code for the TM Chapters feature.
 */

include_once 'tm_chapters.features.inc';

/**
 * Implement hook_ds_field_info()
 */
function tm_chapters_ds_fields_info($entity_type) {
  if ($entity_type != 'node') {
    return;
  }
  $fields = array();

  $fields['tm_ds_members_chapter'] = array(
    'title' => t('Amount chapter members'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('chapter|full'),
    'function' => '_tm_members_chapter'
  );

  return array($entity_type => $fields);
}

/*
* Implements hook_menu()
*/
function tm_chapters_menu() {
  $items['chapters/%/contact'] = array(
    'title' => t('Contact chapter leaders'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tm_chapters_contact_form',1),
    'access arguments' => array('flag follow_members'),
    'type' => MENU_CALLBACK,
  );
  $items['chapters/%/export'] = array(
    'title' => t('Export Members'),
    'page callback' => 'tm_chapters_download_csv',
    //'page arguments' => array(2),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Custom function to print the amount of members belonging to a chapter
 */
function _tm_members_chapter($field, $title = NULL) {
  global $conf;
  $member_label = $conf["tm_member_label"];
  $members_label = $conf["tm_members_label"];

  $flag = flag_get_flag('signup');
  $amount_members = $flag->get_count($field['entity']->nid);
  return $amount_members ? format_plural($amount_members, '1 ' . $member_label,'@members '.$members_label, array('@members' => $amount_members)) : t('No members yet');
}

/* 
 * Alters a node on saving to make sure the leaders have the correct role
 */
function tm_chapters_node_presave($node){
  $role_name = 'chapter leader';
  
  // make sure we are working on a chapter node
  if ($node->type != "chapter") { return; }

  if ($role = user_role_load_by_name($role_name)) {
    foreach ($node->field_chapter_leaders[LANGUAGE_NONE] as $target){
      $user = user_load($target['target_id']);
      // make sure all chapter leaders have the right role set
      user_multiple_role_edit(array($user->uid), 'add_role', $role->rid);
    }
    // should also check $node->original for users being *removed*
    if (isset($node->original->field_chapter_leaders)){
      $original = flatten_chapter_leaders($node->original->field_chapter_leaders[LANGUAGE_NONE]);
      $new = flatten_chapter_leaders($node->field_chapter_leaders[LANGUAGE_NONE]);
      $removed = array_diff($original, $new);
      foreach ($removed as $rem){
        // check first that leader is not in other chapters
          $chapters = db_select('field_data_field_chapter_leaders', 'd')
          ->fields('d')
          ->condition('field_chapter_leaders_target_id',$rem,'=')
          ->condition('deleted',0,'=')
          ->execute();
        if ($chapters->rowCount() == 1){
          user_multiple_role_edit(array($rem), 'remove_role', $role->rid);
        }
      }
    }
  }
}

// array diff didn't like 2 dimensional arrays
function flatten_chapter_leaders($array){
  $newarray = array();
  foreach ($array as $item){
    $newarray[] = $item['target_id'];
  }
  return $newarray;
}

/* Form for chapter contact form */
function tm_chapters_contact_form(){

  $form['subject'] = array(
    '#title' => t('Subject'),
    '#type' =>'textfield',
    '#required' => TRUE,
    );
  $form['body'] = array(
    '#type' =>'textarea',
    '#title' => t('Message'),
    '#rows' => 10,
    '#required' => TRUE,
    );
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Contact chapter leaders'),
    '#id' => 'edit-submit'  
  );
  return $form;
}

/* Contact chapter leaders form submit */
function tm_chapters_contact_form_submit($form, &$form_state) {

  global $user;
  global $conf;
  $nid = _orig_nid();

  if ($nid == 0) {
    print drupal_not_found();
    return;
  }

  $chapter = node_load($nid);
  $account = user_load($user->uid);

  if ($chapter) {
    foreach($chapter->field_chapter_leaders[$chapter->language] as $leader){
      $chapterleader = user_load($leader['target_id']);
      tm_chapters_send_email($chapterleader->mail, $form_state['values']['subject'], $form_state['values']['body'], $account);
    }

    drupal_set_message(t('Your message has been sent.'));
    drupal_goto('node/'.$chapter->nid);
  }
}

/* Email sending function */
function tm_chapters_send_email($email, $subject, $body, $user){

    // Get Users Name
    if (empty($user->language)) $language = LANGUAGE_NONE;
    else $language = $user->language;
    $name = $user->name;
    if (isset($user->field_user_first_name[$language])){
      $name = $user->field_user_first_name[$language][0]['value'];
      if (isset($user->field_user_first_name[$language])){
        $name .= ' '.$user->field_user_last_name[$language][0]['value'];
      }
    }

    // SEND EMAIL
    $module = 'tm_chapters';
    $key = 'key';
    $language = language_default();
    $params = array();
    $from = NULL;
    $reply = $user->mail;
    $send = FALSE;
    

    // CONSTRUCT MESSAGE
    $member_url = url('user/'.$user->uid, array('absolute'=>TRUE));
    $message = "Hi, a member just sent a message via your Chapter contact form:";
    $message .= "<br>";
    $message .= "<br>Name: " . $name;
    $message .= "<br>Subject: " . check_plain($subject);
    $message .= "<br>Message: " . check_plain($body);
    $message .= "<br>Member's profile: <a href='" . $member_url . "'>" . $member_url . "</a>";
    $message .= "<br>Member's email: " . $reply;
    $message .= "<br>";
    $message .= "<br>To reply directly, just reply to this email.";
    $message .= "<br>";
    $message .= "<br>__EMAIL_SIGNOFF__";

    // STEP 1. LOAD HTML TEMPLATE
    $template_file = drupal_get_path('module', 'tm_notifications') . '/templates/tm_notifications-email_template.tpl.php';
    $template = file_get_contents($template_file);


    // STEP 2. SET MAIL HTML HEADERS
    $email_message = drupal_mail($module, $key, $email, $language, $params, NULL, $send);
    $email_message['headers']['MIME-Version'] = '1.0';
    $email_message['headers']['Content-Type'] = 'multipart/mixed;';
    $email_message['headers']['Content-Type'] = 'text/html;';
    $email_message['headers']['Reply-to'] = $reply; // set reply-to to the user

    // STEP 3. SET SUBJECT 
    $email_message['subject'] = "Contact Form: " . check_plain($subject);

    // STEP 4. REPLACE BODY AND FOOTER IN HTML TEMPLATE
    $template = str_replace("__EMAIL_BODY__", $message, $template);
    global $conf;
    $footer = $conf["tm_email_default_footer"];
    if (isset ($params['footer'])) {
      $footer = $params['footer'];
    }
    $template = str_replace("__EMAIL_FOOTER__", $footer, $template);

    // Other vars
    $template = str_replace("__SERVER_NAME__", $_SERVER["SERVER_NAME"], $template); 
    $template = str_replace("__SERVER_HTTP__", $conf["tm_email_server_http"], $template);  
    $template = str_replace("__SITE_NAME__", $conf["tm_site_name"], $template);  
    $template = str_replace("__EMAIL_SIGNOFF__", $conf["tm_email_signoff"], $template); 

    // STEP 5. LOAD HTML TEMPLATE INTO EMAIL BODY
    $email_message['body'] = $template;

    // STEP 6. SEND EMAIL
    // Retrieve the responsible implementation for this message.
    $system = drupal_mail_system($module, $key);

    // Format the message body.
    $format_message = $system->format($email_message);

    // Send e-mail.
    $result = $system->mail($format_message);
}

/* Download Chapter CSV function */
function tm_chapters_download_csv(){

  global $user;
  global $conf;
  $nid = _orig_nid();

  if($nid == 0) {
    print drupal_not_found();
    return;
  }

  // Check that user is a chapter leader of this chapter
  if ((!tm_users_is_chapter_leader($user->uid, $nid)) 
    and (!(in_array("moderator", $user->roles))) 
    and (!in_array("administrator", $user->roles)))
 {
    $output = drupal_access_denied();
    print $output;
    return;
  }

  // Get chapter
  $chapter = node_load($nid);

  $oldzone = date_default_timezone_get();
  date_default_timezone_set(drupal_get_user_timezone());
  $csvname = $chapter->title.'_'.date('M_d_Y_Gi',time()) . ".csv";
  date_default_timezone_set($oldzone);

  // csv header
  drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment; filename = '.$csvname);
  
  $fh = fopen('php://output', 'w');

  // put information use reminder
  global $conf;
  $message = "# IMPORTANT: Please care about our members' privacy.";
  $message .= "\n# Under the " . $conf['tm_site_name'] . " Privacy Terms you cannot transfer personal data (name or email) to sponsors or 3rd parties.";
  $message .= "\n# Please use the SubscribeChapterNewsletter field to manage external email newsletter subscriptions.\n\n";

  fputs($fh,$message,strlen($message));

  // puts a header row across the top of the csv
  $item = array(t('First name'),t('Last name'),t('Email'),t('SubscribeChapterNewsletter'),t('SubscribeGlobalNewsletter'),t('Country'),t('City'),t('Organization'),t('Role'),t('Website'),t('Segment'),t('MemberSince'),t('ApprovalStatus'));
  fputcsv($fh, $item);

  // list of users
  $users = db_select('flagging', 'f')
    ->fields('f')
    ->condition('entity_id',$nid,'=')
    ->condition('entity_type','node','=')
    ->execute();
  while ($load_user = $users->fetchAssoc()){
    $account = user_load($load_user['uid']);
    if (empty($account->language)) $language = LANGUAGE_NONE;
    else $language = $account->language;

    $item = array();
    // columns in same order as the header array above
    $item[] = $account->field_user_first_name[$language][0]['value'];
    $item[] = $account->field_user_last_name[$language][0]['value'];
    $item[] = $account->mail;
    $notif = new TMNotification("chapter_newsletters");
    $item[] = ($notif->isEnabled($account->uid) ? "yes" : "no");
    $notif = new TMNotification("global_newsletter");
    $item[] = ($notif->isEnabled($account->uid) ? "yes" : "no");
    if (isset($account->field_user_country[$language][0])){
      $item[] = $account->field_user_country[$language][0]['iso2'];
    }
    else $item[] = t('none');
    if (isset($account->field_location_city[$language][0]['value'])){
      $item[] = $account->field_location_city[$language][0]['value'];
    }
    else $item[] = t('none');
    if (isset($account->field_job_organization[$language][0]['value'])){
      $item[] = $account->field_job_organization[$language][0]['value'];
    }
    else $item[] = t('none');
    if (isset($account->field_job_role[$language][0]['value'])){
      $item[] = $account->field_job_role[$language][0]['value'];
    }
    else $item[] = t('none');
    if (isset($account->field_link_website[$language][0]['url'])){
      $item[] = $account->field_link_website[$language][0]['url'];
    }
    else $item[] = t('none');
    if (isset($account->field_segment[$language][0]['tid'])){
      $term = taxonomy_term_load($account->field_segment[$language][0]['tid']);
      // load parent term
      $parent_terms = taxonomy_get_parents($term->tid);
      if (sizeof($parent_terms > 0)) {
        $parent_term = current($parent_terms);
        $item[] = $parent_term->name. " > " . $term->name;
      } else {
        $item[] = $term->name;
      }
    }
    else $item[] = t('none');
    $item[] = date('j M Y',$load_user['timestamp']);

    // approved or not
    if (!in_array("approved user", $account->roles)) { 
      $item[] = "not approved";
    } else {
      $item[] = "approved";
    }

    // remove commas from any input data
    $new_item = array();
    foreach($item as $col => $val) {
      $new_item[$col] = str_replace(",", "", $val);
    }

    fputcsv($fh, $new_item);
  } 
  fclose($fh);
}

// Joining first chapter sets home chapter 
// https://github.com/travelmassive/massiveplatform/issues/28
function tm_chapters_flag_flag($flag, $entity_id, $account, $flagging) {

  // only listen for signup to chapter
  if ($flag->name != 'signup') {
    return;
  }

  // get user who flagged
  $user = user_load($account->uid);

  // if they don't have a home chapter, set this as their home chapter
  if (sizeof($user->field_home_chapter) == 0) {
    $user->field_home_chapter[LANGUAGE_NONE][0]['target_id'] =  $entity_id;
    user_save($user);
  }
}

// If leaving home chapter, also remove home chapter from profile
function tm_chapters_flag_unflag($flag, $entity_id, $account, $flagging) {

  // only listen for signup to chapter
  if ($flag->name != 'signup') {
    return;
  }

  // get user who unflagged
  $user = user_load($account->uid);

  // nothing to do if user doesn't have a home chapter
  if (sizeof($user->field_home_chapter) == 0) {
    return;
  }

  // fetch list of chapters the user has joined
  $chapters_nids = array();
  $flags = flag_get_user_flags("node", null, $account->uid);
  foreach ($flags as $flag_name => $flag) {
    if ($flag_name == "signup") {
      foreach($flag as $f) {
        $chapters_nids[] = $f->entity_id;
      }
    }
  }

  // remove unflagging chapter from list of user's chapters
  if(($key = array_search($entity_id, $chapters_nids)) !== false) {
    unset($chapters_nids[$key]); 
  }

  // check if user is no longer in their home chapter
  $home_chapter_id = $user->field_home_chapter[LANGUAGE_NONE][0]['target_id'];
  if (array_search($home_chapter_id, $chapters_nids) !== true) {
    // Remove home chapter
    $user->field_home_chapter[LANGUAGE_NONE] = array();
    user_save($user);
  }

}

// Add sort toggles to chapters page
function tm_chapters_page_alter(&$page) {

  // Split url parts
  $url_parts = explode("/", request_path());

  // catch either:
  // /chapters
  // /chapters/sort/title
  if (($url_parts[0] == "chapters") and ((sizeof($url_parts) == 1) or (sizeof($url_parts) == 3))) {

    // don't show on special chapters page
    // ie: invitations, contact, unapproved-members, insights, export
    if (sizeof($url_parts) == 3) {
      if (in_array($url_parts[2], array("invitations", "contact", "unapproved-members", "insights", "export"))) {
        return;
      }
    }

    $sort = "members"; // default sort method
    if (sizeof($url_parts) == 3) {
      $sort = $url_parts[2]; // ie: title for /chapters/sort/title
    }
   
    // create css classes
    if ($sort == "members") { $members_active = "is-active active"; } else { $members_active = ""; }
    if ($sort == "title") { $title_active = "is-active active"; } else { $title_active = ""; }
    if ($sort == "created") { $created_active = "is-active active"; } else { $created_active = ""; }

    // create button css
    $html = '
    <ul class="tabs-primary tabs primary">
      <li class="tabs-primary__tab ' . $members_active . '">
        <a href="/chapters" class="tabs-primary__tab-link '.$members_active.'">Members</a>
      </li>
      <li class="tabs-primary__tab ' . $title_active . '">
        <a href="/chapters/sort/title" class="tabs-primary__tab-link '.$title_active.'">A &rarr; Z</a>
      </li>
      <li class="tabs-primary__tab ' . $created_active . '">
        <a href="/chapters/sort/created" class="tabs-primary__tab-link '.$created_active.'">New</a>
      </li>
    </ul>';

    // add html to page header
    $page['header'] = array('#markup' => $html);

  }
}

/**
 * Prevent moderators to delete chapters that have members
 */
function tm_chapters_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "chapter_node_form") {
    $chapter_id = $form['nid']['#value'];
    if (!_tm_chapters_check_moderator_delete($chapter_id)) {
      unset($form['actions']['delete']);
    }
  }
}

/**
 * Prevent moderators to delete chapters that have members
 */
function tm_chapters_form_node_delete_confirm_alter(&$form, &$form_state, $form_id) {

  // Check if we have a node id and stop if not
  if (empty($form['nid']['#value'])) {
    return;
  }
  
  // Load the node from the form
  $chapter_id = $form['nid']['#value'];
  if (!_tm_chapters_check_moderator_delete($chapter_id)) {
   drupal_access_denied();
  }
}

/**
 * Check if chapter can be removed by a moderator
 */
function _tm_chapters_check_moderator_delete($chapter_id) {

  global $user;
  if (in_array("moderator", $user->roles)) { 

    $flag = flag_get_flag('signup');
    $amount_members = $flag->get_count($chapter_id);

    if ($amount_members > 0) {
      // chapter has members
      return false;
    }
  }

  return true; 
}

/* Modify views */
function tm_chapters_views_pre_view(&$view, &$display_id, &$args) {
  // unapproved-members page: set argument to node id (instead of chapter name slug)
  if (($display_id == "unapproved_members_in_chapter") && ($view->name == "unapproved_users")) {
    $nid = _orig_nid();
    $args[0] = $nid;
  }

}

/* Set default images */
/* Refer to settings.php configuration */
function tm_chapters_preprocess_field(&$variables) {
  
  global $conf;

  // Check element type
  $element_type = null;
  if (isset($variables['element']['#object']->type)) {
    $element_type = $variables['element']['#object']->type;
  }

  // Only operate on event
  if ($element_type != "chapter") {
    return;
  }


  // Replace default cover image
  if ($variables['element']['#field_name'] == 'field_image') {
    $variables['items'][0]['#item']['uri'] = _tm_chapters_get_default_image($variables['items'][0]['#item']['uri'], $variables['element']['#object']->nid);
  }

}

/**
 * Return default cover image
 * If tm_images_default_path is set then return a random image based in node id
 * URL must be in public:// format
 */
function _tm_chapters_get_default_image($default_image_uri, $nid) {

  global $conf;

  if (isset($conf["tm_images_default_path"])) {
    if (($default_image_uri == $conf["tm_images_default_field_image"])or ($default_image_uri == "")) {
      $cover_files = $conf["tm_images_default_cover_chapter"];
      $image_index = $nid % sizeof($cover_files);
      $cover_file = $conf["tm_images_default_path"] . $cover_files[$image_index];
      return $cover_file;
    }
  }

  // no random image, return what we got
  return $default_image_uri;
}


