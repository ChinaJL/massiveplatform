<?php
/**
 * @file
 * Code for the TM Search API feature.
 */

include_once 'tm_search_api.features.inc';
include_once 'includes/callback_role_filter_multi.inc';
include_once 'includes/tm_search_api_excerpt.php';

/* 

This module implements a search_api_db based search.

Helpful Resources:
http://drupal.stackexchange.com/questions/107345/programmatical-use-of-search-api
http://enzolutions.com/articles/2015/06/10/how-to-customize-a-search-api-filters-in-drupal-7/
https://www.drupal.org/project/search_api_multi
http://drupal.stackexchange.com/questions/118282/how-to-search-both-users-and-nodes-simultaneously-in-drupal-7
https://www.phase2technology.com/blog/expanding-indexed-content-with-search-api-data-alterations/
https://www.drupal.org/node/2043339#comment-7654017 (search_api_db doesn't support phrase searches)

*/

/**
 * Implements hook_menu().
 */
function tm_search_api_menu_alter(&$items) {

  	// Add our own custom search 
  	// If search module enabled, this will override the path

	$items["search"] = array(
        'title' => "Search",
        'description' => "Search Page",
        'page callback' => 'tm_search_api_view',
        'page arguments' => array('tm_search_api_page_view'),
        'access callback' => 'tm_search_api_page_access',
        'type' => MENU_CALLBACK,
      );

 	$items['search/results'] = array(
 	  'page callback' => 'tm_search_api_ajax',
      'access arguments' => array('access content')

   	);
}

/**
 * Implements hook_search_api_alter_callback_info().
 */
function tm_search_api_search_api_alter_callback_info() {

	$callbacks['search_api_alter_role_filter_multi'] = array(
		'name' => t('Role filter (Multi-index)'),
		'description' => t('Exclude users from indexing based on their role (multi-index).'),
		'class' => 'SearchApiAlterRoleFilterMulti',
		// Filters should be executed first.
		'weight' => -10,
	);

	return $callbacks;
}

/* Search access */
function tm_search_api_page_access() {
	return true;
}

/* Search view */
function tm_search_api_view() {

	global $conf;
	global $user;

	// css and js
	drupal_add_css(drupal_get_path('module', 'tm_search_api') . '/css/search-results.css');
	drupal_add_js(drupal_get_path('module', 'tm_search_api') . '/js/search-results.js');

	// load template
	$template = file_get_contents(drupal_get_path('module', 'tm_search_api') .'/templates/tm_search_api_form.tpl.php');

	// add search tips and no results text from conf
	$search_tips = "";
	foreach ($conf["tm_search_api_tips"] as $search_tip) {
		$search_tips .= "<p class='search tip'><span class='search tip-prefix'>Tip &raquo; </span>" . $search_tip . "</p>";
	}
	$template = str_replace("__SEARCH_TIPS__", $search_tips, $template);
	$template = str_replace("__NO_RESULTS_TEXT__", $conf["tm_search_api_no_results_text"], $template);
	$template = str_replace("__SEARCH_WELCOME_MESSAGE__", tm_search_api_welcome_message(), $template);
	$template = str_replace("__SEARCH_HELP_TEXT__", $conf["tm_search_api_help_text"], $template);
	$template = str_replace("__SEARCH_HELP_TIPS__", $conf["tm_search_api_help_tips"], $template);

	// create form
	$form['html'] = array(
    	'#type' => 'item',
    	'#markup' => $template,
  	);
  	return $form;

}

/* Create welcome text */
function tm_search_api_welcome_message() {

	// check cache
	$cache = cache_get('tm-search-api-welcome-message', 'cache');
	if (!empty($cache)) {
		return($cache->data);
	}
	
	// number of members
	$query = "SELECT COUNT(*) amount FROM {users} u";
	$num_members = db_query($query)->fetch();
	$num_members = $num_members->amount;

	// number of organizations
	$query = "SELECT COUNT(*) amount FROM {node} n ".
	      	 "WHERE n.type = :type";
	$num_organizations = db_query($query, array(':type' => "organization"))->fetch();
	$num_organizations = $num_organizations->amount;

	$members_rounded = floor($num_members / 100) * 100;
	$organizations_rounded = floor($num_organizations / 100) * 100;

	// example:
	// Discover over 18,000 members and 1,200 companies
	$welcome_message = "Discover more than " . number_format($members_rounded) . " members and " . number_format($organizations_rounded) . " companies";

	// return api data in json format
  	//cache_set('tm-search-api-welcome-message', $welcome_message, 'cache', time() + 900); // 15 mins
	return $welcome_message;
}

/* Helper method to init query options array */
function tm_search_api_init_option($query_options, $key) {
	if (isset($query_options[$key])) {
		return $query_options[$key];
	}
	return array(); // empty array if no options
}

/* 
	Split query into options and keywords
	Returns an array with the following:
	- search_keywords - Sydney, Thailand, etc
	- query_options - in:Australia role:Founder, etc
	- search_query_no_options - search query with options removed
*/
function tm_search_parse_search_query($search_query) {

	global $conf;
	mb_internal_encoding('UTF-8'); // for regex

	// Step 1. Match search options

	// ie: 
	// in:Australia has:twitter role:CEO
	// notes:
	// - lowercase the options key
	// - will match quotes (ie: "San Francisco")
	// - accepts up to once space between key and : - ie: "role: CEO"
	$query_options = array();
	$raw_query_options = array(); // keep track so we can remove them from search query
	preg_match_all('/([A-Za-z]{1,16}):\s{0,1}(\".*?\"|.*?)(\s|$)/m', $search_query, $matches);

	$max_options = 8; // maximum number of search options allowed
	$num_options = sizeof($matches[0]);
	for($i = 0; (($i < $num_options) && ($i < $max_options)); $i++) {
		$option_key = strtolower($matches[1][$i]);
		$option_value = strtolower($matches[2][$i]);
		$option_value = trim(str_replace("\"", "", $option_value)); // remove quotes ie: "San Francisco"
		if (!array_key_exists($option_key, $query_options)) {
			$query_options[$option_key] = array();
		}
		$query_options[$option_key][] = $option_value;
		$raw_query_options[] = $matches[0][$i];
	}

	// Step 2. Remove options from search query
	$search_query_no_options = $search_query;
	foreach ($raw_query_options as $raw_query_option) {
		$search_query_no_options = str_replace($raw_query_option, "", $search_query_no_options);
	}

	// Step 3. Extract search keywords from search query
	// Split search string into keywords, preserving keywords contained in quotes
	// http://stackoverflow.com/questions/2202435/php-explode-the-string-but-treat-words-in-quotes-as-a-single-word
	preg_match_all('/"(?:\\\\.|[^\\\\"])*"|\S+/m', $search_query_no_options, $keyword_matches);
	// remove quotes from keywords
	$search_terms = array();
	foreach ($keyword_matches[0] as $keyword) {
		$keyword = str_replace("\"", "", $keyword);
		$keyword = str_replace("'", "", $keyword);
		$search_terms[] = trim($keyword);
	}

	// Step 4. Remove one and two letter words from search
	$allowed_words = array();
	foreach ($search_terms as $search_term) {
		if (strlen($search_term) > 2) {
			$allowed_words[] = $search_term;
		}
	}
	$search_terms = $allowed_words;

	// Step 5. Limit search terms
	$max_search_terms = 8; // default
	if (isset($conf["tm_search_api_max_search_terms"])) {
		$max_search_terms = $conf["tm_search_api_max_search_terms"];
	}
	if (sizeof($search_terms) > $max_search_terms) {
		$search_terms = array_slice($search_terms, 0, $max_search_terms);
	}

	// (Testing) Step 7. Pluralize search terms
	// If partial matching is turned off on search server, this might help get some extra results
	// Also de-pluralize. ie: nomads = "nomads", "nomad"
	if ($conf["tm_search_api_pluralize_keywords"]) {
		foreach($search_terms as $search_term) {
			if (strtolower((substr($search_term, -1) == "s"))) {
				// remove an s
				$search_terms[] = rtrim($search_term, "s");
			} else {
				// add an s
				$search_terms[] = $search_term . "s";
			}
		}
	}

	return array("search_terms" => $search_terms, 
				 "search_query_no_options" => $search_query_no_options, 
				 "query_options" => $query_options);
}


/* Fetch search results */
function tm_search_api_fetch_results($query_array) {
	
	global $conf;
	global $user;

	// Create cache key using md5 sum of unique string of the search
	$cache_key_unique_string = $query_array["search_query"] . "_" .(int)(user_is_logged_in()) . "_" . (int)$query_array["filter_people"] . "_" . (int)$query_array["filter_events"] . "_" . (int)$query_array["filter_past_events"] . "_" . (int)$query_array["filter_chapters"] . "_" . (int)$query_array["filter_companies"] . "_" . (int)$query_array["page"];
	if (isset($query_array["limit_num_results"])) {
		$cache_key_unique_string .= "_" . $query_array["limit_num_results"];
	}
	$cache_key = "tm-search-api-" . md5($cache_key_unique_string);

	// Check cache_key
	if ($conf['tm_search_cache_results_seconds'] > 0) {
	  	$cache = cache_get($cache_key, 'cache');
	  	if (!empty($cache)) {
	  		$cache->data['tm_debug_results_cached'] = true;
	  		$cache->data['performance']['complete'] = 0.01; // since we got it from cache
	    	return($cache->data);
  		}
	}
	
	// Step 1. Get search options
	$search_query = $query_array["search_query"];
	$filter_people = $query_array["filter_people"];
	$filter_events = $query_array["filter_events"];
	$filter_past_events = $query_array["filter_past_events"];
	$filter_chapters = $query_array["filter_chapters"];
	$filter_companies = $query_array["filter_companies"];
	$page = $query_array["page"];	

	// page offset
	$num_results_per_page = 10; // default
	if (isset($conf["tm_search_api_results_per_page"])) {
		$num_results_per_page = $conf["tm_search_api_results_per_page"];
	}
	$offset = ($page - 1) * $num_results_per_page;
	if (isset($query_array["limit_num_results"])) {
		if ($query_array["limit_num_results"] == 0) {
			return tm_search_api_empty_results_array();
		}
		$offset = 0;
		$num_results_per_page = $query_array["limit_num_results"];
	}

	// Step 2. Parse search query 
	// Break into into search terms and options, and create option arrays
	$parsed = tm_search_parse_search_query($search_query);
	$search_terms = $parsed["search_terms"];
	$search_query_no_options = $parsed["search_query_no_options"];
	$query_options = $parsed["query_options"];

	// initialise option arrays
	$in_queries = tm_search_api_init_option($query_options, "in"); // in:Australia
	$segment_queries = tm_search_api_init_option($query_options, "segment"); // segment:marketing
	$has_queries = tm_search_api_init_option($query_options, "has"); // has:Snapchat
	$role_queries = tm_search_api_init_option($query_options, "role"); // role:CEO
	$at_queries = tm_search_api_init_option($query_options, "at"); // at:Skyscanner
	$flag_queries = tm_search_api_init_option($query_options, "flag"); // flag:sponsor

	// If no options enabled
	// then turn any filters off if all keywords are ignored by filter
	if ((sizeof($in_queries) == 0)
		&& (sizeof($segment_queries) == 0)
		&& (sizeof($has_queries) == 0)
		&& (sizeof($role_queries) == 0)
		&& (sizeof($at_queries) == 0)
		&& (sizeof($flag_queries) == 0)) {

		$filter_people = check_filter_enabled($search_terms, $filter_people, "people");
		$filter_events = check_filter_enabled($search_terms, $filter_events, "events");
		$filter_past_events = check_filter_enabled($search_terms, $filter_past_events, "events");
		$filter_chapters = check_filter_enabled($search_terms, $filter_chapters, "chapters");
		$filter_companies = check_filter_enabled($search_terms, $filter_companies, "companies");
	}
	
	// Step 3. Initialise search api query
	$query = search_api_query('tm_search_multi_index');

	// Step 4. Create option filters
	$query_filter_in = $query->createFilter('OR'); // ie: in:Japan
	$query_filter_segment = $query->createFilter('OR'); // ie: segment:marketing
	$query_filter_has = $query->createFilter('OR'); // ie: has:snapchat
	$query_filter_role = $query->createFilter('OR'); // ie: role:founder
	$query_filter_at = $query->createFilter('OR'); // ie: at:expedia
	$query_filter_flag = $query->createFilter('OR'); // ie: flag:sponsor

	// Check we have at least one filter
	if (!$filter_people 
		&& !$filter_events 
		&& !$filter_past_events 
		&& !$filter_chapters
		&& !$filter_companies
		&& (sizeof($in_queries) == 0)
		&& (sizeof($segment_queries) == 0)
		&& (sizeof($has_queries) == 0)
		&& (sizeof($role_queries) == 0)
		&& (sizeof($at_queries) == 0)
		&& (sizeof($flag_queries) == 0)) {

		// return empty results
		return tm_search_api_empty_results_array();
	}

	// PEOPLE FILTER
	if ($filter_people) {

		// Create base and keywor filters
		$query_filter_people_base = $query->createFilter('AND');
		$query_filter_people = $query->createFilter('OR');
		
		// User type
		$query_filter_people_base->condition('item_type', 'user');

		// Match first and last name
		// We try in this order:
		// Case 1. If single query is in quotes, try to match first and last name from word parts
		// Case 2. If query is two words, try to match first and last name
		// Case 3. Else, try first and last name on all keywords

		// Case 1. If single query and in quotes, split into two parts and try search_terms
		
		// Adjust if tm_search_api_pluralize_keywords is enabled
		$sizeof_terms = 1;
		if ($conf["tm_search_api_pluralize_keywords"]) {
			$sizeof_terms = 2;
		}
		if ((sizeof($search_terms) == $sizeof_terms) && (strpos($search_terms[0], " ") !== false)) {

			$parts = explode(" ", $search_terms[0]);
			$query_filter_people_name = $query->createFilter('AND');
			$query_filter_people_name->condition('user:field_user_first_name', $parts[0]);
			$query_filter_people_name->condition('user:field_user_last_name', $parts[1]);
			$query_filter_people_base->filter($query_filter_people_name);
	
			$query_filter_people->condition('user:field_user_first_name', $parts[0]);
			$query_filter_people->condition('user:field_user_last_name', $parts[1]);

			// also match username as it's created with first and last name
			$query_filter_people->condition('user:name', $search_terms[0] . $parts[1]);

		} else {

			// Adjust if tm_search_api_pluralize_keywords is enabled
			$sizeof_terms = 2;
			if ($conf["tm_search_api_pluralize_keywords"]) {
				$sizeof_terms = 4;
			}

			// Case 2. If only two search terms, attempt first and last name match
			if (sizeof($search_terms) == $sizeof_terms) {
				$query_filter_people->condition('user:field_user_first_name', $search_terms[0]);
				$query_filter_people->condition('user:field_user_last_name', $search_terms[1]);

				// also match username as it's created with first and last name
				$query_filter_people->condition('user:name', $search_terms[0] . $search_terms[1]);

			} else {

				//Case 3. Try first and last name on all keywords
				foreach ($search_terms as $search_term) {
					$query_filter_people->condition('user:field_user_first_name', $search_term);
					$query_filter_people->condition('user:field_user_last_name', $search_term);
				}
			}

		}

		// Other user fields
		foreach ($search_terms as $search_term) {

			// ignore specific keywords
			if (check_is_ignored_keyword($search_term, "people")) { continue; }

			$query_filter_people->condition('user:field_about_me', $search_term);

			$query_filter_people->condition('user:field_location_city', $search_term);
			$query_filter_people->condition('user:field_user_country:name', $search_term);
			$query_filter_people->condition('user:field_user_country:official_name', $search_term);

			$query_filter_people->condition('user:field_job_organization', $search_term);
			$query_filter_people->condition('user:field_job_role', $search_term);

			$query_filter_people->condition('user:field_segment:name', $search_term);
			$query_filter_people->condition('user:field_segment:parent:name', $search_term);

			$query_filter_people->condition('user:field_link_website:url', $search_term);
			$query_filter_people->condition('user:field_link_snapchat:url', $search_term);
			$query_filter_people->condition('user:field_link_twitter:url', $search_term);
			$query_filter_people->condition('user:field_link_instagram:url', $search_term);
			$query_filter_people->condition('user:field_link_facebook:url', $search_term);
			$query_filter_people->condition('user:field_link_linkedin:url', $search_term);
			$query_filter_people->condition('user:field_link_youtube:url', $search_term);
			$query_filter_people->condition('user:field_link_vimeo:url', $search_term);

			$query_filter_people->condition('user:field_user_question_1', $search_term);
			$query_filter_people->condition('user:field_user_question_2', $search_term);
			$query_filter_people->condition('user:field_user_question_3', $search_term);
			$query_filter_people->condition('user:field_user_question_4', $search_term);
			$query_filter_people->condition('user:field_user_question_5', $search_term);

			// let approved members search by email address
			if (user_is_logged_in()) {
				if (in_array("approved user", $user->roles)) {
					$query_filter_people->condition('user:mail', $search_term);
				}
			}

			// add keyword filters to base filter
			$query_filter_people_base->filter($query_filter_people);
		}

		// in:field
		foreach ($in_queries as $in_query) {

			// ignore specific keywords
			if (check_is_ignored_keyword($in_query, "people")) { continue; }

			$query_filter_in->condition('user:field_location_city', $in_query);
			$query_filter_in->condition('user:field_user_country:name', $in_query);
			$query_filter_in->condition('user:field_user_country:official_name', $in_query);
			$query_filter_in->condition('user:field_user_country:continent_name', $in_query);
		}

		// segment:field
		foreach ($segment_queries as $segment_query) {

			// ignore specific keywords
			if (check_is_ignored_keyword($segment_query, "people")) { continue; }

			$query_filter_segment->condition('user:field_segment:name', $segment_query);
			$query_filter_segment->condition('user:field_segment:parent:name', $segment_query);
		}

		// has:field
		if (in_array("website", $has_queries)) {
			$query_filter_has->condition('user:field_link_website:url', null, '<>');
		}
		if (in_array("snapchat", $has_queries)) {
			$query_filter_has->condition('user:field_link_snapchat:url', null, '<>');
		}
		if (in_array("twitter", $has_queries)) {
			$query_filter_has->condition('user:field_link_twitter:url', null, '<>');
		}
		if (in_array("instagram", $has_queries)) {
			$query_filter_has->condition('user:field_link_instagram:url', null, '<>');
		}
		if (in_array("facebook", $has_queries)) {
			$query_filter_has->condition('user:field_link_facebook:url', null, '<>');
		}
		if (in_array("linkedin", $has_queries)) {
			$query_filter_has->condition('user:field_link_linkedin:url', null, '<>');
		}
		if (in_array("youtube", $has_queries)) {
			$query_filter_has->condition('user:field_link_youtube:url', null, '<>');
		}
		if (in_array("vimeo", $has_queries)) {
			$query_filter_has->condition('user:field_link_vimeo:url', null, '<>');
		}

		// role:field
		foreach ($role_queries as $role_query) {

			// ignore specific keywords
			if (check_is_ignored_keyword($role_query, "people")) { continue; }

			$query_filter_role->condition('user:field_job_role', $role_query);
		}

		// at:field
		foreach ($at_queries as $at_query) {

			// ignore specific keywords
			if (check_is_ignored_keyword($at_query, "people")) { continue; }

			$query_filter_at->condition('user:field_job_organization', $at_query);
		}
		
	}

	// EVENTS FILTER
	// Note: Won't filter by date without a keyword. ie: "in:Sydney" returns all results
	if ($filter_events || $filter_past_events) {

		// Create base and keyword filters
		$query_filter_events_base = $query->createFilter('AND');
		$query_filter_events = $query->createFilter('OR');

		// Event type
		$query_filter_events_base->condition('node:type', 'event');

		foreach ($search_terms as $search_term) {

			// ignore specific keywords
			if (check_is_ignored_keyword($search_term, "events")) { continue; }

			$query_filter_events->condition('node:title', $search_term);
			$query_filter_events->condition('node:body:value', $search_term);
			$query_filter_events->condition('node:field_location', $search_term);
			$query_filter_events->condition('node:field_chapter:title', $search_term);
		}

		// Only search future events unless filter_past_events enabled
		$query_filter_events_date = $query->createFilter('OR');

		if ($filter_events) {
			$yesterday = new DateTime('yesterday');
			$query_filter_events_date->condition('node:field_event_date:value', $yesterday->getTimeStamp(), '>=');

		}
		if ($filter_past_events) {
			$today = new DateTime('today');
			$query_filter_events_date->condition('node:field_event_date:value', $today->getTimestamp(), '<=');
		}

		// add keyword filters to base filter
		$query_filter_events_base->filter($query_filter_events);
		$query_filter_events_base->filter($query_filter_events_date);

	}

	// CHAPTERS FILTER
	if ($filter_chapters) {

		// Create base and keywor filters
		$query_filter_chapters_base = $query->createFilter('AND');
		$query_filter_chapters = $query->createFilter('OR');

		// Chapter type
		$query_filter_chapters_base->condition('node:type', 'chapter');

		foreach ($search_terms as $search_term) {

			// ignore specific keywords
			if (check_is_ignored_keyword($search_term, "chapters")) { continue; }

			$query_filter_chapters->condition('node:title', $search_term);
			$query_filter_chapters->condition('node:body:value', $search_term);

			$query_filter_chapters->condition('node:field_country:name', $search_term);
			$query_filter_chapters->condition('node:field_country:official_name', $search_term);
		}

		// add keyword filters to base filter
		$query_filter_chapters_base->filter($query_filter_chapters);

		// in:field
		foreach ($in_queries as $in_query) {

			// ignore specific keywords
			if (check_is_ignored_keyword($in_query, "chapters")) { continue; }

			$query_filter_in->condition('node:field_country:name', $in_query);
			$query_filter_in->condition('node:field_country:official_name', $in_query);
			$query_filter_in->condition('node:field_country:continent_name', $in_query);
		}
	}

	// COMPANIES FILTER
	if ($filter_companies) {

		// Create base and keyword filters
		$query_filter_companies_base = $query->createFilter('AND');
		$query_filter_companies = $query->createFilter('OR');

		// Organization type
		$query_filter_companies_base->condition('node:type', 'organization');

		foreach ($search_terms as $search_term) {

			// ignore specific keywords
			if (check_is_ignored_keyword($search_term, "companies")) { continue; }

			$query_filter_companies->condition('node:title', $search_term);
			$query_filter_companies->condition('node:body:value', $search_term);

			$query_filter_companies->condition('node:field_segment:name', $search_term);
			$query_filter_companies->condition('node:field_segment:parent:name', $search_term);

			$query_filter_companies->condition('node:field_location_city', $search_term);
			$query_filter_companies->condition('node:field_country:name', $search_term);
			$query_filter_companies->condition('node:field_country:official_name', $search_term);

			$query_filter_companies->condition('node:field_link_website:url', $search_term);
			$query_filter_companies->condition('node:field_link_snapchat:url', $search_term);
			$query_filter_companies->condition('node:field_link_twitter:url', $search_term);
			$query_filter_companies->condition('node:field_link_instagram:url', $search_term);
			$query_filter_companies->condition('node:field_link_facebook:url', $search_term);
			$query_filter_companies->condition('node:field_link_linkedin:url', $search_term);
			$query_filter_companies->condition('node:field_link_youtube:url', $search_term);
			$query_filter_companies->condition('node:field_link_vimeo:url', $search_term);
		}

		// in:field
		foreach ($in_queries as $in_query) {

			// ignore specific keywords
			if (check_is_ignored_keyword($in_query, "companies")) { continue; }

			$query_filter_in->condition('node:field_country:name', $in_query);
			$query_filter_in->condition('node:field_country:official_name', $in_query);
			$query_filter_in->condition('node:field_country:continent_name', $in_query);
		}

		// segment:field
		foreach ($segment_queries as $segment_query) {

			// ignore specific keywords
			if (check_is_ignored_keyword($segment_query, "companies")) { continue; }

			$query_filter_segment->condition('node:field_segment:name', $segment_query);
			$query_filter_segment->condition('node:field_segment:parent:name', $segment_query);
		}

		// has:field
		if (in_array("website", $has_queries)) {
			$query_filter_has->condition('node:field_link_website:url', null, '<>');
		}
		if (in_array("snapchat", $has_queries)) {
			$query_filter_has->condition('node:field_link_snapchat:url', null, '<>');
		}
		if (in_array("twitter", $has_queries)) {
			$query_filter_has->condition('node:field_link_twitter:url', null, '<>');
		}
		if (in_array("instagram", $has_queries)) {
			$query_filter_has->condition('node:field_link_instagram:url', null, '<>');
		}
		if (in_array("facebook", $has_queries)) {
			$query_filter_has->condition('node:field_link_facebook:url', null, '<>');
		}
		if (in_array("linkedin", $has_queries)) {
			$query_filter_has->condition('node:field_link_linkedin:url', null, '<>');
		}
		if (in_array("youtube", $has_queries)) {
			$query_filter_has->condition('node:field_link_youtube:url', null, '<>');
		}
		if (in_array("vimeo", $has_queries)) {
			$query_filter_has->condition('node:field_link_vimeo:url', null, '<>');
		}

		// flag:sponsor
		if (in_array("sponsor", $flag_queries)) {
			$query_filter_flag->condition('node:flag_tm_sponsor', true);
		}

		// add keyword filters to base filter
		$query_filter_companies_base->filter($query_filter_companies);
	}

	// Step 5. Attach filters
	$search_filter = $query->createFilter('AND'); // main search filter
	
    // keyword filters
    if (sizeof($search_terms) > 0) {
		$keyword_filter = $query->createFilter('OR'); // keyword search, ie: Sydney
		if ($filter_people) {
			$keyword_filter->filter($query_filter_people_base);
		}
		if ($filter_events || $filter_past_events) {
			$keyword_filter->filter($query_filter_events_base);
		}
		if ($filter_chapters) {	
			$keyword_filter->filter($query_filter_chapters_base);
		}
		if ($filter_companies) {
			$keyword_filter->filter($query_filter_companies_base);
		}
	}

    // option filters
    $options_filter = $query->createFilter('AND'); // option search, ie: in:Thailand
    $options_filter_types = $query->createFilter('OR');

    // set types on options filter
	if ($filter_people) {
		$options_filter_types->condition('item_type', 'user');
	}
	if ($filter_events || $filter_past_events) {
		$options_filter_types->condition('node:type', 'event');
	}
	if ($filter_chapters) {	
		$options_filter_types->condition('node:type', 'chapter');
	}
	if ($filter_companies) {
		$options_filter_types->condition('node:type', 'organization');
	}
	$options_filter->filter($options_filter_types);

	// add different option
	if (sizeof($in_queries) > 0) {
		$options_filter->filter($query_filter_in);
	}
	if (sizeof($segment_queries) > 0) {
		$options_filter->filter($query_filter_segment);
	}
	if (sizeof($has_queries) > 0) {
		$options_filter->filter($query_filter_has);
	}
	if (sizeof($role_queries) > 0) {
		$options_filter->filter($query_filter_role);
	}
	if (sizeof($at_queries) > 0) {
		$options_filter->filter($query_filter_at);
	}
	if (sizeof($flag_queries) > 0) {
		$options_filter->filter($query_filter_flag);
	}

	// attach type, keyword, option filters to main search filter
	if (sizeof($search_terms) > 0) {
		$search_filter->filter($keyword_filter);
	}
	$search_filter->filter($options_filter);
	$query->filter($search_filter);

	// Step 6. Set Range
	$query->range($offset, $num_results_per_page);

	// Step 7. Run query
	$results = $query->execute();

	// Step 8. Add extra meta data

	// Check last page
	$results['last page'] = "false";
	if ($offset + $num_results_per_page >= $results['result count']) { 
		$results['last page'] = "true";
	}

	// Debugging information
	$results['tm_debug_search_raw_query'] = $query_array["search_query"];
	$results['tm_debug_search_keywords'] = $search_terms;
	$results['tm_debug_search_options'] = $query_options;
	$results['tm_debug_results_cached'] = false;

	// Step 9. Cache result
	if ($conf['tm_search_cache_results_seconds'] > 0) {
		cache_set($cache_key, $results, 'cache', time() + $conf['tm_search_cache_results_seconds']);
	}

	// Step 10. Return result set
	return $results;
}

/* Return html search results for search page */
function tm_search_api_ajax() {

	global $user;
	global $conf;

	// Step 1. Check input
	if (!isset($_GET["query"])) {
		return;
	}

	$page = 1;
	if (isset($_GET["page"])) {
		$page = intval($_GET["page"]);
	}
	if ($page == 0) { 
		return;
	}

	// Step 2. Don't allow anonymous users see beyond first page
	if (($user->uid == 0) && ($page > 1)) {
		return;
	}

	// Step 3. Get user input
	$search_query = trim($_GET["query"]);
	
	$filter_people = true;
	$filter_events = true;
	$filter_past_events = false;
	$filter_chapters = true;
	$filter_companies = true;

	if (isset($_GET["filter_people"])) {
		$filter_people = ($_GET["filter_people"] == "true");
	}
	if (isset($_GET["filter_events"])) {
		$filter_events = ($_GET["filter_events"] == "true");
	}
	if (isset($_GET["filter_past_events"])) {
		$filter_past_events = ($_GET["filter_past_events"] == "true");
	}
	if (isset($_GET["filter_chapters"])) {
		$filter_chapters = ($_GET["filter_chapters"] == "true");
	}
	if (isset($_GET["filter_companies"])) {
		$filter_companies = ($_GET["filter_companies"] == "true");
	}

	// Check we have at least one filter
	if (!$filter_people 
		&& !$filter_events 
		&& !$filter_past_events 
		&& !$filter_chapters
		&& !$filter_companies) {
		return;
	}

	// Step 4. Construct query array
	$query = array("search_query" => $search_query,
				   "filter_people" => $filter_people,
				   "filter_events" => $filter_events,
				   "filter_past_events" => $filter_past_events,
				   "filter_chapters" => $filter_chapters,
				   "filter_companies" => $filter_companies,
				   "page" => $page,
				   );

	
	// Step 5. Run query
	// Catch excections if they occur
	try {

		// If query is not single word and not in quotes, perform additional query
		// Perform exact match query and put this at the top
		// This helps to bring exact match names to the top: ie: Travel Massive, etc
		// Only operate on first page
		// Note: search_api_db does not perform exact matching so this may not work exactly as expected
		// see: https://www.drupal.org/node/2043339#comment-7654017

		$insert_top_results = array(); // results to insert
		$performance_time = 0; // keep track of performance time
		$num_top_matches = $conf["tm_search_api_num_top_results"];
		$top_results = array();
		if ((strpos($query["search_query"], '"') === false)
			&& (strpos($query["search_query"], ' ') !== false)) {

			$search_exact_query = $query;
			$search_exact_query["page"] = 1;
			$search_exact_query["search_query"] = '"' . $query["search_query"] . '"';
			$search_exact_query["limit_num_results"] = $num_top_matches; // how many exact matches to insert to top
			
			// Perform search for top matches
			$results = tm_search_api_fetch_results($search_exact_query);
			$top_results = $results['results'];

			// Insert top results for quote match and insert at top
			$performance_time = $results['performance']['complete']; // keep track of performance time
		}
		
		// Search general search terms
		$results = tm_search_api_fetch_results($query);

		// Merge top_results and results
		if ($query["page"] == 1) {
			// first page, top_results go at top
			$all_results = array_merge($top_results, $results['results']);
		} else {
			// subsequent pages, hide any top_results
			$all_results = array();
			foreach($results['results'] as $result) {
				if (!array_key_exists($result['id'], $top_results)) {
					$all_results[$result['id']] = $result;
				}
			}
		}

		$results['results'] = $all_results;
		$results['performance']['complete'] = $results['performance']['complete'] + $performance_time;

	} catch (Exception $e) {
		if ($conf["tm_search_api_catch_exceptions"]) {
			$html = "Sorry, a search error occured.";
			echo $html;
			drupal_exit();
		} else {
			throw $e;
		}	
	}
	
	// Step 6. Render results
	$html = tm_search_api_render_results_html($results, $search_query);

	// Step 7. Hidden fields for result meta data
	$html .= "<div id='search-results-meta' style='display:none'>";
	$html .= "<input type='hidden' id='search-results-last-page' value='" . $results['last page'] . "'>";
	$html .= "<input type='hidden' id='search-results-total' value='" . $results['result count'] . "'>";
	$html .= "<input type='hidden' id='search-results-time' value='" . round($results['performance']['complete'], 2) . "'>";

	$html .= "<input type='hidden' id='search-results-raw-query' value='" . json_encode($results['tm_debug_search_raw_query']) . "'>";
	$html .= "<input type='hidden' id='search-results-keywords' value='" . json_encode($results['tm_debug_search_keywords']) . "'>";
	$html .= "<input type='hidden' id='search-results-options' value='" . json_encode($results['tm_debug_search_options']) . "'>";
	$html .= "<input type='hidden' id='search-results-cached' value='" . json_encode($results['tm_debug_results_cached']) . "'>";


	$html .= "</div>";

	// Step 8. Return html
	echo $html;
	drupal_exit();
}

/* Render html results */
function tm_search_api_render_results_html($results, $search_query, $result_item_count = 0) {

	global $conf;

	$results_html_items = array();

	foreach ($results['results'] as $result) {

		$result_item_count++;

		// either "user/uid" or "node/nid";
		$parts = explode("/", $result['id']);

		// user result
		if ($parts[0] == "user") {
			$results_user = user_load($parts[1]);
			$results_html_items[] = tm_search_api_render_result_user($result, $results_user, $search_query, $result_item_count);
		}

		// node (chapter, event, company)
		if ($parts[0] == "node") {

			$node = node_load($parts[1]);

			// chapter result
			if ($node->type == "chapter") {
				$results_html_items[] = tm_search_api_render_result_chapter($result, $node, $search_query, $result_item_count);
			}

			// event result
			if ($node->type == "event") {
				$results_html_items[] = tm_search_api_render_result_event($result, $node, $search_query, $result_item_count);
			}

			// organization result
			if ($node->type == "organization") {
				$results_html_items[] = tm_search_api_render_result_organization($result, $node, $search_query, $result_item_count);
			}
		}

	}

	$results_html = implode("\n", $results_html_items);

	return $results_html;
}

/* Render user search result */
function tm_search_api_render_result_user($result, $results_user, $search_query, $result_item_count) {

	global $conf;

	// user image
	if (isset($results_user->field_avatar[LANGUAGE_NONE][0]['uri'])) {
		$image_url = image_style_url("avatar", $results_user->field_avatar[LANGUAGE_NONE][0]['uri']);
	} else {
		$default_image_uri = _tm_users_get_default_avatar($conf["tm_images_default_field_avatar"], $results_user->uid);
		$image_url = image_style_url("avatar", $default_image_uri);
	}

	// set render fields
	$result_url = drupal_get_path_alias("user/" . $results_user->uid);
	$result_image_url = $image_url;
	$result_title = l("People > " . $results_user->field_user_first_name[LANGUAGE_NONE][0]['value'] . " " . $results_user->field_user_last_name[LANGUAGE_NONE][0]['value'], $result_url, array('attributes' => array('target'=>'_blank')));

	// about
	$result_text = $results_user->field_about_me[LANGUAGE_NONE][0]['safe_value'];

	// location
	if (sizeof($results_user->field_location_city) > 0) {
		$result_text .= " | " . $results_user->field_location_city[LANGUAGE_NONE][0]['safe_value'];
	}

	// organization and role
	if (sizeof($results_user->field_job_organization) > 0) {
		$result_text .= " | " . $results_user->field_job_organization[LANGUAGE_NONE][0]['safe_value'];
	}
	if (sizeof($results_user->field_job_role) > 0) {
		$result_text .= " | " . $results_user->field_job_role[LANGUAGE_NONE][0]['safe_value'];
	}

	// segment
	if (sizeof($results_user->field_segment) > 0) {
		$taxonomy_term = taxonomy_term_load($results_user->field_segment[LANGUAGE_NONE][0]['tid']);
		$result_text .= " | " . $taxonomy_term->name;
		$taxonomy_parent = taxonomy_get_parents($taxonomy_term->tid);
		if ($taxonomy_parent) {
			$result_text .= " | " . array_values($taxonomy_parent)[0]->name . " > " . $taxonomy_term->name;
		} else {
			$result_text .= " | " . $taxonomy_term->name;
		}
	}

	// social links
	if (sizeof($results_user->field_link_website) > 0) {
		$result_text .= " | Website: " . $results_user->field_link_website[LANGUAGE_NONE][0]['url'];
	}
	if (sizeof($results_user->field_link_snapchat) > 0) {
		$result_text .= " | Snapchat: " . $results_user->field_link_snapchat[LANGUAGE_NONE][0]['url'];
	}
	if (sizeof($results_user->field_link_twitter) > 0) {
		$result_text .= " | Twitter: " . $results_user->field_link_twitter[LANGUAGE_NONE][0]['url'];
	}
	if (sizeof($results_user->field_link_instagram) > 0) {
		$result_text .= " | Instagram: " . $results_user->field_link_instagram[LANGUAGE_NONE][0]['url'];
	}
	if (sizeof($results_user->field_link_facebook) > 0) {
		$result_text .= " | Facebook: " . $results_user->field_link_facebook[LANGUAGE_NONE][0]['url'];
	}
	if (sizeof($results_user->field_link_linkedin) > 0) {
		$result_text .= " | LinkedIn: " . $results_user->field_link_linkedin[LANGUAGE_NONE][0]['url'];
	}
	if (sizeof($results_user->field_link_youtube) > 0) {
		$result_text .= " | YouTube: " . $results_user->field_link_youtube[LANGUAGE_NONE][0]['url'];
	}
	if (sizeof($results_user->field_link_vimeo) > 0) {
		$result_text .= " | Vimeo: " . $results_user->field_link_vimeo[LANGUAGE_NONE][0]['url'];
	}

	// user questions
	if (sizeof($results_user->field_user_question_1) > 0) {
		$result_text .= " | " . $results_user->field_user_question_1[LANGUAGE_NONE][0]['safe_value'];
	}
	if (sizeof($results_user->field_user_question_2) > 0) {
		$result_text .= " | " . $results_user->field_user_question_2[LANGUAGE_NONE][0]['safe_value'];
	}
	if (sizeof($results_user->field_user_question_3) > 0) {
		$result_text .= " | " . $results_user->field_user_question_3[LANGUAGE_NONE][0]['safe_value'];
	}
	if (sizeof($results_user->field_user_question_4) > 0) {
		$result_text .= " | " . $results_user->field_user_question_4[LANGUAGE_NONE][0]['safe_value'];
	}
	if (sizeof($results_user->field_user_question_5) > 0) {
		$result_text .= " | " . $results_user->field_user_question_5[LANGUAGE_NONE][0]['safe_value'];
	}

	$result_info = tm_search_api_result_highlight($result_text, $search_query); 

	// render item
	$html = tm_search_api_render_search_result($result_url, $result_image_url, $result_title, $result_info, $result_item_count);
	return $html;

}

/* Render chapter search result */
function tm_search_api_render_result_chapter($result, $chapter, $search_query, $result_item_count) {

	global $conf;

	// chapter image
	if (isset($chapter->field_image[LANGUAGE_NONE][0]['uri'])) {
		$image_url = image_style_url("banner", $chapter->field_image[LANGUAGE_NONE][0]['uri']);
	} else {
		$default_image_uri = _tm_chapters_get_default_image($conf["tm_images_default_field_image"], $chapter->nid);
		$image_url = image_style_url("banner", $default_image_uri);
	}

	// set render fields
	$result_url = drupal_get_path_alias("node/" . $chapter->nid);
	$result_image_url = $image_url;
	$result_title = l("Chapters > " . $chapter->title . " " . $conf["tm_site_name"], $result_url, array('attributes' => array('target'=>'_blank')));
	$result_text = $chapter->body[LANGUAGE_NONE][0]['safe_value'];

	// country
	if (sizeof($organization->field_country) > 0) {
		$country = country_load($organization->field_country[LANGUAGE_NONE][0]['iso2']);
		if ($country) {
			$result_text .= " | " . $country->label();
		}
	}

	$result_info = tm_search_api_result_highlight($result_text, $search_query); 

	// render item
    $html = tm_search_api_render_search_result($result_url, $result_image_url, $result_title, $result_info, $result_item_count);

	return $html;

}

/* Render event search result */
function tm_search_api_render_result_event($result, $event, $search_query, $result_item_count) {

	global $conf;

	// chapter image
	if (isset($event->field_image[LANGUAGE_NONE][0]['uri'])) {
		$image_url = image_style_url("banner", $event->field_image[LANGUAGE_NONE][0]['uri']);
	} else {
		$default_image_uri = _tm_events_get_default_image($conf["tm_images_default_field_image"], $event->nid);
		$image_url = image_style_url("banner", $default_image_uri);
	}

	// if event has chapter
	if (isset($event->field_chapter[LANGUAGE_NONE][0]['target_id'])) {
		$event_chapter = node_load($event->field_chapter[LANGUAGE_NONE][0]['target_id']);
		//$event_chapter->title;
	}

	// set render fields
	$result_url = drupal_get_path_alias("node/" . $event->nid);
	$result_image_url = $image_url;
	$result_title = l("Events > " . $event->title, $result_url, array('attributes' => array('target'=>'_blank')));

	// show when event is
	$current_date = new DateTime('now', new DateTimeZone('UTC'));
	$event_date = $event->field_event_date[LANGUAGE_NONE][0]['value'];
	$event_timezone = _tm_get_event_timezone($event);
	$event_datetime = new DateTime($event_date, new DateTimeZone($event_timezone));

	$seconds_ago = $event_datetime->format('U') - $current_date->format('U');
	if ($seconds_ago < 0) {
		$human_time = _tm_event_time_elapsed($seconds_ago * -1) . " ago";
	} else {
		$human_time = "in " . _tm_event_time_elapsed($seconds_ago);
	}

	$formatted_date = date_format(date_create($event_date),"F jS Y");
    $date_text = $formatted_date . " (" . $human_time . ") ";

    // event body
    $result_text = "";
	if (sizeof($event->body) > 0) {
		$result_text .= $event->body[LANGUAGE_NONE][0]['safe_value'];
	}

	// show location if allowed
	if ($event->field_event_hide_location[LANGUAGE_NONE][0]['value'] == 0) {
		$result_text .= " | " . $event->field_location[LANGUAGE_NONE][0]['safe_value'];
	} 
	$result_info = $date_text . tm_search_api_result_highlight($result_text, $search_query); 

	// render item
    $html = tm_search_api_render_search_result($result_url, $result_image_url, $result_title, $result_info, $result_item_count);

	return $html;

}

/* Render organisation search result */
function tm_search_api_render_result_organization($result, $organization, $search_query, $result_item_count) {

	global $conf;

	// organization image
	if (isset($organization->field_avatar[LANGUAGE_NONE][0]['uri'])) {
		$image_url = image_style_url("avatar", $organization->field_avatar[LANGUAGE_NONE][0]['uri']);
	} else {
		// note: organization will always have a logo as it's mandatory field
		$image_url = image_style_url("avatar", $conf["tm_images_default_field_avatar"]);
	}

	// set render fields
	$result_url = drupal_get_path_alias("node/" . $organization->nid);
	$result_image_url = $image_url;
	$result_title = l("Companies > " . $organization->title, $result_url, array('attributes' => array('target'=>'_blank')));
	$result_text = $organization->body[LANGUAGE_NONE][0]['safe_value'];

	// country
	if (sizeof($organization->field_country) > 0) {
		$country = country_load($organization->field_country[LANGUAGE_NONE][0]['iso2']);
		if ($country) {
			$result_text .= " | " . $country->label();
		}		
	}

	// segment
	if (sizeof($organization->field_segment) > 0) {
		$taxonomy_term = taxonomy_term_load($organization->field_segment[LANGUAGE_NONE][0]['tid']);
		$taxonomy_parent = taxonomy_get_parents($taxonomy_term->tid);
		if ($taxonomy_parent) {
			$result_text .= " | " . array_values($taxonomy_parent)[0]->name . " > " . $taxonomy_term->name;
		} else {
			if (isset($taxonomy_term->name)) {
				$result_text .= " | " . $taxonomy_term->name;
			}
		}
	}

	$result_info = tm_search_api_result_highlight($result_text, $search_query);

	// render item
    $html = tm_search_api_render_search_result($result_url, $result_image_url, $result_title, $result_info, $result_item_count);

	return $html;

}

/* Render a snippet of the search result highlighting the query words */
function tm_search_api_result_highlight($text, $search_query) {

	mb_internal_encoding('UTF-8');
	$snippet_words = 12; // must be even
	$snippet = 

	// Step 1. Split search query into options and terms
	$parsed = tm_search_parse_search_query($search_query);
	$search_terms = $parsed["search_terms"];
	$search_query_no_options = $parsed["search_query_no_options"];
	$query_options = $parsed["query_options"];

	// Append any in: options so we can highlight them
	// ie: in:Twitter, in:Instagram
	if (isset($query_options["has"])) {
		foreach ($query_options["has"] as $query_in) {
			$search_terms[] = $query_in; // append so we can highight 
		}
	}

	$words = $search_terms;

	// Step 2. Create snippet around first word in query
	$snippet = tm_search_api_extract_relevant($words, $text, $rellength=300, $prevcount=50, $indicator='...');

	// Step 3. Highlight search words
	foreach ($words as $word) {
		$highlighted = preg_filter('/' . preg_quote(strip_tags($word)) . '/iu', '__BEGIN_SPAN__$0__END_SPAN__</span>', $snippet);
		if (!empty($highlighted)) {
			$snippet = $highlighted;
		}
	}

	// Step 4. Replace tokens with html
	$snippet = str_replace("__BEGIN_SPAN__", "<span class='search highlight'>", $snippet);
	$snippet = str_replace("__END_SPAN__", "</span>", $snippet);

	// Step 5. Return highlighted snippet
	return $snippet;
}

/* Render search results into html template */
function tm_search_api_render_search_result($result_url, $result_image_url, $result_title, $result_info, $result_item_count) {
	global $tm_search_api_result_template;
	$html = str_replace("__RESULT_URL__", $result_url, $tm_search_api_result_template);
	$html = str_replace("__RESULT_IMAGE_URL__", $result_image_url, $html);
	$html = str_replace("__RESULT_TITLE__", $result_title, $html);
	$html = str_replace("__RESULT_INFO__", $result_info, $html);
	$html = str_replace("__RESULT_LI_CLASS__", "search-result-item-" . $result_item_count, $html);
	return $html;
}

/* Check if a keyword for a filter type should be ignored */
function check_is_ignored_keyword($keyword, $filter_type) {

	global $conf;

	$ignore_keywords = array();
	if ($filter_type == "people") {
		$ignore_keywords = $conf["tm_search_api_ignore_keywords_people"];
	}
	if ($filter_type == "events") {
		$ignore_keywords = $conf["tm_search_api_ignore_keywords_events"];
	}
	if ($filter_type == "chapters") {
		$ignore_keywords = $conf["tm_search_api_ignore_keywords_chapters"];
	}
	if ($filter_type == "companies") {
		$ignore_keywords = $conf["tm_search_api_ignore_keywords_companies"];
	}

	// check keyword against ignored keywords
	if (in_array(strtolower($keyword), $ignore_keywords)) {
		return true;
	}

	// if pluralize keywords, perform check against depluralized value
	if ($conf["tm_search_api_pluralize_keywords"]) {
		if (in_array(strtolower(rtrim($keyword, "s")), $ignore_keywords)) {
			return true;
		}
	}

	// not found
	return false;
}

/* Check if a filter should be enabled based on ignored keywords
   Return true if filter enabled and not all terms are ignored
   Return false if all search terms for filter are ignored
   Return false if filter disabled
   */
function check_filter_enabled($search_terms, $filter_enabled, $filter_type) {

	// if filter enabled
	if ($filter_enabled) {

		$filter_status = false;
		foreach($search_terms as $search_term) {
			if (!check_is_ignored_keyword($search_term, $filter_type)) {
				$filter_status = true;
			}
			if ($filter_status) {
				return true;
			}
		}
	}

	// filter is not enabled or all words are ignored
	return false;
}

/* Return empty results array */
function tm_search_api_empty_results_array() {
	$results = array();
	$results['results'] = array();
	$results['last page'] = true;
	$results['results count'] = 0;
	$results['performance'] = array();
	$results['performance']['complete'] = 0;
	$results['tm_debug_search_raw_query'] = $query_array["search_query"];
	$results['tm_debug_search_keywords'] = $search_terms;
	$results['tm_debug_search_options'] = $query_options;
	return $results;
}

/* html templates */
global $tm_search_api_result_template;
$tm_search_api_result_template = <<<EOT
<li class="search-result __RESULT_LI_CLASS__">
   <article class="card contained view-mode-grid search-result clearfix">
    <!-- Needed to activate contextual links -->
    	<div style="padding-left: 2em; padding-right: 4em;">
    	
	        <div class="media">
		        <div class="avatar">
		        	<span class="badge-search-result">
		        		 <a href="__RESULT_URL__" class="search-result" target="_blank"><img class="seach-result-image" typeof="foaf:Image" src="__RESULT_IMAGE_URL__" width="256" height="256" alt=""></a>
		        	</span>
		        </div>
	        </div>

	    	<div class="teaser">
	      		<span class="prime-title search-result">__RESULT_TITLE__</span>
	      		<p class="search-result"><span class="search-result-snippet">__RESULT_INFO__</span>
	      	</div>
	     
      	</div>
      	
	</article>
</li>
EOT;

// sorry, not the drupal way here...
global $tm_search_api_form_template;
$tm_search_api_form_template = <<<EOT
 <form class="search-form" action="/search" method="GET" id="search-form" accept-charset="UTF-8">
  <div>
    <div class="container-inline form-wrapper" id="edit-basic">
      <div class="form-item form-type-textfield form-item-keys">
        <label for="edit-keys">Enter your keywords </label>
        <input type="text" id="edit-keys" name="query" value="" size="40" maxlength="255" class="form-text">
      </div>
    <input type="submit" id="edit-submit" value="Search" class="form-submit"></div>
  </div>
</form>
<p style='font-size: 0.85rem; line-height: 1.25rem; color: #636e79; margin-bottom: 0;'>Find members, companies, events or chapters. Or, visit our <a href='/search'>Search page</a>.</p>
EOT;

