<?php

/**
 * @file
 * Code for the tm_users feature.
 */

include_once 'tm_users.features.inc';

include_once 'tm_users.approval.inc';
include_once 'tm_users.cancel.inc';
include_once 'tm_users.csv.inc';
include_once 'tm_users.display.inc';
include_once 'tm_users.edit.inc';
include_once 'tm_users.follow.inc';
include_once 'tm_users.forms.inc';
include_once 'tm_users.helpers.inc';
include_once 'tm_users.mail.inc';
include_once 'tm_users.moderate.inc';
include_once 'tm_users.register.inc';
include_once 'tm_users.tips.inc';

/**
 * Init tm_users module
 */
function tm_users_init() {

  global $user;

  // access uid in js with:
  // var id = Drupal.settings.currentUser;
  drupal_add_js(array('currentUser' => $user->uid), 'setting');

  // keep track of signed in users
  tm_users_track_signed_in();

  // set application cookies
  tm_users_set_application_cookies();
}


/*
* Implements hook_permission()
*/
function tm_users_permission() {
  return array(
    'approve users' => array(
      'title' => t('Approve users'),
      'description' => t('Approve new users on the website.'),
    ),
    'unapprove users' => array(
      'title' => t('Un-approve users'),
      'description' => t('Remove approval from users on the website.'),
    ),
  );
}

/*
* Implements hook_menu()
*/
function tm_users_menu() {
  $items['user/%user/approve'] = array(
    'title' => 'Approve user',
    'page callback' => 'tm_users_approve',
    'page arguments' => array(1),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/unapprove'] = array(
    'title' => 'Un-approve user',
    'page callback' => 'tm_users_unapprove',
    'page arguments' => array(1),
    'access arguments' => array('unapprove users'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/approval_need_more_info'] = array(
    'title' => 'Request more info',
    'page callback' => 'tm_users_approval_need_more_info',
    'page arguments' => array(1),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/approval_is_company_or_brand'] = array(
    'title' => 'Account is company or brand',
    'page callback' => 'tm_users_approval_is_company_or_brand',
    'page arguments' => array(1),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/request_approval'] = array(
    'title' => 'Request approval',
    'page callback' => 'tm_users_request_approval',
    'page arguments' => array(1),
    'access callback' => 'tm_users_check_request_approval',
    //'access arguments' => array('user_is_logged_in'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/moderate_non_community_profile'] = array(
    'title' => 'Moderate profile',
    'page callback' => 'tm_users_moderate_non_community_profile',
    'page arguments' => array(1),
    'access arguments' => array('approve users'),
    //'access arguments' => array('user_is_logged_in'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/confirm_cancel_account'] = array(
    'title' => 'Confirm cancel account',
    'page callback' => 'tm_users_confirm_cancel_account',
    'page arguments' => array(1),
    'access callback' => 'tm_users_check_cancel_account',
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/follow'] = array(
    'title' => 'Follow member',
    'page callback' => 'tm_users_follow_message',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/moderate_report_member'] = array(
    'title' => 'Report member profile',
    'page callback' => 'tm_users_moderate_report_member',
    'page arguments' => array(1),
    'access callback' => 'tm_users_moderate_report_check',
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/moderate_report_member_resolved'] = array(
    'title' => 'Report member profile',
    'page callback' => 'tm_users_moderate_report_member_resolved',
    'page arguments' => array(1),
    'access callback' => 'tm_users_moderate_report_resolved_check',
    'type' => MENU_CALLBACK,
  );
  $items['admin/export_global_newsletter'] = array(
    'title' => 'Download global newsletter subscribers',
    'page callback' => 'tm_users_download_global_newsletter_csv',
    'page arguments' => array(1),
    'access callback' => 'tm_users_download_global_newsletter_csv_check',
    'type' => MENU_CALLBACK,
  );
  $items['admin/export_chapter_leaders'] = array(
    'title' => 'Download chapter leaders csv',
    'page callback' => 'tm_users_download_chapter_leaders_csv',
    'page arguments' => array(1),
    'access callback' => 'tm_users_download_chapter_leaders_csv_check',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implements hook_theme()
 */
function tm_users_theme() {
  return array(
    'account_menu' => array(
      'template' => 'tm_users_account_menu',
      'path' => drupal_get_path('module', 'tm_users') . '/templates/'
    )
  );
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function tm_users_form_user_login_block_alter(&$form, &$form_state) {
  // Replace labels for placeholder on the input element
  $form['name']['#attributes'] = array('placeholder' => t('Email'));
  $form['pass']['#attributes'] = array('placeholder' => t('Password'));

  // Remove links and keep only the one to reset the password.
  $form['links'] = array();
  $form['links']['reset_pass'] = array(
    '#markup' => l(t('Forgot your password?'), 'user/password', array('title' => t('Request new password via email.')))
  );
  $form['links']['#weight'] = 100;
}

/**
 * Redirect user to their profile page
 */
function tm_users_user_profile_form_submit($form, &$form_state) {
  $user_id = $form['#user']->uid;
  drupal_goto(drupal_get_path_alias('user/' . $user_id));
}

/**
 * Implements template_preprocess_page()
 */
function tm_users_preprocess_page(&$variables) {

  // Add account menu to page.
  $variables['page']['account_menu'] = theme('account_menu');

  // disable personal contact form setting
  // see: http://stackoverflow.com/questions/2540582/how-do-i-disable-the-personal-contact-form-option-in-the-user-edit-form
  $menu_items = menu_get_item();
  if('user/%/edit' === $menu_items['path']){
       $variables['page']['content']['content']['content']['system_main']['contact']['#access'] = FALSE;
  }

  // Split url parts
  $url_parts = explode("/", request_path());

  // Show chapter page tips
  if (($url_parts[0] == "chapters") and (sizeof($url_parts) == 1)) {
    tm_users_chapter_tips();
  }

  // Show chapter page tips
  if (($url_parts[0] == "groups") and (sizeof($url_parts) == 1)) {
    tm_users_groups_tips();
  }

  // Show chapter page tips
  if (($url_parts[0] == "chapters") and (sizeof($url_parts) == 2)) {
    tm_users_in_chapter_tips();
  }

  // Show chapter page tips
  // ie /node/12833/members
  if (isset($url_parts[2])) {
    if (($url_parts[0] == "node") and ($url_parts[2] == "members") and (sizeof($url_parts) == 3)) {
      tm_users_in_chapter_tips();
    }
  }

  // Show leaders page tips
  if (($url_parts[0] == "leaders") and (sizeof($url_parts) == 1)) {
    tm_users_leaders_tips();
  }

  // Show community page tips
  if (($url_parts[0] == "community") and (sizeof($url_parts) == 1)) {
    tm_users_community_tips();
  }  

  // Show events page tips
  if (($url_parts[0] == "events") and (sizeof($url_parts) == 1)) {
    tm_users_event_tips();
  }

  // Show events page tips
  if (($url_parts[0] == "sponsors") and (sizeof($url_parts) == 1)) {
    tm_users_sponsors_tips();
  }

  // Show search tips
  if (($url_parts[0] == "search") and (sizeof($url_parts) == 1)) {  
    // show signup tips if less than < 70% complete
    //tm_users_signup_tips(false, null, 70);
    return;
  }

  // Show user signup tips if < 80% complete
  tm_users_signup_tips(false, null, 80);

}

/**
 * Hook on creation of a new redirect in redirect module.
 * This is a sneaky method to delete automatically created user redirects
 * We preserve the original /community/name URL (for old links in notification emails)
 */
function tm_users_redirect_insert($redirect) {
  //print_r($redirect->source);
  $parts = explode("/", $redirect->redirect);
  $source_parts = explode("/", $redirect->source);
  if (($parts[0] == "user") && ($source_parts[0] != "community")) {
    redirect_delete_by_path($redirect->source);
  }
}

/**
 * Set title of user profiles questions
 * Refer to settings.php configuration
 */
function tm_users_preprocess_field(&$variables) {

  global $conf;

  // Get element type
  $element_type = null;
  if (!isset($variables['element']['#object']->type)) {
    $element_type = "user";
  }

  // Only operate on user
  if ($element_type != "user") {
    return;
  }

  if ($variables['element']['#field_name'] == 'field_user_question_1') {
    $variables['label'] = $conf["tm_field_user_question_1_title"];
  }

  if ($variables['element']['#field_name'] == 'field_user_question_2') {
    $variables['label'] = $conf["tm_field_user_question_2_title"];
  }

  if ($variables['element']['#field_name'] == 'field_user_question_3') {
    $variables['label'] = $conf["tm_field_user_question_3_title"];
  }

  if ($variables['element']['#field_name'] == 'field_user_question_4') {
    $variables['label'] = $conf["tm_field_user_question_4_title"];
  }

  if ($variables['element']['#field_name'] == 'field_user_question_5') {
    $variables['label'] = $conf["tm_field_user_question_5_title"];
  }

  // Replace default avatar image
  if ($variables['element']['#field_name'] == 'field_avatar') {
    $variables['items'][0]['#item']['uri'] = _tm_users_get_default_avatar($variables['items'][0]['#item']['uri'], $variables['element']['#object']->uid);
  }

  // Replace default cover image
  if ($variables['element']['#field_name'] == 'field_image') {
    $variables['items'][0]['#item']['uri'] = _tm_users_get_default_image($variables['items'][0]['#item']['uri'], $variables['element']['#object']->uid);
  }

}

/**
 * Presave user
 */
function tm_users_user_presave(&$edit, $account, $category) {

  global $user;

  // Don't act on new users without a uid yet
  if (!isset($account->uid)) {
    return true;
  }

  // Check that moderator can edit account
  if (!tm_users_check_moderator_edit_permission($user, $account)) {
    // allow password resets
    if (($user->uid != 0) and ($category == "account")) {
      drupal_set_message("Sorry, you can't modify a moderator account.", "warning");
      drupal_goto("user/" . $account->uid);
      return;
    }
  }

  // ITEM 1
  // If the user is already approved then overwrite role to approved when they save profile.
  // Reason: if user signs up, and in middle of editing profile is approved, then
  // saving their profile would overwrite the approved role (making them unapproved).
  // This method fixes this edge case.
  // see: https://github.com/travelmassive/massiveplatform/issues/68
  // 
  // ITEM 2
  // Strip spaces from URL fields
  if ($account->uid == $user->uid) {

    // don't mess with administrators' forms
    if (in_array('administrator', $user->roles)) {
      return;
    }

    // if the user is already approved then override to be approved
    if (in_array('approved user', $user->roles)) {
      if ($role = user_role_load_by_name('approved user')) {

        // set approved user role
        $edit['roles'][$role->rid] = $role->rid;

        // below is a hammer if we need it
        // unset($edit["roles"]);
      }
    }

    // preserve roles
    $preserve_roles = array("chapter leader", "moderator", "export-global-newsletter-csv", "access-google-analytics-report", "brand-editor", "discuss-moderator", "discuss-administrator");
    foreach($preserve_roles as $preserve_role) {
      if (in_array($preserve_role, $user->roles)) {
        if ($role = user_role_load_by_name($preserve_role)) {
          $edit['roles'][$role->rid] = $role->rid;
        }
      }
    }

    // Trim all URL fields
    // Otherwise a blank space causes the link to be rendered blank
    $field_names = array("field_link_website", "field_link_twitter", "field_link_linkedin", "field_link_facebook", "field_link_instagram", "field_link_youtube", "field_link_vimeo", "field_link_snapchat");
    foreach ($field_names as $field_name) {
       if (isset($edit[$field_name][LANGUAGE_NONE][0]['url'])) {
        if (trim($edit[$field_name][LANGUAGE_NONE][0]['url']) == "") {
          $edit[$field_name][LANGUAGE_NONE] = array();
        }
      }
    }

    // Trim about field
    // Remove it if it's empty (stop user from entering a space)
    if (isset($edit['field_about_me'][LANGUAGE_NONE][0]['value'])) {
      $trimmed = trim($edit['field_about_me'][LANGUAGE_NONE][0]['value']);
      // save trimmed value
      $edit['field_about_me'][LANGUAGE_NONE][0]['value'] = $trimmed;
    }

    // Trim user cover video field
    if (isset($edit['field_user_cover_video'][LANGUAGE_NONE][0]['value'])) {
      $trimmed = trim($edit['field_user_cover_video'][LANGUAGE_NONE][0]['value']);
      // save trimmed value
      $edit['field_user_cover_video'][LANGUAGE_NONE][0]['value'] = $trimmed;
    }

    // Trim first_name, last_name, job role, organization name, city
    // Otherwise a blank space causes the link to be rendered blank
    $field_names = array("field_user_first_name", "field_user_last_name", "field_job_role", "field_job_organization", "field_location_city");
    foreach ($field_names as $field_name) {
      if (isset($edit[$field_name][LANGUAGE_NONE][0]['value'])) {
        $trimmed = trim($edit[$field_name][LANGUAGE_NONE][0]['value']);
        $edit[$field_name][LANGUAGE_NONE][0]['value'] = $trimmed;
      }
    }
   
    // store reason for joining
    if (isset($edit['reason_for_joining'])) {
      $edit['field_reason_for_joining'][LANGUAGE_NONE][0]['value'] = trim($edit['reason_for_joining']);
    }

  }

  // Set last modified timestamp of user
  $datetime_now = new DateTime(null, new DateTimeZone('UTC'));
  $edit['field_last_modified_timestamp'][LANGUAGE_NONE][0]['value'] = $datetime_now->getTimestamp();

}

/** 
 * Add a link to chapter leaders from the community page
 */
function tm_users_views_post_execute(&$view) {
  if ($view->name == 'community') {
    $view->build_info['title'] = "Community &middot; <a style='color: red;' href='/leaders'>Chapter Leaders</a>";
  }

  if ($view->name == 'chapter_leaders') {
    $view->build_info['title'] = "<a href='/community'>Community</a> &middot; Chapter Leaders";
  }
}

/** 
 * Use OR for contextual queries in block_joined_events
 * This allows us to show signed up and featured events
 * see: https://www.drupal.org/node/1451218#comment-6136692
 * 
 * NOTE: This query will not show a featured member
 * in their "attending events" section (block_joined_events) 
 * if nobody has registered for the event yet. This is due
 * to the join query generated by the view.
 * 
 */
function tm_users_views_query_alter(&$view, &$query) {
  if ($view->name == 'signups') {
    if ($query->options['query_comment'] == 'block_joined_events') {
      $query->where[0]['type'] = 'OR';
    }
  }
}

/**
 * Keep track of already signed in users
 * Updates ip_tracker record
 */
function tm_users_track_signed_in() {

  global $user;

  // must be logged in
  if (!user_is_logged_in()) {
    return;
  }

  // if no cookie set
  if (!isset($_COOKIE['Drupal_visitor_tm_is_signed_in'])) {
    
    // set cookie for a day
    setrawcookie('Drupal.visitor.tm_is_signed_in', rawurlencode(true), REQUEST_TIME + 86400, '/');

    // track ip
    ip_tracker_user_save($user->uid);

  }
}

/**
 * Get array or user's organization profiles
 */
function tm_users_get_organization_profiles($uid) {

  $query = "SELECT entity_id FROM field_data_field_owner WHERE entity_type = 'node' AND bundle = 'organization' AND field_owner_target_id = :uid";
  $rows = db_query($query, array(':uid' => $uid))->fetchAll();

  $nids = array();
  foreach ($rows as $row) {
    $nids[] = $row->entity_id;
  }
  return $nids;
}

/**
 * Track some additional user information in a cookie for use by other applications on the domain
 * ie: blog, forum. etc.
 */
function tm_users_set_application_cookies() {

  global $user;
  global $conf;

  // store user details for other domain hosted apps
  // Note: when user logs out we unset them in tm_users_user_logout()
  if (!user_is_logged_in()) {
    user_cookie_save(array('anonymous_visitor' => 1));
    return;
  }

  // load user
  $loaded = user_load($user->uid);

  // anonymous_visitor
  user_cookie_save(array('anonymous_visitor' => 0));

  // approved_member
  if (in_array("approved user", $user->roles)) {
    user_cookie_save(array('approved_member' => 1));
  } else {
    user_cookie_save(array('approved_member' => 0));
  }

  // user_profile_uri
  $user_profile_uri = url('user/' . $loaded->uid);
  user_cookie_save(array('user_profile_uri' => $user_profile_uri));

  // user_avatar_uri
  if (empty($loaded->field_avatar)) {
    $img_uri = $conf["tm_images_default_field_avatar"];
  }  else {
    $img_uri = $loaded->field_avatar[LANGUAGE_NONE][0]['uri'];
  }

  // If image is default, replace with random image from folder
  if (isset($conf["tm_images_default_path"])) {
    if ($img_uri == $conf["tm_images_default_field_avatar"]) {
      $image_id = $loaded->uid;
      $cover_files = $conf["tm_images_default_avatar"];
      $image_index = $image_id % sizeof($cover_files);
      $img_uri = $conf["tm_images_default_path"] . $cover_files[$image_index];
    }
  }

  user_cookie_save(array('user_avatar_uri' => image_style_url("avatar", $img_uri)));
  
}

/**
 * Unset cookies set in tm_users_init() when user logs out
 */
function tm_users_user_logout($account) {

  $unset_cookies = array("Drupal.visitor.anonymous_visitor", "Drupal.visitor.approved_member", "Drupal.visitor.user_profile_uri", "Drupal.visitor.user_avatar_uri");
  foreach ($unset_cookies as $cookie_name) {
    unset($_COOKIE[str_replace(".", "_", $cookie_name)]);
    setcookie($cookie_name, '', time() - 3600, "/");
  }  
}

/**
 * Get user's friends (mutual followers)
 */
function tm_users_get_friends($uid) {
  $flag = flag_get_flag("follow_members");
  $query = "SELECT f1.entity_id from flagging f1 LEFT JOIN flagging f2 ON f1.entity_id = f2.uid AND f1.uid = f2.entity_id WHERE f1.fid = :fid AND f2.fid = :fid AND f1.uid = :uid";
  $results = db_query($query, array(':fid' => $flag->fid, ':uid' => $uid))->fetchAllKeyed(0,0);
  return $results;
}

