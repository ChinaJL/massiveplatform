<?php
/**
 * @file
 * Code for the tm_users feature.
 */

include_once 'tm_users.features.inc';

/**
 * Implements hook_form_FORM_ID_alter()
 */
function tm_users_form_user_login_block_alter(&$form, &$form_state) {
  // Replace labels for placeholder on the input element
  $form['name']['#attributes'] = array('placeholder' => t('Email'));
  $form['pass']['#attributes'] = array('placeholder' => t('Password'));

  // Remove links and keep only the one to reset the password.
  $form['links'] = array();
  $form['links']['reset_pass'] = array(
    '#markup' => l(t('Forgot your password?'), 'user/password', array('title' => t('Request new password via email.')))
  );
  $form['links']['#weight'] = 100;
}

function tm_users_form_user_profile_form_alter(&$form, &$form_state) {
  // Add an indication of the username, in case users are not allowed to edit 
  // their usernames.
  if (!user_access('change own username')) {
    $form['account']['name']['#access'] = FALSE;
    $form['account']['name']['#disabled'] = TRUE;
    $form['account']['name']['#required'] = FALSE;
    unset($form['account']['name']['#description']);
  }

  // We don't want a collapsible fieldset nor description for the timezone.
  $form['timezone']['#type'] = 'fieldset';
  $form['timezone']['#collapsible'] = FALSE;
  unset($form['timezone']['#description']);

}

/**
 * Implements hook_theme()
 */
function tm_users_theme() {
  return array(
    'account_menu' => array(
      'template' => 'tm_users_account_menu',
      'path' => drupal_get_path('module', 'tm_users') . '/templates/'
    )
  );
}

/**
 * Implements template_preprocess_page()
 */
function tm_users_preprocess_page(&$variables) {
  // Add account menu to page.
  $variables['page']['account_menu'] = theme('account_menu');

  // disable personal contact form setting
  // see: http://stackoverflow.com/questions/2540582/how-do-i-disable-the-personal-contact-form-option-in-the-user-edit-form
  $menu_items = menu_get_item();
    if('user/%/edit' === $menu_items['path']){
         $variables['page']['content']['content']['content']['system_main']['contact']['#access'] = FALSE;
    }
}

/*
* Implements hook_permission()
*/
function tm_users_permission() {
  return array(
    'approve users' => array(
      'title' => t('Approve users'),
      'description' => t('Approve new users on the website.'),
    ),
    'unapprove users' => array(
      'title' => t('Un-approve users'),
      'description' => t('Remove approval from users on the website.'),
    ),
  );
}
/*
* Implements hook_menu()
*/
function tm_users_menu() {
  $items['user/%user/approve'] = array(
    'title' => 'Approve user',
    'page callback' => 'tm_users_approve',
    'page arguments' => array(1),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/unapprove'] = array(
    'title' => 'Un-approve user',
    'page callback' => 'tm_users_unapprove',
    'page arguments' => array(1),
    'access arguments' => array('unapprove users'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/* Approval callback */
function tm_users_approve($user){

  $approving_user = $GLOBALS['user'];
  $role_name = 'approved user'; // The name of the role to add.

  if ($role = user_role_load_by_name($role_name)) {
    user_multiple_role_edit(array($user->uid), 'add_role', $role->rid);

    // send notification message to user that they have been approved
    // there doesn't seem to be a hook that can detect we are applying a new role, so do it here
    $approving_user = user_uid_optional_load();
    // set profile url (either friendly url or community url)
    $profile_url = "community/" . $user->name;
    if (count($user->field_friendly_url) > 0) { 
      $profile_url = $user->field_friendly_url['und']['0']['value'];
    }
    $approval_text = "Your account has been approved by " . $approving_user->field_user_first_name[LANGUAGE_NONE][0]['value'] . ".";

    tm_notifications_notify('user_approved', $user, array('approving-user' => $approving_user, 'user' => $user, '__PROFILE_URL__' => $profile_url, '__APPROVAL_INTRO_TEXT__' => $approval_text));
  }

  drupal_goto("user/$user->uid/view");
}

/* Un-approval callback */
function tm_users_unapprove($user){
  $role_name = 'approved user'; // The name of the role to remove.
  if ($role = user_role_load_by_name($role_name)) {
    user_multiple_role_edit(array($user->uid), 'remove_role', $role->rid);
  }
  drupal_goto("user/$user->uid/view");
}

/* Using Email Registration Form we automatically set the users email address */
/* https://www.drupal.org/project/email_registration */
function tm_users_email_registration_name($edit, $account) {
  // Your hook implementation should ensure that the resulting string
  // works as a username. You can use email_registration_cleanup_username($name)
  // to clean up the name.
  //return email_registration_cleanup_username('u' . $account->uid);

  // Make username from first and last name and a digit
  //print_r($account);
  $first_name = $account->field_user_first_name['und'][0]['value'];
  $last_name = $account->field_user_last_name['und'][0]['value'];
  $username = email_registration_cleanup_username($first_name . $last_name); 

  // check if username exists
  if (!db_query("SELECT COUNT(*) FROM {users} WHERE name = :name;", array(':name' => $username))->fetchField()) {
    return $username;
  }

  // username exists so lets add some digits
  for ($i = 2; $i < 100; $i++) {
    $new_username = $username . $i;
    if (!db_query("SELECT COUNT(*) FROM {users} WHERE name = :name;", array(':name' => $new_username))->fetchField()) {
    return $new_username;
    }
  }

  // still haven't found a username, generate a really long random number
  // could still happen but this is enough work
  return $username . rand(100, 1000000);

}

/**
 * Hook on creation of a new redirect in redirect module.
 * This is a sneaky method to delete automatically created user redirects
 */
function tm_users_redirect_insert($redirect) {
  //print_r($redirect->source);
  $parts = explode("/", $redirect->redirect);
  if ($parts[0] == "user") {
    redirect_delete_by_path($redirect->source);
  }
}

/* 
 * Link by title to any chapters this user is a chapter leader of 
 * inserts this markup into the user menu tpl file
*/
function tm_users_leading_chapters($uid){
  $query = new EntityFieldQuery();
  $markup = '';
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'chapter')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_chapter_leaders', 'target_id', $uid, '=');

  $result = $query->execute();

  if (isset($result['node'])) {
    $chapters_nids = array_keys($result['node']);
    foreach ($chapters_nids as $nid) {
      //$img_url = 'public://images/chapters/Athens.jpg';  // the orig image uri
      $chapter = node_load($nid);
      $img_url = @$chapter->field_image['und'][0]['uri'];
      if ($img_url == "") { $img_url = "public://default_images/cover-default.jpg"; }
      $style = 'thumbnail';  // or any other custom image style you've created via /admin/config/media/image-styles
      $markup .= "<li style='margin-bottom: 4px;'><img align='left' style='margin-left: 16px; margin-top: 4px; padding-right: 8px; width: 40px;' src='".image_style_url($style, $img_url) . "'>" . l($chapter->title . ' (Chapter Leader)','node/'.$chapter->nid).'</li>';
    }
  }
  return $markup;
}

/* 
 * Link by title to any chapters this user has joined
 * inserts this markup into the user menu tpl file
*/
function tm_users_menu_chapters($uid){
 
  $markup = "";
  $MAX_ITEMS = 4;

  // Step 1. Fetch list of chapters the user has joined
  $flags = flag_get_user_flags("node");
  $chapters_nids = array();
  foreach ($flags as $flag_name => $flag) {
    if ($flag_name == "signup") {
      foreach($flag as $f) {
        $chapters_nids[] = $f->entity_id;
      }
    }
  }

  // Step 2. Fetch list of chapters the user is a leader of
  $chapters_leader_nids = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'chapter')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_chapter_leaders', 'target_id', $uid, '=');

  $result = $query->execute();
  if (isset($result['node'])) {
    $chapters_leader_nids = array_keys($result['node']);
  }

  // Step 3. Join the two arrays of chapter leader nids and joined chapters
  $all_chapter_nids = $chapters_leader_nids;
  foreach ($chapters_nids as $nid) {
    $all_chapter_nids[] = $nid;
  }

  // Step 4. Create HTML
  $chapter_html = array();
  $chapter_leader_html = array();
  $num_items = 0;
  $count_chapters = 0;
  foreach ($all_chapter_nids as $nid) {

    $count_chapters++;

    //$img_url = 'public://images/chapters/Athens.jpg';  // the orig image uri
    $chapter = node_load($nid);

    $img_url = @$chapter->field_image['und'][0]['uri'];
    if ($img_url == "") { $img_url = "public://default_images/cover-default.jpg"; }
    $style = 'thumbnail';  // or any other custom image style you've created via /admin/config/media/image-styles

    // add to chapter html
    if (!array_key_exists($chapter->title, $chapter_html)) {

      // Create html for menu entry
      $chapter_leader_text = "";
      if (in_array($nid, $chapters_leader_nids)) { 
        $chapter_leader_text = " (Chapter Leader)";
      }

      $html = "<li style='margin-bottom: 4px;'><img align='left' style='margin-left: 16px; margin-top: 4px; padding-right: 8px; width: 40px;' src='".image_style_url($style, $img_url) . "'>" . l($chapter->title . $chapter_leader_text,'node/'.$chapter->nid) . '</li>';

      // Put into either a chapter or chapter_leader array
      if (in_array($nid, $chapters_leader_nids)) { 
        $chapter_leader_html[$chapter->title] = $html;
      } else {
        $chapter_html[$chapter->title] = $html;
      }
    }
  }

  // Step 5. Join HTML
  $markup = "";

  if ($count_chapters > 0) {

    // Sort the chapters by title
    ksort($chapter_html);
    ksort($chapter_leader_html);

    // Show chapters you are a chapter leader for first
    foreach ($chapter_leader_html as $html) {
      // only print max items
      $num_items++;
      if ($num_items > $MAX_ITEMS) {
        continue;
      }
      $markup .= $html;
    }

    // Show other chapters second
    foreach ($chapter_html as $html) {
      // only print max items
      $num_items++;
      if ($num_items > $MAX_ITEMS) {
        continue;
      }

      $markup .= $html;
    }
    if ($num_items > $MAX_ITEMS) {
      $markup .= "<li>" . l(t('(View ') . ($num_items - $MAX_ITEMS) . " more)", 'user/' . $uid) . "</li>";
    }
  }
  else {
    $markup .= "<li>" . l(t('Join a chapter'), 'chapters') . "</li>";
  }

  return $markup;
}


/* 
 * Link by title to any companies this user is managing 
 * inserts this markup into the user menu tpl file
*/
function tm_users_companies($uid){

  $query = new EntityFieldQuery();
  $markup = '';
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'organization')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_owner', 'target_id', $uid, '=');

  $result = $query->execute();

  if (isset($result['node'])) {
    $companies_nids = array_keys($result['node']);
    foreach ($companies_nids as $nid) {
      $company = node_load($nid);
      $img_url = @$company->field_image['und'][0]['uri'];
      if ($img_url == "") { $img_url = "public://default_images/cover-default.jpg"; }
      $style = 'thumbnail';  // or any other custom image style you've created via /admin/config/media/image-styles
      $markup .= "<li style='margin-bottom: 4px;'><img align='left' style='margin-left: 16px; margin-top: 4px; padding-right: 8px; width: 40px;' src='".image_style_url($style, $img_url) . "'>". l($company->title,'node/'.$company->nid).'</li>'; 
    }
  }
  return $markup;
}

/* Checks if a user is a chapter leader of a chapter */
function tm_users_is_chapter_leader($uid, $chapterid){
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'chapter')
    ->propertyCondition('nid', $chapterid)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_chapter_leaders', 'target_id', $uid, '=');

  $result = $query->execute();

  if (isset($result['node'])) {
    return TRUE;
  }
  return FALSE;
}


function tm_users_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'user_login') {
    $form['cutomtext'] = array(
        '#type' => 'item',
        '#markup' => '<p style="margin-top: 0.8em;">Don\'t have an account? <a href="/user/register">Sign up</a></p>',
        '#weight' => 200, // Adjust so that you can place it whereever 
        );
  }

 
  // Allow user to join up to chapter when they sign up
  if (($form_id == 'user_register_form') or ($form_id == 'tm_users_external_signin_register_form')) {

    // get a list of chapters
    $chapters = node_load_multiple(array(), array('type' => "chapter"));

    // create dropdown list
    $chapter_list = array();
    foreach ($chapters as $chapter) { // See this line in your original code
      $chapter_list[$chapter->nid] = $chapter->title; 
    }
    asort($chapter_list);
    $chapter_list = array("" => "Select a chapter", "-1" => "Choose later") + $chapter_list;
    
    // add chapter list to registraton form
    $form['chapter_list']=array(
      '#type'=>'select',
      '#title' => t('Home City'),
      '#options' => $chapter_list,
      '#multiple' => false,
      '#weight'=>1,
      '#description'=>'Please select a home chapter to join.',
    );

  }


  // Add terms and conditions agreement to sign up form
  if (($form_id == 'user_register_form') or ($form_id == 'tm_users_external_signin_register_form')) {
    $form['cutomtext'] = array(
        '#type' => 'item',
        '#markup' => '<p class="description" style="text-align: center; margin-bottom: 12px;">By creating an account you agree to our <a target="_blank" href="/content/terms-use">Terms Of Use</a> and <a target = "_blank" href="/content/privacy-policy">Privacy Policy</a></p>',
        '#weight' => 10, // Adjust so that you can place it whereever 
        );
  }

  // Hide home chapter field if the user has not joined a chapter
  if ($form_id == 'user_profile_form') {
    // get current user
    $user = user_load($form['#user']->uid);

    // if they don't have a home chapter, hide the field
    if (sizeof($user->field_home_chapter) == 0) {      
      hide($form['field_home_chapter']);;
    }

    // hide loggintobgan revalidate notice since we print it anyway
    hide($form['revalidate']);
  }


  // Alter companies view dropdowns
  // Note this should be in tm_organizations but it doesn't seem to fire there
  if(isset($form_state['view'])) {
    if ($form_state['view']->name == 'companies') {

      // Limit countries dropdown to users countries
      $output = '';
      $output = cache_get('views-exposed-form-companies-countries', 'cache');
      if (empty($output)) {
        $result = db_query("SELECT DISTINCT iso2, name from {field_data_field_country} f LEFT JOIN {countries_country} c ON f.field_country_iso2 = c.iso2 WHERE f.bundle = 'organization' AND c.iso2 IS NOT NULL ORDER BY name ASC");
        $defaultoptions = array('All'=>'- Any -');
        $output = $defaultoptions + $result->fetchAllKeyed();
        $form['name_list']['#options'] = $output;
      cache_set('views-exposed-form-companies-countries', $output, 'cache', time() + 120);
      } else{
        $form['name_list']['#options'] = $output->data;
      }

      // Alter the segment dropdown
      // Hide the 2nd level of taxonomy
      // In the future we might allow searching deeper
      foreach ($form['term_node_tid_depth']['#options'] as $key => $obj) {
        if (isset($obj->option)) {
          $option = $obj->option;
          if (strpos(current($option), "-") === 0) {
            unset($form['term_node_tid_depth']['#options'][$key]);
          }
        }
      }
    }
  }

  // Alter community view dropdowns
  if(isset($form_state['view'])) {
    if ($form_state['view']->name == 'community') {

      // Limit countries dropdown to users countries
      $output = '';
      $output = cache_get('views-exposed-form-community-countries', 'cache');
      if (empty($output)) {
        $result = db_query("SELECT DISTINCT iso2, name from {field_data_field_user_country} f LEFT JOIN {countries_country} c ON f.field_user_country_iso2 = c.iso2 WHERE f.bundle = 'user' AND c.iso2 IS NOT NULL ORDER BY name ASC");
        $defaultoptions = array('All'=>'- Any -');
        $output = $defaultoptions + $result->fetchAllKeyed();
        $form['name_list']['#options'] = $output;
      cache_set('views-exposed-form-community-countries', $output, 'cache', time() + 120);
      } else{
        $form['name_list']['#options'] = $output->data;
      }

      // Alter the segment dropdown
      // Hide the 2nd level of taxonomy
      // In the future we might allow searching deeper
      foreach ($form['taxonomy_entity_index_tid_depth']['#options'] as $key => $obj) {
        if (isset($obj->option)) {
          $option = $obj->option;
          if (strpos(current($option), "-") === 0) {
            unset($form['taxonomy_entity_index_tid_depth']['#options'][$key]);
          }
        }
      }
    }
  }
  
  if($form_id == "contact_site_form") {
    global $conf;
    $form['intro'] = array(
      '#markup' => "<p>Get in touch with " . $conf["tm_site_name"] . " and send us your ideas, comments or feedback!</p>",
      '#weight' => -10);
  }

  // disable user from choosing own contact form
  // http://stackoverflow.com/questions/2540582/how-do-i-disable-the-personal-contact-form-option-in-the-user-edit-form
  if ('user_profile_form' === $form_id) {
     $form['contact']['#access'] = FALSE;
  }

  // adjustments to the organization add form
  // hide row weights for non administrator/moderator
  // hide manager on first edit
  if ($form_id == 'organization_node_form') {
    
    // Hide row weights unless administrator or moderator
    global $user;
    if (!((in_array('administrator', $user->roles)) or (in_array('moderator', $user->roles)))) {
      $form['#attached']['js'][] = array(
        'data' => "(function ($, Drupal, window, document, undefined) {jQuery(document).ready(function(){ $('.tabledrag-toggle-weight-wrapper').hide(); });})(jQuery, Drupal, this, this.document);",
        'type' => 'inline',
      );
    }

    // Hide managed by if its first edit
    if (!(isset($form['nid']['#value']))) {
      hide($form['field_owner']);
    }
  }
}

// If user selected a home chapter on signup, then join it
// See: https://github.com/travelmassive/massiveplatform/issues/75
// todo: should check for a valid chapter id
function tm_users_user_insert(&$edit, $account, $category) {
  
  // need user
  if (!isset($edit['chapter_list'])) {
    return;
  }

  $chapter_id = $edit['chapter_list'];
  if (($chapter_id != null) && ($chapter_id > 0)) {    
    
    // flag the user so they join the chapter
    $signup_flag = flag_get_flag('signup');
    if ($signup_flag) {
      if (!$signup_flag->is_flagged($chapter_id, $account->uid)) {
        flag('flag', 'signup', $chapter_id, $account);
      } 
    }

  }

}

// If the user is already approved then overwrite role to approved when they save profile.
// Reason: if user signs up, and in middle of editing profile is approved, then
// saving their profile would overwrite the approved role (making them unapproved).
// This method fixes this edge case.
// see: https://github.com/travelmassive/massiveplatform/issues/68
function tm_users_user_presave(&$edit, $account, $category) {

  global $user;

  // only fire this method if saving your own account
  if ($account->uid == $user->uid) {

    // don't mess with administrators' forms
    if (in_array('administrator', $user->roles)) {
      return;
    }

    // if the user is already approved then override to be approved
    if (in_array('approved user', $user->roles)) {
      if ($role = user_role_load_by_name('approved user')) {

        // set approved user role
        $edit['roles'][$role->rid] = $role->rid;

        // below is a hammer if we need it
        // unset($edit["roles"]);
      }
    }
  }

}



