<?php
/**
 * @file
 * Code for the tm_users feature.
 */

include_once 'tm_users.features.inc';

/**
 * Implements hook_form_FORM_ID_alter()
 */
function tm_users_form_user_login_block_alter(&$form, &$form_state) {
  // Replace labels for placeholder on the input element
  $form['name']['#attributes'] = array('placeholder' => t('Email'));
  $form['pass']['#attributes'] = array('placeholder' => t('Password'));

  // Remove links and keep only the one to reset the password.
  $form['links'] = array();
  $form['links']['reset_pass'] = array(
    '#markup' => l(t('Forgot your password?'), 'user/password', array('title' => t('Request new password via email.')))
  );
  $form['links']['#weight'] = 100;
}

function tm_users_form_user_profile_form_alter(&$form, &$form_state) {
  // Add an indication of the username, in case users are not allowed to edit 
  // their usernames.
  if (!user_access('change own username')) {
    $form['account']['name']['#access'] = FALSE;
    $form['account']['name']['#disabled'] = TRUE;
    $form['account']['name']['#required'] = FALSE;
    unset($form['account']['name']['#description']);
  }

  // We don't want a collapsible fieldset nor description for the timezone.
  $form['timezone']['#type'] = 'fieldset';
  $form['timezone']['#collapsible'] = FALSE;
  unset($form['timezone']['#description']);
}


/**
 * Implements hook_theme()
 */
function tm_users_theme() {
  return array(
    'account_menu' => array(
      'template' => 'tm_users_account_menu',
      'path' => drupal_get_path('module', 'tm_users') . '/templates/'
    )
  );
}

/**
 * Implements template_preprocess_page()
 */
function tm_users_preprocess_page(&$variables) {

  // Add account menu to page.
  $variables['page']['account_menu'] = theme('account_menu');

  // disable personal contact form setting
  // see: http://stackoverflow.com/questions/2540582/how-do-i-disable-the-personal-contact-form-option-in-the-user-edit-form
  $menu_items = menu_get_item();
  if('user/%/edit' === $menu_items['path']){
       $variables['page']['content']['content']['content']['system_main']['contact']['#access'] = FALSE;
  }

  // Give the user some signup tips
  tm_users_signup_tips();

}

/*
* Implements hook_permission()
*/
function tm_users_permission() {
  return array(
    'approve users' => array(
      'title' => t('Approve users'),
      'description' => t('Approve new users on the website.'),
    ),
    'unapprove users' => array(
      'title' => t('Un-approve users'),
      'description' => t('Remove approval from users on the website.'),
    ),
  );
}
/*
* Implements hook_menu()
*/
function tm_users_menu() {
  $items['user/%user/approve'] = array(
    'title' => 'Approve user',
    'page callback' => 'tm_users_approve',
    'page arguments' => array(1),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/unapprove'] = array(
    'title' => 'Un-approve user',
    'page callback' => 'tm_users_unapprove',
    'page arguments' => array(1),
    'access arguments' => array('unapprove users'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/approval_need_more_info'] = array(
    'title' => 'Request more info',
    'page callback' => 'tm_users_approval_need_more_info',
    'page arguments' => array(1),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/approval_is_company_or_brand'] = array(
    'title' => 'Account is company or brand',
    'page callback' => 'tm_users_approval_is_company_or_brand',
    'page arguments' => array(1),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/request_approval'] = array(
    'title' => 'Request approval',
    'page callback' => 'tm_users_request_approval',
    'page arguments' => array(1),
    'access callback' => 'tm_users_check_request_approval',
    //'access arguments' => array('user_is_logged_in'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/* Approval callback */
function tm_users_approve($user){

  $approving_user = $GLOBALS['user'];
  $role_name = 'approved user'; // The name of the role to add.

  if ($role = user_role_load_by_name($role_name)) {
    user_multiple_role_edit(array($user->uid), 'add_role', $role->rid);

    // send notification message to user that they have been approved
    // there doesn't seem to be a hook that can detect we are applying a new role, so do it here
    $approving_user = user_uid_optional_load();
    // set profile url (either friendly url or community url)
    $profile_url = "community/" . $user->name;
    if (count($user->field_friendly_url) > 0) { 
      $profile_url = $user->field_friendly_url['und']['0']['value'];
    }
    $approval_text = "Your account has been approved by " . $approving_user->field_user_first_name[LANGUAGE_NONE][0]['value'] . ".";

    tm_notifications_notify('user_approved', $user, array('approving-user' => $approving_user, 'user' => $user, '__PROFILE_URL__' => $profile_url, '__APPROVAL_INTRO_TEXT__' => $approval_text));

    // Remove any moderation flags the user has
    $who_flagged = flag_get_entity_flags("user", $user->uid, "approval_is_company_or_brand");
    foreach ($who_flagged as $flagger) {
      $moderator = user_load($flagger->uid); 
      flag('unflag', 'approval_is_company_or_brand', $user->uid, $moderator);
    }

    $who_flagged = flag_get_entity_flags("user", $user->uid, "approval_need_more_info");
    foreach ($who_flagged as $flagger) {
      $moderator = user_load($flagger->uid); 
      flag('unflag', 'approval_need_more_info', $user->uid, $moderator);
    }
   
    flag('unflag', 'approval_requested_by_user', $user->uid, $user);

  }

  drupal_goto("user/$user->uid/view");
}

/* Approval callback for requesting approval */
function tm_users_check_request_approval() {

  // check the user is requesting approval for their own account
  $approval_user = arg(1);
  $logged_in_user = user_uid_optional_load();
  if (($approval_user != $logged_in_user->uid)) {
    return false;
  }

  // ok
  return true;
}

/* Request approval */
function tm_users_request_approval($user) {

  // set profile url (either friendly url or community url)
  $profile_url = "community/" . $user->name;
  if (count($user->field_friendly_url) > 0) { 
    $profile_url = $user->field_friendly_url['und']['0']['value'];
  }

  // construct a list of moderators to notify
  $moderator_ids = array();

  // Get list of people who flagged this user as needs more info
  $who_flagged = flag_get_entity_flags("user", $user->uid, "approval_need_more_info");
  foreach ($who_flagged as $flagger) {
    $moderator_ids[] = $flagger->uid;
  }

  // get list of people who flagged this user as a company or brand
  $who_flagged = flag_get_entity_flags("user", $user->uid, "approval_is_company_or_brand");
  foreach ($who_flagged as $flagger) {
    $moderator_ids[] = $flagger->uid;
  }

  // if user has not been flagged, fall back to their home chapter
  if (sizeof($moderator_ids) == 0) {

    if (sizeof($user->field_home_chapter) > 0) {

      // get home chapter
      $home_chapter_id = $user->field_home_chapter['und'][0]['target_id'];
      $home_chapter = node_load($home_chapter_id);
      foreach ($home_chapter->field_chapter_leaders['und'] as $leader) {
        $moderator_ids[] = $leader['target_id'];
      }
    }
  }

  // if user has not joined a chapter, fall back to all moderators
  if (sizeof($moderator_ids) == 0) {

    $moderator_id = array_search('moderator', user_roles());
    $query = 'SELECT DISTINCT(ur.uid) 
      FROM {users_roles} AS ur
      WHERE ur.rid IN (:rids)';
    $result = db_query($query, array(':rids' => array($moderator_id)));

    $moderator_ids = $result->fetchCol();
  }

  // don't send multiple notifications
  $moderator_ids = array_unique($moderator_ids);

  // notify list of moderators
  $first_name = $user->field_user_first_name['und'][0]['value'];
  $last_name = $user->field_user_last_name['und'][0]['value'];
  foreach ($moderator_ids as $uid) {

      // send notification
      $notify_user = user_load($uid);
      tm_notifications_notify('user_requested_approval', $notify_user, array('user' => $notify_user, '__USER_FIRST_NAME__' => $first_name, '__USER_LAST_NAME__' => $last_name, '__PROFILE_URL__' => $profile_url));
  }

  // flag user as having requested approval
  $flag = flag_get_flag('approval_requested_by_user');
  $flag->flag("flag", $user->uid);

  // Notify user
  drupal_set_message("Our team has been notified to review your account. Please ensure you've completed your profile to ensure your account is approved, thanks!");

  drupal_goto("user/$user->uid/view");

}


/* Need more info callback */
function tm_users_approval_need_more_info($user){

  $approving_user = $GLOBALS['user'];
  
  // send notification message to user that they need to provide more information
  // there doesn't seem to be a hook that can detect we are applying a new role, so do it here
  $approving_user = user_uid_optional_load();
  // set profile url (either friendly url or community url)
  $profile_url = "community/" . $user->name;
  if (count($user->field_friendly_url) > 0) { 
    $profile_url = $user->field_friendly_url['und']['0']['value'];
  }

  tm_notifications_notify('user_approval_need_more_info', $user, array('approving-user' => $approving_user, 'user' => $user, '__PROFILE_URL__' => $profile_url));

  // unflag then flag again
  flag('unflag', 'approval_need_more_info', $user->uid, $approving_user);
  flag('flag', 'approval_need_more_info', $user->uid, $approving_user);

  // unflag requested approval (so they can re-request if they already did)
  flag('unflag', 'approval_requested_by_user', $user->uid, $user);

  // Notify user
  drupal_set_message("An email has been sent to " . $user->mail . " requesting they complete their profile information.");

  drupal_goto("user/$user->uid/view");
}

/* Account is company or brand callback */
function tm_users_approval_is_company_or_brand($user){

  $approving_user = $GLOBALS['user'];
  $role_name = 'approved user'; // The name of the role to add.

  // send notification message to user that they need to provide more information
  // there doesn't seem to be a hook that can detect we are applying a new role, so do it here
  $approving_user = user_uid_optional_load();
  // set profile url (either friendly url or community url)
  $profile_url = "community/" . $user->name;
  if (count($user->field_friendly_url) > 0) { 
    $profile_url = $user->field_friendly_url['und']['0']['value'];
  }

  tm_notifications_notify('user_approval_is_company_or_brand', $user, array('approving-user' => $approving_user, 'user' => $user, '__PROFILE_URL__' => $profile_url));

  // flag the user that its a company or brand
  flag('unflag', 'approval_is_company_or_brand', $user->uid, $approving_user);
  flag('flag', 'approval_is_company_or_brand', $user->uid, $approving_user); 

  // unflag requested approval (so they can re-request if they already did)
  flag('unflag', 'approval_requested_by_user', $user->uid, $user);


  // Notify user
  drupal_set_message("An email has been sent to " . $user->mail . " requesting they personalize their account.");

  drupal_goto("user/$user->uid/view");
}

/* Un-approval callback */
function tm_users_unapprove($user){
  $role_name = 'approved user'; // The name of the role to remove.
  if ($role = user_role_load_by_name($role_name)) {
    user_multiple_role_edit(array($user->uid), 'remove_role', $role->rid);
  }
  drupal_goto("user/$user->uid/view");
}

/* Using Email Registration Form we automatically set the users email address */
/* https://www.drupal.org/project/email_registration */
function tm_users_email_registration_name($edit, $account) {
  // Your hook implementation should ensure that the resulting string
  // works as a username. You can use email_registration_cleanup_username($name)
  // to clean up the name.
  //return email_registration_cleanup_username('u' . $account->uid);

  // Make username from first and last name and a digit
  //print_r($account);
  $first_name = $account->field_user_first_name['und'][0]['value'];
  $last_name = $account->field_user_last_name['und'][0]['value'];
  // remove spaces
  $first_name = str_replace(" ", "", $first_name);
  $last_name = str_replace(" ", "", $last_name);
  $username = email_registration_cleanup_username($first_name . $last_name); 

  // check if username exists
  if (!db_query("SELECT COUNT(*) FROM {users} WHERE name = :name;", array(':name' => $username))->fetchField()) {
    return $username;
  }

  // username exists so lets add some digits
  for ($i = 2; $i < 100; $i++) {
    $new_username = $username . $i;
    if (!db_query("SELECT COUNT(*) FROM {users} WHERE name = :name;", array(':name' => $new_username))->fetchField()) {
    return $new_username;
    }
  }

  // still haven't found a username, generate a really long random number
  // could still happen but this is enough work
  return $username . rand(100, 1000000);

}

/**
 * Hook on creation of a new redirect in redirect module.
 * This is a sneaky method to delete automatically created user redirects
 * We preserve the original /community/name URL (for old links in notification emails)
 */
function tm_users_redirect_insert($redirect) {
  //print_r($redirect->source);
  $parts = explode("/", $redirect->redirect);
  $source_parts = explode("/", $redirect->source);
  if (($parts[0] == "user") && ($source_parts[0] != "community")) {
    redirect_delete_by_path($redirect->source);
  }
}

/* Check if a member is in a user's chapter */
function tm_users_member_in_users_chapter($member_uid, $chapter_leader_uid) {

  // Step 1. Fetch list of chapters the user has joined
  $flags = flag_get_user_flags("node", null, $member_uid);
  $chapters_nids = array();
  foreach ($flags as $flag_name => $flag) {
    if ($flag_name == "signup") {
      foreach($flag as $f) {
        $chapters_nids[] = $f->entity_id;
      }
    }
  }

  // Step 2. Fetch list of chapters the user is a leader of
  $chapters_leader_nids = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'chapter')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_chapter_leaders', 'target_id', $chapter_leader_uid, '=');

  $result = $query->execute();
  if (isset($result['node'])) {
    $chapters_leader_nids = array_keys($result['node']);
  }

  $intersect = array_intersect($chapters_nids, $chapters_leader_nids);
  return (sizeof($intersect) > 0);
}

/* 
 * Link by title to any chapters this user has joined
 * inserts this markup into the user menu tpl file
*/
function tm_users_menu_chapters($uid){
 
  $markup = "";
  $MAX_ITEMS = 4;

  // Step 1. Fetch list of chapters the user has joined
  $flags = flag_get_user_flags("node");
  $chapters_nids = array();
  foreach ($flags as $flag_name => $flag) {
    if ($flag_name == "signup") {
      foreach($flag as $f) {
        $chapters_nids[] = $f->entity_id;
      }
    }
  }

  // Step 2. Fetch list of chapters the user is a leader of
  $chapters_leader_nids = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'chapter')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_chapter_leaders', 'target_id', $uid, '=');

  $result = $query->execute();
  if (isset($result['node'])) {
    $chapters_leader_nids = array_keys($result['node']);
  }

  // Step 3. Join the two arrays of chapter leader nids and joined chapters
  $all_chapter_nids = $chapters_leader_nids;
  foreach ($chapters_nids as $nid) {
    $all_chapter_nids[] = $nid;
  }

  // Step 4. Create HTML
  $chapter_html = array();
  $chapter_leader_html = array();
  $num_items = 0;
  $count_chapters = 0;
  foreach ($all_chapter_nids as $nid) {

    $count_chapters++;

    //$img_url = 'public://images/chapters/Athens.jpg';  // the orig image uri
    $chapter = node_load($nid);

    $img_url = @$chapter->field_image['und'][0]['uri'];
    if ($img_url == "") { $img_url = "public://default_images/cover-default.jpg"; }
    $style = 'thumbnail';  // or any other custom image style you've created via /admin/config/media/image-styles

    // add to chapter html
    if (!array_key_exists($chapter->title, $chapter_html)) {

      // Create html for menu entry
      $chapter_leader_text = " (Member)";
      if (in_array($nid, $chapters_leader_nids)) { 
        $chapter_leader_text = " (Chapter Leader)";
      }

      $html = "<li style='margin-bottom: 4px;'><img align='left' style='margin-left: 16px; margin-top: 4px; padding-right: 8px; width: 40px;' src='".image_style_url($style, $img_url) . "'>" . l($chapter->title . $chapter_leader_text,'node/'.$chapter->nid) . '</li>';

      // Put into either a chapter or chapter_leader array
      if (in_array($nid, $chapters_leader_nids)) { 
        $chapter_leader_html[$chapter->title] = $html;
      } else {
        $chapter_html[$chapter->title] = $html;
      }
    }
  }

  // Step 5. Join HTML
  $markup = "";

  if ($count_chapters > 0) {

    // Sort the chapters by title
    ksort($chapter_html);
    ksort($chapter_leader_html);

    // Show chapters you are a chapter leader for first
    foreach ($chapter_leader_html as $html) {
      // only print max items
      $num_items++;
      if ($num_items > $MAX_ITEMS) {
        continue;
      }
      $markup .= $html;
    }

    // Show other chapters second
    foreach ($chapter_html as $html) {
      // only print max items
      $num_items++;
      if ($num_items > $MAX_ITEMS) {
        continue;
      }

      $markup .= $html;
    }
    if ($num_items > $MAX_ITEMS) {
      $markup .= "<li>" . l(t('(View ') . ($num_items - $MAX_ITEMS) . " more)", 'user/' . $uid) . "</li>";
    }
  }
  else {
    $markup .= "<li>" . l(t('Join a chapter'), 'chapters') . "</li>";
  }

  return $markup;
}


/* 
 * Link by title to any companies this user is managing 
 * inserts this markup into the user menu tpl file
*/
function tm_users_menu_companies($uid){

  $query = new EntityFieldQuery();
  $markup = '';
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'organization')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_owner', 'target_id', $uid, '=');

  $result = $query->execute();

  if (isset($result['node'])) {
    $companies_nids = array_keys($result['node']);
    foreach ($companies_nids as $nid) {
      $company = node_load($nid);
      $img_url = @$company->field_image['und'][0]['uri'];
      if ($img_url == "") { $img_url = "public://default_images/cover-default.jpg"; }
      $style = 'thumbnail';  // or any other custom image style you've created via /admin/config/media/image-styles
      $markup .= "<li style='margin-bottom: 4px;'><img align='left' style='margin-left: 16px; margin-top: 4px; padding-right: 8px; width: 40px;' src='".image_style_url($style, $img_url) . "'>". l($company->title,'node/'.$company->nid).'</li>'; 
    }
  }
  return $markup;
}

/* Checks if a user is a chapter leader of a chapter */
function tm_users_is_chapter_leader($uid, $chapterid){
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'chapter')
    ->propertyCondition('nid', $chapterid)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_chapter_leaders', 'target_id', $uid, '=');

  $result = $query->execute();

  if (isset($result['node'])) {
    return TRUE;
  }
  return FALSE;
}


// modify the user registration form
function _tm_users_modify_register_form(&$form, $form_state, $form_id) {

  // Step 1. Allow user to join up to chapter when they sign up

  // get a list of chapters
  $chapters = node_load_multiple(array(), array('type' => "chapter"));

  // create dropdown list
  $chapter_list = array();
  foreach ($chapters as $chapter) { // See this line in your original code
    $chapter_list[$chapter->nid] = $chapter->title; 
  }
  asort($chapter_list);
  $chapter_list = array("" => "Select a chapter", "-1" => "Choose later") + $chapter_list;
  
  // add chapter list to registraton form
  $form['chapter_list']=array(
    '#type'=>'select',
    '#title' => t('Home City'),
    '#options' => $chapter_list,
    '#multiple' => false,
    '#description'=>'Please select a home chapter to join.',
    '#weight'=>2,
  );

  
  // Step 2. Add an checkbox for company accounts

  // add chapter list to registraton form
  global $conf;
  $form['check_company']=array(
    '#type'=>'checkbox',
    '#title' => t('I\'m signing up as a Company / Brand'),
    '#element_validate' => array('_tm_users_company_validation_callback'),
    '#description'=> "Hold up! " . $conf["tm_site_name"] . " accounts are for individuals. Once your personal account is approved you can add a company profile to our companies section.",
    '#weight'=>1,
  );


  // Step 3. Add terms and conditions agreement to sign up form
  $form['cutomtext'] = array(
      '#type' => 'item',
      '#markup' => '<p class="description" style="text-align: center; margin-bottom: 12px;">By creating an account you agree to our <a target="_blank" href="/content/terms-use">Terms Of Use</a> and <a target = "_blank" href="/content/privacy-policy">Privacy Policy</a></p>',
      '#weight' => 10, // Adjust so that you can place it whereever 
      );
}

// Make sure users understand profiles are for individual use
function _tm_users_company_validation_callback($element, &$form_state, $form) {
  if (($form['check_company']['#checked'])) {
    $form['check_company']['#checked'] = false;
    global $conf;
    form_set_error('check_company', t("Hold up! " . $conf["tm_site_name"] . " accounts are for individuals. Once your personal account is approved you can add a company profile to our companies section.<br><br>Got it? Great! Please continue with creating your personal profile."));
  }
}

// Modify the user's profile form
function _tm_users_modify_profile_form(&$form, $form_state, $form_id) {

    // get current user
    $user = user_load($form['#user']->uid);

    // if they don't have a home chapter, hide the field
    if (sizeof($user->field_home_chapter) == 0) {      
      hide($form['field_home_chapter']);;
    }

    // hide loggintobgan revalidate notice since we print it anyway
    hide($form['revalidate']);
  }


function tm_users_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'user_login') {
    $form['cutomtext'] = array(
        '#type' => 'item',
        '#markup' => '<p style="margin-top: 0.8em;">Don\'t have an account? <a href="/user/register">Sign up</a></p>',
        '#weight' => 200, // Adjust so that you can place it whereever 
        );
  }

  // Modify registration form
  if (($form_id == 'user_register_form') or ($form_id == 'tm_users_external_signin_register_form')) {
    _tm_users_modify_register_form($form, $form_state, $form_id);
  }

  // Modify profile form
  if ($form_id == 'user_profile_form') {
    _tm_users_modify_profile_form($form, $form_state, $form_id);
  }

  // Hide revision information, authoring information from moderators
  // http://drupal.stackexchange.com/questions/45339/how-to-hide-authoring-information-revision-information-publishing-options-tabs-i
  global $user;
  if (!in_array('administrator', $user->roles)) {
    if (isset($form['revision_information'])) {
      $form['revision_information']['#access'] = FALSE;
      $form['author']['#access'] = FALSE;
      $form['options']['#access'] = FALSE;
      $form['padding_before_save'] = array(
        '#markup' => '<br>',
        '#weight' => 10);
    }
  }

  // Alter companies view dropdowns
  // Note this should be in tm_organizations but it doesn't seem to fire there
  if(isset($form_state['view'])) {
    if ($form_state['view']->name == 'companies') {

      // Limit countries dropdown to users countries
      $output = '';
      $output = cache_get('views-exposed-form-companies-countries', 'cache');
      if (empty($output)) {
        $result = db_query("SELECT DISTINCT iso2, name from {field_data_field_country} f LEFT JOIN {countries_country} c ON f.field_country_iso2 = c.iso2 WHERE f.bundle = 'organization' AND c.iso2 IS NOT NULL ORDER BY name ASC");
        $defaultoptions = array('All'=>'- Any -');
        $output = $defaultoptions + $result->fetchAllKeyed();
        $form['name_list']['#options'] = $output;
      cache_set('views-exposed-form-companies-countries', $output, 'cache', time() + 120);
      } else{
        $form['name_list']['#options'] = $output->data;
      }

      // Alter the segment dropdown
      // Hide the 2nd level of taxonomy
      // In the future we might allow searching deeper
      foreach ($form['term_node_tid_depth']['#options'] as $key => $obj) {
        if (isset($obj->option)) {
          $option = $obj->option;
          if (strpos(current($option), "-") === 0) {
            unset($form['term_node_tid_depth']['#options'][$key]);
          }
        }
      }
    }
  }

  // Alter community view dropdowns
  if(isset($form_state['view'])) {
    if ($form_state['view']->name == 'community') {

      // Limit countries dropdown to users countries
      $output = '';
      $output = cache_get('views-exposed-form-community-countries', 'cache');
      if (empty($output)) {
        $result = db_query("SELECT DISTINCT iso2, name from {field_data_field_user_country} f LEFT JOIN {countries_country} c ON f.field_user_country_iso2 = c.iso2 WHERE f.bundle = 'user' AND c.iso2 IS NOT NULL ORDER BY name ASC");
        $defaultoptions = array('All'=>'- Any -');
        $output = $defaultoptions + $result->fetchAllKeyed();
        $form['name_list']['#options'] = $output;
      cache_set('views-exposed-form-community-countries', $output, 'cache', time() + 120);
      } else{
        $form['name_list']['#options'] = $output->data;
      }

      // Alter the segment dropdown
      // Hide the 2nd level of taxonomy
      // In the future we might allow searching deeper
      foreach ($form['taxonomy_entity_index_tid_depth']['#options'] as $key => $obj) {
        if (isset($obj->option)) {
          $option = $obj->option;
          if (strpos(current($option), "-") === 0) {
            unset($form['taxonomy_entity_index_tid_depth']['#options'][$key]);
          }
        }
      }
    }
  }
  
  // Alter leaders view dropdowns
  if(isset($form_state['view'])) {

    if ($form_state['view']->name == 'chapter_leaders') {

      // Limit countries dropdown to users countries
      $output = '';
      $output = cache_get('views-exposed-form-leaders-countries', 'cache');
      if (empty($output)) {
        $result = db_query("SELECT DISTINCT iso2, name from {field_data_field_user_country} f LEFT JOIN {countries_country} c ON f.field_user_country_iso2 = c.iso2 WHERE f.bundle = 'user' AND c.iso2 IS NOT NULL ORDER BY name ASC");
        $defaultoptions = array('All'=>'- Any -');
        $output = $defaultoptions + $result->fetchAllKeyed();
        $form['name_list']['#options'] = $output;
      cache_set('views-exposed-form-leaders-countries', $output, 'cache', time() + 120);
      } else{
        $form['name_list']['#options'] = $output->data;
      }
      
    }
  }

  if($form_id == "contact_site_form") {
    global $conf;
    $form['intro'] = array(
      '#markup' => "<p>Get in touch with " . $conf["tm_site_name"] . " and send us your ideas, comments or feedback!</p>",
      '#weight' => -10);
  }

  // disable user from choosing own contact form
  // http://stackoverflow.com/questions/2540582/how-do-i-disable-the-personal-contact-form-option-in-the-user-edit-form
  if ('user_profile_form' === $form_id) {
     $form['contact']['#access'] = FALSE;
  }

  // adjustments to the organization add form
  // hide row weights for non administrator/moderator
  // hide manager on first edit
  if ($form_id == 'organization_node_form') {
    
    // Hide row weights unless administrator or moderator
    global $user;
    if (!((in_array('administrator', $user->roles)) or (in_array('moderator', $user->roles)))) {
      $form['#attached']['js'][] = array(
        'data' => "(function ($, Drupal, window, document, undefined) {jQuery(document).ready(function(){ $('.tabledrag-toggle-weight-wrapper').hide(); });})(jQuery, Drupal, this, this.document);",
        'type' => 'inline',
      );
    }

    // Hide managed by if its first edit
    if (!(isset($form['nid']['#value']))) {
      hide($form['field_owner']);
    }
  }
}

// If user selected a home chapter on signup, then join it
// See: https://github.com/travelmassive/massiveplatform/issues/75
// todo: should check for a valid chapter id
function tm_users_user_insert(&$edit, $account, $category) {
  
  // need user
  if (!isset($edit['chapter_list'])) {
    return;
  }

  $chapter_id = $edit['chapter_list'];
  if (($chapter_id != null) && ($chapter_id > 0)) {    
    
    // flag the user so they join the chapter
    $signup_flag = flag_get_flag('signup');
    if ($signup_flag) {
      if (!$signup_flag->is_flagged($chapter_id, $account->uid)) {
        flag('flag', 'signup', $chapter_id, $account);
      } 
    }

  }

}


// ITEM 1
// If the user is already approved then overwrite role to approved when they save profile.
// Reason: if user signs up, and in middle of editing profile is approved, then
// saving their profile would overwrite the approved role (making them unapproved).
// This method fixes this edge case.
// see: https://github.com/travelmassive/massiveplatform/issues/68
// 
// ITEM 2
// Strip spaces from URL fields

function tm_users_user_presave(&$edit, $account, $category) {

  global $user;

  // only fire this method if saving your own account
  if ($account->uid == $user->uid) {

    // don't mess with administrators' forms
    if (in_array('administrator', $user->roles)) {
      return;
    }

    // if the user is already approved then override to be approved
    if (in_array('approved user', $user->roles)) {
      if ($role = user_role_load_by_name('approved user')) {

        // set approved user role
        $edit['roles'][$role->rid] = $role->rid;

        // below is a hammer if we need it
        // unset($edit["roles"]);
      }
    }

    // Trim all URL fields
    // Otherwise a blank space causes the link to be rendered blank
    $field_names = array("field_link_website", "field_link_twitter", "field_link_linkedin", "field_link_facebook");
    foreach ($field_names as $field_name) {
       if (isset($edit[$field_name][LANGUAGE_NONE][0]['url'])) {
        if (trim($edit[$field_name][LANGUAGE_NONE][0]['url']) == "") {
          $edit[$field_name][LANGUAGE_NONE] = array();
        }
      }
    }
  }

}


/* Get the signup score of the users profile */
/* It will be between 0 and 100 based on how much the user has filled in */
function tm_users_signup_score() {
  return tm_users_signup_tips(true);
}

/* Give new members some signup tips to help */
function tm_users_signup_tips($return_score = false) {

  global $user;
  global $conf;

  // don't calculate to non-logged in users
  if (!user_is_logged_in()) {
    return 0;
  }

  $account = user_load($user->uid);

  $user_tip = "";
  $user_points = 10; // some points for signing up
  $total_points = 10; // start at 10

   // user edit page
  $edit_url = "user/" . $user->uid . "/edit";

  // job role (10 points)
  $total_points += 10;
  if (sizeof($account->field_about_me) == 0) {
    if ($user_tip == "") {
      $user_tip = "Share a little bit " . l(t('about yourself'), $edit_url, array('fragment' => 'edit-field-about-me')) . " and your story with the community.";
    }
  } else {
    $user_points += 10;
  }

  // location (city and country) (10 points)
  $total_points += 10;
  if ((sizeof($account->field_location_city) == 0) or (sizeof($account->field_user_country) == 0)) {
    if ($user_tip == "") {
      $user_tip = "Tell us " . l(t('where you are located'), $edit_url, array('fragment' => 'edit-field-location-city')) . " so other members can discover you.";
    }
  } else {
    $user_points += 10;
  }

  // job role (10 points)
  $total_points += 10;
  if (sizeof($account->field_job_role) == 0) {
    if ($user_tip == "") {
      $user_tip = "Share your " . l(t('job role'), $edit_url, array('fragment' => 'edit-field-job-role')) . " so like-minded members can connect with you.";
    }
  } else {
    $user_points += 10;
  }

  // organization (10 points)
  $total_points += 10;
  if (sizeof($account->field_job_organization) == 0) {
    if ($user_tip == "") {
      $user_tip = "Share the organization " . l(t('where you work'), $edit_url, array('fragment' => 'edit-field-job-organization')) . ", unless you're a top secret agent.";
    }
  } else {
    $user_points += 10;
  }

  // industry segment (10 points)
  $total_points += 10;
  if (sizeof($account->field_segment) == 0) {
    if ($user_tip == "") {
      $user_tip = "Select an " . l(t('industy segment'), $edit_url, array('fragment' => 'edit-field-segment')) . " to help us connect you with other members.";
    }
  } else {
    $user_points += 10;
  }

  // user photo (10 points)
  $total_points += 10;
  if (sizeof($account->field_avatar) == 0) {
    if ($user_tip == "") {
      $user_tip = "Upload a " . l(t('profile photo'), $edit_url, array('fragment' => 'edit-field-avatar')) . " so members can recognize you.";
    }
  } else {
    $user_points += 10;
  }

  // cover photo (10 points)
  $total_points += 10;
  if (sizeof($account->field_image) == 0) {
    if ($user_tip == "") {
      $user_tip = "Upload a " . l(t('cover image'), $edit_url, array('fragment' => 'edit-field-image')) . " to make your profile stand out.";
    }
  } else {
    $user_points += 10;
  }

  // profile questions (10 points)
  $total_points += 10;
  // get question fields
  // we search the object array rather than hardcoding in case the question fields are changed
  $object_vars = get_object_vars($account);
  $has_answered_question = false;
  foreach ($object_vars as $name => $value) {
    if (strpos($name, "field_user_question_") === 0) {
      if (sizeof($value) > 0) {
        $has_answered_question = true;
      }
    }
  }
  if (!$has_answered_question) {
    if ($user_tip == "") {
      $user_tip = "Answer some " . l(t('profile questions'), $edit_url, array('fragment' => 'edit-field-user-question-destination')) . " so other members can learn about you.";
    }
  } else {
    $user_points += 10;
  }

  // website fields (10 points)
  $total_points += 10;
  // get website fields
  // we search the object array rather than hardcoding in case more links are added
  $object_vars = get_object_vars($account);
  $has_linked_website = false;
  foreach ($object_vars as $name => $value) {
    if (strpos($name, "field_link_") === 0) {
      if (sizeof($value) > 0) {
        $has_linked_website = true;
      }
    }
  }
  if (!$has_linked_website) {
    if ($user_tip == "") {
      $user_tip = "List your " . l(t('website, blog, or social accounts'), $edit_url, array('fragment' => 'edit-field-link-website')) . " so other members can find you.";
    }
  } else {
    $user_points += 10;
  }

  // calculate percentage complete
  $percentage = round((($user_points / $total_points) * 100), 0);
  // score is in 0 to 100 in increments of 5
  $user_score = round($percentage*2,-1)/2;

  // Option 1. Return score
  // if we only want the score
  // score wil be 0 to 100
  if ($return_score) {
      return $user_score;
  }

  // Option 2. Display the tips
  // Don't show on user edit page
  $menu_items = menu_get_item();
  if('user/%/edit' === $menu_items['path']) { 
    return;
  }

  // Don't show on companies page
  if (explode("/", current_path())[0] == "companies") {
    return;
  }

  // Don't show on admin page
  if (explode("/", current_path())[0] == "admin") {
    return;
  }

  // Display the user tip
  if ($user_tip != "") {
      $user_tip = "Your profile is " . $user_score . "% complete. " . $user_tip;
      drupal_set_message($user_tip, 'page_notice');
  }

  return;
}



