<?php
/**
 * @file
 * Code for the tm_users feature.
 */

include_once 'tm_users.features.inc';

/**
 * Implements hook_form_FORM_ID_alter()
 */
function tm_users_form_user_login_block_alter(&$form, &$form_state) {
  // Replace labels for placeholder on the input element
  $form['name']['#attributes'] = array('placeholder' => t('Email'));
  $form['pass']['#attributes'] = array('placeholder' => t('Password'));

  // Remove links and keep only the one to reset the password.
  $form['links'] = array();
  $form['links']['reset_pass'] = array(
    '#markup' => l(t('Forgot your password?'), 'user/password', array('title' => t('Request new password via email.')))
  );
  $form['links']['#weight'] = 100;
}

function tm_users_form_user_profile_form_alter(&$form, &$form_state) {

  // Add an indication of the username, in case users are not allowed to edit 
  // their usernames.
  if (!user_access('change own username')) {
    $form['account']['name']['#access'] = FALSE;
    $form['account']['name']['#disabled'] = TRUE;
    $form['account']['name']['#required'] = FALSE;
    unset($form['account']['name']['#description']);
  }

  // We don't want a collapsible fieldset nor description for the timezone.
  $form['timezone']['#type'] = 'fieldset';
  $form['timezone']['#collapsible'] = FALSE;
  unset($form['timezone']['#description']);

  // Redirect user to their profile page when they save profile
  // http://drupal.stackexchange.com/questions/64171/redirect-user-to-their-profile-page-after-saving
  $form['#submit'][] = 'tm_users_user_profile_form_submit';

  // Add javascript protection to prompt to save profile if its edited
  // Use case is that many users don't click the save button on their profile
  drupal_add_js(drupal_get_path('module', 'tm_users') . '/js/user-edit-protection.js');

  // Allow users to cancel their accounts
  // Note: Chapter leaders and moderators don't get the link as they may have content
  // Todo: With subscription model, warn user of any active subscriptions
  // Disabled until further testing.
  // See: https://github.com/travelmassive/massiveplatform/issues/81
  /*global $user;
  if ((!in_array("chapter leader", $user->roles)) && (!in_array("moderator", $user->roles)) && (!in_array("administrator", $user->roles))) {

    $cancel_url = "user/" . $user->uid . "/cancel";
    $form['cancel_account_link'] = array('#markup' => l(t('Remove account'), $cancel_url, array('attributes' => array('class' => array('cancel_account_link')))), '#weight' => 100);
    $form['#group_children']['cancel_account_link'] = 'group_user_account';
  }*/

}

// Redirect user to their profile page
function tm_users_user_profile_form_submit($form, &$form_state) {
  $user_id = $form['#user']->uid;
  drupal_goto(drupal_get_path_alias('user/' . $user_id));
}


/**
 * Implements hook_theme()
 */
function tm_users_theme() {
  return array(
    'account_menu' => array(
      'template' => 'tm_users_account_menu',
      'path' => drupal_get_path('module', 'tm_users') . '/templates/'
    )
  );
}

/**
 * Implements template_preprocess_page()
 */
function tm_users_preprocess_page(&$variables) {

  // Add account menu to page.
  $variables['page']['account_menu'] = theme('account_menu');

  // disable personal contact form setting
  // see: http://stackoverflow.com/questions/2540582/how-do-i-disable-the-personal-contact-form-option-in-the-user-edit-form
  $menu_items = menu_get_item();
  if('user/%/edit' === $menu_items['path']){
       $variables['page']['content']['content']['content']['system_main']['contact']['#access'] = FALSE;
  }

  // Split url parts
  $url_parts = explode("/", request_path());

  // Show chapter page tips
  if (($url_parts[0] == "chapters") and (sizeof($url_parts) == 1)) {
    tm_users_chapter_tips();
  }

  // Show chapter page tips
  if (($url_parts[0] == "chapters") and (sizeof($url_parts) == 2)) {
    tm_users_in_chapter_tips();
  }
  // Show chapter page tips
  // ie /node/12833/members
  if (($url_parts[0] == "node") and ($url_parts[2] == "members") and (sizeof($url_parts) == 3)) {
    tm_users_in_chapter_tips();
  }

  // Show leaders page tips
  if (($url_parts[0] == "leaders") and (sizeof($url_parts) == 1)) {
    tm_users_leaders_tips();
  }

  // Show community page tips
  if (($url_parts[0] == "community") and (sizeof($url_parts) == 1)) {
    tm_users_community_tips();
  }  

  // Show events page tips
  if (($url_parts[0] == "events") and (sizeof($url_parts) == 1)) {
    tm_users_event_tips();
  }

  // Show events page tips
  if (($url_parts[0] == "sponsors") and (sizeof($url_parts) == 1)) {
    tm_users_sponsors_tips();
  }

  // Show user signup tips if < 80% complete
  tm_users_signup_tips(false, null, 80);

}

/*
* Implements hook_permission()
*/
function tm_users_permission() {
  return array(
    'approve users' => array(
      'title' => t('Approve users'),
      'description' => t('Approve new users on the website.'),
    ),
    'unapprove users' => array(
      'title' => t('Un-approve users'),
      'description' => t('Remove approval from users on the website.'),
    ),
  );
}

/*
* Implements hook_menu()
*/
function tm_users_menu() {
  $items['user/%user/approve'] = array(
    'title' => 'Approve user',
    'page callback' => 'tm_users_approve',
    'page arguments' => array(1),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/unapprove'] = array(
    'title' => 'Un-approve user',
    'page callback' => 'tm_users_unapprove',
    'page arguments' => array(1),
    'access arguments' => array('unapprove users'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/approval_need_more_info'] = array(
    'title' => 'Request more info',
    'page callback' => 'tm_users_approval_need_more_info',
    'page arguments' => array(1),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/approval_is_company_or_brand'] = array(
    'title' => 'Account is company or brand',
    'page callback' => 'tm_users_approval_is_company_or_brand',
    'page arguments' => array(1),
    'access arguments' => array('approve users'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/request_approval'] = array(
    'title' => 'Request approval',
    'page callback' => 'tm_users_request_approval',
    'page arguments' => array(1),
    'access callback' => 'tm_users_check_request_approval',
    //'access arguments' => array('user_is_logged_in'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/moderate_non_community_profile'] = array(
    'title' => 'Request approval',
    'page callback' => 'tm_users_moderate_non_community_profile',
    'page arguments' => array(1),
    'access arguments' => array('approve users'),
    //'access arguments' => array('user_is_logged_in'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/* Approval callback */
function tm_users_approve($user) {

  $approving_user = $GLOBALS['user'];
  $role_name = 'approved user'; // The name of the role to add.

  if ($role = user_role_load_by_name($role_name)) {
    user_multiple_role_edit(array($user->uid), 'add_role', $role->rid);

    // send notification message to user that they have been approved
    // there doesn't seem to be a hook that can detect we are applying a new role, so do it here
    $approving_user = user_uid_optional_load();
    // set profile url (either friendly url or community url)
    $profile_url = drupal_get_path_alias("user/" . $user->uid);

    $approval_text = "Your account has been approved by " . $approving_user->field_user_first_name[LANGUAGE_NONE][0]['value'] . ".";

    // Set moderator's reply-to address if they have allowed in their notification settings
    $reply_to = null;
    $notif = new TMNotification("user_approval_allow_reply_to");
    if ($notif->isEnabled($approving_user->uid)) {
      $reply_to = $approving_user->mail;
    }

    tm_notifications_notify('user_approved', $user, array('approving-user' => $approving_user, 'user' => $user, '__PROFILE_URL__' => $profile_url, '__APPROVAL_INTRO_TEXT__' => $approval_text, '__REPLY_TO__' => $reply_to));

    // Remove any moderation flags the user has

    // Unflag approval_is_company_or_brand
    $who_flagged = flag_get_entity_flags("user", $user->uid, "approval_is_company_or_brand");
    foreach ($who_flagged as $flagger) {
      $moderator = user_load($flagger->uid); 
      flag('unflag', 'approval_is_company_or_brand', $user->uid, $moderator);
    }

    // Unflag approval_need_more_info
    $who_flagged = flag_get_entity_flags("user", $user->uid, "approval_need_more_info");
    foreach ($who_flagged as $flagger) {
      $moderator = user_load($flagger->uid); 
      flag('unflag', 'approval_need_more_info', $user->uid, $moderator);
    }

    // Unflag moderate_non_community_profile
    $who_flagged = flag_get_entity_flags("user", $user->uid, "moderate_non_community_profile");
    foreach ($who_flagged as $flagger) {
      $moderator = user_load($flagger->uid); 
      flag('unflag', 'moderate_non_community_profile', $user->uid, $moderator);
    }

    // Remove approval request flag
    flag('unflag', 'approval_requested_by_user', $user->uid, $user);

    // Keep track of who approved with approval_approved_by flag
    flag('flag', 'approval_approved_by', $user->uid, $approving_user);

  }

  drupal_goto(drupal_get_path_alias("user/$user->uid"));
}

/* Approval callback for requesting approval */
function tm_users_check_request_approval() {

  // check the user is requesting approval for their own account
  $approval_user = arg(1);
  $logged_in_user = user_uid_optional_load();
  if (($approval_user != $logged_in_user->uid)) {
    return false;
  }

  // ok
  return true;
}

/* Request approval */
function tm_users_request_approval($user) {

  // set profile url (either friendly url or community url)
  $profile_url = drupal_get_path_alias("user/" . $user->uid);

  // get reason for approving and store update user object
  $reason_for_joining = trim($_GET["reason_for_joining"]);
  $user->field_reason_for_joining[LANGUAGE_NONE][0]['value'] = $reason_for_joining;
  field_attach_update('user', $user);

  // construct a list of moderators to notify
  $moderator_ids = array();

  // Get list of people who flagged this user as needs more info
  $who_flagged = flag_get_entity_flags("user", $user->uid, "approval_need_more_info");
  foreach ($who_flagged as $flagger) {
    $moderator_ids[] = $flagger->uid;
  }

  // get list of people who flagged this user as a company or brand
  $who_flagged = flag_get_entity_flags("user", $user->uid, "approval_is_company_or_brand");
  foreach ($who_flagged as $flagger) {
    $moderator_ids[] = $flagger->uid;
  }

  // if user has not been flagged, fall back to their home chapter
  if (sizeof($moderator_ids) == 0) {

    if (sizeof($user->field_home_chapter) > 0) {

      // get home chapter
      $home_chapter_id = $user->field_home_chapter['und'][0]['target_id'];
      $home_chapter = node_load($home_chapter_id);
      foreach ($home_chapter->field_chapter_leaders['und'] as $leader) {
        $moderator_ids[] = $leader['target_id'];
      }
    }
  }

  // if user has not joined a chapter, fall back to all moderators
  if (sizeof($moderator_ids) == 0) {

    $moderator_id = array_search('moderator', user_roles());
    $query = 'SELECT DISTINCT(ur.uid) 
      FROM {users_roles} AS ur
      WHERE ur.rid IN (:rids)';
    $result = db_query($query, array(':rids' => array($moderator_id)));

    $moderator_ids = $result->fetchCol();
  }

  // don't send multiple notifications
  $moderator_ids = array_unique($moderator_ids);

  // notify list of moderators
  $first_name = $user->field_user_first_name['und'][0]['value'];
  $last_name = $user->field_user_last_name['und'][0]['value'];

  // send notification
  $reason_for_joining_safe = strip_tags(check_plain($reason_for_joining));
  if ($reason_for_joining_safe == "") {
    $reason_for_joining_safe = "(not provided)";
  }

  foreach ($moderator_ids as $uid) {

      $notify_user = user_load($uid);
      tm_notifications_notify('user_requested_approval', $notify_user, array('user' => $notify_user, '__USER_FIRST_NAME__' => $first_name, '__USER_LAST_NAME__' => $last_name, '__PROFILE_URL__' => $profile_url, '__REASON_FOR_JOINING__' => $reason_for_joining_safe));
  }

  // flag user as having requested approval
  $flag = flag_get_flag('approval_requested_by_user');
  $flag->flag("flag", $user->uid);

  // Notify user
  drupal_set_message("Our team has been notified to review your account. Please ensure you've completed your profile to ensure your account is approved, thanks!");

  drupal_goto(drupal_get_path_alias("user/$user->uid"));

}


/* Need more info callback */
function tm_users_approval_need_more_info($user){

  $approving_user = $GLOBALS['user'];

  // send notification message to user that they need to provide more information
  // there doesn't seem to be a hook that can detect we are applying a new role, so do it here
  $approving_user = user_uid_optional_load();
  // set profile url (either friendly url or community url)
  $profile_url = drupal_get_path_alias("user/" . $user->uid);

  $moderator_first_name = $approving_user->field_user_first_name['und'][0]['value'];

  // get moderator message to send to member
  // add line breaks
  $moderator_message = trim($_GET["moderator_message"]);
  $moderator_message_safe = "";
  if ($moderator_message != "") {
      $moderator_message_safe = "<br><strong>Message from " . $moderator_first_name . ":</strong> " . check_plain($moderator_message) . "<br>";
      $moderator_message_safe = str_replace("__NL__", "<br>", $moderator_message_safe); 
  }

  // Set moderator's reply-to address if they have allowed in their notification settings
  $reply_to = null;
  $notif = new TMNotification("user_approval_allow_reply_to");
  if ($notif->isEnabled($approving_user->uid)) {
    $reply_to = $approving_user->mail;
  }

  tm_notifications_notify('user_approval_need_more_info', $user, array('approving-user' => $approving_user, 'user' => $user, '__PROFILE_URL__' => $profile_url, '__MODERATOR_FIRST_NAME__' => $moderator_first_name, '__MODERATOR_MESSAGE__' => $moderator_message_safe, '__REPLY_TO__' => $reply_to));

  // unflag then flag again
  flag('unflag', 'approval_need_more_info', $user->uid, $approving_user);
  flag('flag', 'approval_need_more_info', $user->uid, $approving_user);

  // unflag requested approval (so they can re-request if they already did)
  flag('unflag', 'approval_requested_by_user', $user->uid, $user);

  // Notify user
  drupal_set_message("An email has been sent to " . $user->mail . " requesting they complete their profile information.");

  drupal_goto(drupal_get_path_alias("user/$user->uid"));
}

/* Account is company or brand callback */
function tm_users_approval_is_company_or_brand($user){

  $approving_user = $GLOBALS['user'];
  $role_name = 'approved user'; // The name of the role to add.

  // send notification message to user that they need to provide more information
  // there doesn't seem to be a hook that can detect we are applying a new role, so do it here
  $approving_user = user_uid_optional_load();
  // set profile url (either friendly url or community url)
  $profile_url = drupal_get_path_alias("user/" . $user->uid);

  $moderator_first_name = $approving_user->field_user_first_name['und'][0]['value'];

  // get moderator message to send to member
  // add line breaks
  $moderator_message = trim($_GET["moderator_message"]);
  $moderator_message_safe = "";
  if ($moderator_message != "") {
      $moderator_message_safe = "<br><strong>Message from " . $moderator_first_name . ":</strong> " . check_plain($moderator_message) . "<br>";
      $moderator_message_safe = str_replace("__NL__", "<br>", $moderator_message_safe); 
  }

  // Set moderator's reply-to address if they have allowed in their notification settings
  $reply_to = null;
  $notif = new TMNotification("user_approval_allow_reply_to");
  if ($notif->isEnabled($approving_user->uid)) {
    $reply_to = $approving_user->mail;
  }

  tm_notifications_notify('user_approval_is_company_or_brand', $user, array('approving-user' => $approving_user, 'user' => $user, '__PROFILE_URL__' => $profile_url, '__MODERATOR_FIRST_NAME__' => $moderator_first_name, '__MODERATOR_MESSAGE__' => $moderator_message_safe, '__REPLY_TO__' => $reply_to));

  // flag the user that its a company or brand
  flag('unflag', 'approval_is_company_or_brand', $user->uid, $approving_user);
  flag('flag', 'approval_is_company_or_brand', $user->uid, $approving_user); 

  // unflag requested approval (so they can re-request if they already did)
  flag('unflag', 'approval_requested_by_user', $user->uid, $user);

  // Notify user
  drupal_set_message("An email has been sent to " . $user->mail . " requesting they personalize their account.");

  drupal_goto(drupal_get_path_alias("user/$user->uid"));
}


/* Profile does not meet community criteria */
function tm_users_moderate_non_community_profile($user){

  global $conf;
  $approving_user = $GLOBALS['user'];

  // Permission check in addition to access arguments
  // Don't allow flagging of admin account
  if (((in_array('administrator', $user->roles)) 
    or (in_array('moderator', $user->roles))) 
    or (in_array('chapter leader', $user->roles))) {
    drupal_set_message("Unable to flag this account as non-community.");
    return;
  }

  // Send notification message to user that their account doesn't meet community guidelines
  // there doesn't seem to be a hook that can detect we are applying a new role, so do it here
  $approving_user = user_uid_optional_load();
  // set profile url (either friendly url or community url)
  $profile_url = drupal_get_path_alias("user/" . $user->uid);

  $moderator_first_name = $approving_user->field_user_first_name['und'][0]['value'];

  // get moderator message to send to member
  // add line breaks
  $moderator_message = trim($_GET["moderator_message"]);
  $moderator_message_safe = "";
  if ($moderator_message != "") {
      $moderator_message_safe = "<br><strong>Message from " . $moderator_first_name . ":</strong> " . check_plain($moderator_message) . "<br>";
      $moderator_message_safe = str_replace("__NL__", "<br>", $moderator_message_safe); 
  }

  // Set moderator's reply-to address if they have allowed in their notification settings
  $reply_to = null;
  $notif = new TMNotification("user_approval_allow_reply_to");
  if ($notif->isEnabled($approving_user->uid)) {
    $reply_to = $approving_user->mail;
  }

  $community_guidelines_url = $conf["tm_community_guidelines_url"];
  tm_notifications_notify('user_approval_community_guidelines', $user, array('approving-user' => $approving_user, 'user' => $user, '__PROFILE_URL__' => $profile_url, '__MODERATOR_FIRST_NAME__' => $moderator_first_name, '__MODERATOR_MESSAGE__' => $moderator_message_safe, '__COMMUNITY_GUIDELINES_URL__' => $community_guidelines_url, '__REPLY_TO__' => $reply_to));

  // flag the user their profile does not meet community guidelines
  flag('unflag', 'moderate_non_community_profile', $user->uid, $approving_user);
  flag('flag', 'moderate_non_community_profile', $user->uid, $approving_user); 

  // set the user to unapproved
  $role_name = 'approved user'; // The name of the role to remove.
  if ($role = user_role_load_by_name($role_name)) {
    user_multiple_role_edit(array($user->uid), 'remove_role', $role->rid);
  }

  // unflag requested approval (so they can re-request if they already did)
  flag('unflag', 'approval_requested_by_user', $user->uid, $user);

  // Notify user
  drupal_set_message("An email has been sent to " . $user->mail . " requesting they address the membership guidelines of the community.");

  drupal_goto(drupal_get_path_alias("user/$user->uid"));
}

/* Un-approval callback */
function tm_users_unapprove($user){
  $role_name = 'approved user'; // The name of the role to remove.
  if ($role = user_role_load_by_name($role_name)) {
    user_multiple_role_edit(array($user->uid), 'remove_role', $role->rid);
  }

  drupal_goto(drupal_get_path_alias("user/$user->uid"));
}

/* Using Email Registration Form we automatically set the users email address */
/* https://www.drupal.org/project/email_registration */
function tm_users_email_registration_name($edit, $account) {
  // Your hook implementation should ensure that the resulting string
  // works as a username. You can use email_registration_cleanup_username($name)
  // to clean up the name.
  //return email_registration_cleanup_username('u' . $account->uid);

  // Make username from first and last name and a digit
  //print_r($account);
  $first_name = $account->field_user_first_name['und'][0]['value'];
  $last_name = $account->field_user_last_name['und'][0]['value'];
  // remove spaces
  $first_name = str_replace(" ", "", $first_name);
  $last_name = str_replace(" ", "", $last_name);
  $username = email_registration_cleanup_username($first_name . $last_name); 

  // check if username exists
  if (!db_query("SELECT COUNT(*) FROM {users} WHERE name = :name;", array(':name' => $username))->fetchField()) {
    return $username;
  }

  // username exists so lets add some digits
  for ($i = 2; $i < 100; $i++) {
    $new_username = $username . $i;
    if (!db_query("SELECT COUNT(*) FROM {users} WHERE name = :name;", array(':name' => $new_username))->fetchField()) {
    return $new_username;
    }
  }

  // still haven't found a username, generate a really long random number
  // could still happen but this is enough work
  return $username . rand(100, 1000000);

}

/**
 * Hook on creation of a new redirect in redirect module.
 * This is a sneaky method to delete automatically created user redirects
 * We preserve the original /community/name URL (for old links in notification emails)
 */
function tm_users_redirect_insert($redirect) {
  //print_r($redirect->source);
  $parts = explode("/", $redirect->redirect);
  $source_parts = explode("/", $redirect->source);
  if (($parts[0] == "user") && ($source_parts[0] != "community")) {
    redirect_delete_by_path($redirect->source);
  }
}

/* Check if a member is in a user's chapter */
function tm_users_member_in_users_chapter($member_uid, $chapter_leader_uid, $return_true_no_chapter = false) {

  // Step 1. Fetch list of chapters the user has joined
  $flags = flag_get_user_flags("node", null, $member_uid);
  $chapters_nids = array();
  foreach ($flags as $flag_name => $flag) {
    if ($flag_name == "signup") {
      foreach($flag as $f) {
        $chapters_nids[] = $f->entity_id;
      }
    }
  }

  // If user has not joined any chapters, we can return true
  // This is for cases where chapter leader can moderator members with no chapter
  if (((sizeof($chapters_nids)) == 0) && ($return_true_no_chapter)) {
    return true;
  }

  // Step 2. Fetch list of chapters the user is a leader of
  $chapters_leader_nids = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'chapter')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_chapter_leaders', 'target_id', $chapter_leader_uid, '=');

  $result = $query->execute();
  if (isset($result['node'])) {
    $chapters_leader_nids = array_keys($result['node']);
  }

  $intersect = array_intersect($chapters_nids, $chapters_leader_nids);
  return (sizeof($intersect) > 0);
}

/* 
 * Link by title to any chapters this user has joined
 * inserts this markup into the user menu tpl file
*/
function tm_users_menu_chapters($uid){
 
  $markup = "";
  $MAX_ITEMS = 4;

  // Step 1. Fetch list of chapters the user has joined
  $flags = flag_get_user_flags("node");
  $chapters_nids = array();
  foreach ($flags as $flag_name => $flag) {
    if ($flag_name == "signup") {
      foreach($flag as $f) {
        $chapters_nids[] = $f->entity_id;
      }
    }
  }

  // Step 2. Fetch list of chapters the user is a leader of
  $chapters_leader_nids = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'chapter')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_chapter_leaders', 'target_id', $uid, '=');

  $result = $query->execute();
  if (isset($result['node'])) {
    $chapters_leader_nids = array_keys($result['node']);
  }

  // Step 3. Join the two arrays of chapter leader nids and joined chapters
  $all_chapter_nids = $chapters_leader_nids;
  foreach ($chapters_nids as $nid) {
    $all_chapter_nids[] = $nid;
  }

  // Step 4. Create HTML
  $chapter_html = array();
  $chapter_leader_html = array();
  $num_items = 0;
  $count_chapters = 0;
  foreach ($all_chapter_nids as $nid) {

    $count_chapters++;

    //$img_url = 'public://images/chapters/Athens.jpg';  // the orig image uri
    $chapter = node_load($nid);

    $img_url = @$chapter->field_image['und'][0]['uri'];
    if ($img_url == "") { $img_url = "public://default_images/cover-default.jpg"; }
    $style = 'thumbnail';  // or any other custom image style you've created via /admin/config/media/image-styles

    // add to chapter html
    if (!array_key_exists($chapter->title, $chapter_html)) {

      // Create html for menu entry
      $chapter_leader_text = " (Member)";
      if (in_array($nid, $chapters_leader_nids)) { 
        $chapter_leader_text = " (Chapter Leader)";
      }

      $html = "<li style='margin-bottom: 4px;'><img align='left' style='margin-left: 16px; margin-top: 4px; padding-right: 8px; width: 40px;' src='".image_style_url($style, $img_url) . "'>" . l($chapter->title . $chapter_leader_text,'node/'.$chapter->nid) . '</li>';

      // Put into either a chapter or chapter_leader array
      if (in_array($nid, $chapters_leader_nids)) { 
        $chapter_leader_html[$chapter->title] = $html;
      } else {
        $chapter_html[$chapter->title] = $html;
      }
    }
  }

  // Step 5. Join HTML
  $markup = "";

  if ($count_chapters > 0) {

    // Sort the chapters by title
    ksort($chapter_html);
    ksort($chapter_leader_html);

    // Show chapters you are a chapter leader for first
    foreach ($chapter_leader_html as $html) {
      // only print max items
      $num_items++;
      if ($num_items > $MAX_ITEMS) {
        continue;
      }
      $markup .= $html;
    }

    // Show other chapters second
    foreach ($chapter_html as $html) {
      // only print max items
      $num_items++;
      if ($num_items > $MAX_ITEMS) {
        continue;
      }

      $markup .= $html;
    }
    if ($num_items > $MAX_ITEMS) {
      $markup .= "<li>" . l(t('(View ') . ($num_items - $MAX_ITEMS) . " more)", 'user/' . $uid) . "</li>";
    }
  }
  else {
    $markup .= "<li>" . l(t('Join a chapter'), 'chapters') . "</li>";
  }

  return $markup;
}


/* 
 * Link by title to any companies this user is managing 
 * inserts this markup into the user menu tpl file
*/
function tm_users_menu_companies($uid){

  $query = new EntityFieldQuery();
  $markup = '';
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'organization')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_owner', 'target_id', $uid, '=');

  $result = $query->execute();

  if (isset($result['node'])) {
    $companies_nids = array_keys($result['node']);
    foreach ($companies_nids as $nid) {
      $company = node_load($nid);
      $img_url = @$company->field_image['und'][0]['uri'];
      if ($img_url == "") { $img_url = "public://default_images/cover-default.jpg"; }
      $style = 'thumbnail';  // or any other custom image style you've created via /admin/config/media/image-styles
      $markup .= "<li style='margin-bottom: 4px;'><img align='left' style='margin-left: 16px; margin-top: 4px; padding-right: 8px; width: 40px;' src='".image_style_url($style, $img_url) . "'>". l($company->title,'node/'.$company->nid).'</li>'; 
    }
  }
  return $markup;
}

/* Checks if a user is a chapter leader of a chapter */
function tm_users_is_chapter_leader($uid, $chapterid){
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'chapter')
    ->propertyCondition('nid', $chapterid)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_chapter_leaders', 'target_id', $uid, '=');

  $result = $query->execute();

  if (isset($result['node'])) {
    return TRUE;
  }
  return FALSE;
}

// get a list of uids of companies managed by the user
function tm_users_get_companies($uid){

  $query = new EntityFieldQuery();
  $markup = '';
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'organization')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_owner', 'target_id', $uid, '=');

  $result = $query->execute();

  $companies_nids = array();
  if (isset($result['node'])) {
    $companies_nids = array_keys($result['node']);
  }

  return $companies_nids;
}

// modify the user registration form
function _tm_users_modify_register_form(&$form, $form_state, $form_id) {

  // Step 1. Allow user to join up to chapter when they sign up

  // get a list of chapters
  $chapters = node_load_multiple(array(), array('type' => "chapter"));

  // create dropdown list
  $chapter_list = array();
  foreach ($chapters as $chapter) { // See this line in your original code
    $chapter_list[$chapter->nid] = $chapter->title; 
  }
  asort($chapter_list);
  $chapter_list = array("" => "Select a chapter", "-1" => "Choose later") + $chapter_list;
  
  // add chapter list to registraton form
  $form['chapter_list']=array(
    '#type'=>'select',
    '#title' => t('Home Chapter'),
    '#options' => $chapter_list,
    '#multiple' => false,
    '#description'=>'Please select a home chapter to join.',
    '#weight'=>9,
  );

  
  // Step 2. Add community connection to validate membership
  global $conf;
  $check_community_guidelines_options = $conf["tm_community_guidelines_options"];
  $check_community_guidelines_options_validate = $conf["tm_community_guidelines_options_validate"];
  $check_community_guidelines_description = $conf["tm_community_guidelines_description"];

  // Create divs for validation messages
  // These can be displayed in javascript via tm_community_guidelines_show_validation_message
  foreach($check_community_guidelines_options as $index => $val) {

    $validation_message = "";
    $validation_class = "";
    if (!$check_community_guidelines_options_validate[$index]["valid"]) {
      $validation_message = $check_community_guidelines_options_validate[$index]["message"];
      $validation_class = "validation_message-" . $index;
    }

    $check_community_guidelines_options[$index] = $val . "<div style='display: none;' class='tm_community_guidelines_validation_message " . $validation_class . "'>" . $validation_message . "</div>";
  }
  
  // Add how do you connect form
  $form['check_community_guidelines_text']['active'] = array(
  '#type' => 'item',
  '#markup' => "<label>How do you connect with our community?</label>",
  '#weight'=>1,
  );  
  $form['check_community_guidelines'] = array(
  '#type' => 'radios',
  '#options' => $check_community_guidelines_options,
  '#element_validate' => array('_tm_users_community_validation_callback'),
  '#description' => $check_community_guidelines_description . " See our " . l(t('Community Guidelines'), $conf["tm_community_guidelines_url"], array('attributes' => array('target' => '_blank'))) . ".",
  '#weight'=> 1,
  );    

  // Step 3. Add terms and conditions agreement to sign up form
  $form['cutomtext'] = array(
    '#type' => 'item',
    '#markup' => '<p class="description" style="text-align: center; margin-bottom: 12px;">By creating an account you agree to our <a target="_blank" href="/content/terms-use">Terms Of Use</a> and <a target = "_blank" href="/content/privacy-policy">Privacy Policy</a></p>',
    '#weight' => 10, // Adjust so that you can place it whereever 
  );

  // Step 4. Add reason for joining
  $form['reason_for_joining'] = array('#type' => 'textfield',
    '#title' => t('Why do you want to join?'),
    '#size' => 60,
    '#maxlength' => 150,
    '#required' => false,
    '#attributes' => array('placeholder' => 'I want to join because...'),
    '#description'=> 'In a few short words, tell us why you\'d like to join the community.',
    '#weight' => 2
  );
}

// Validate community connection option on signup page
function _tm_users_community_validation_callback($element, &$form_state, $form) {

  global $conf;
  $validation = $conf["tm_community_guidelines_options_validate"];

  // Check if form value was set
  if (!isset($form_state['values']['check_community_guidelines'])) {
    form_set_error('check_community', "Please select how you connect with the community");
    return;
  }

  // Get item checked
  $item_checked = $form_state['values']['check_community_guidelines'];

  // If not valid, use message in validation array
  if (!$validation[$item_checked]["valid"]) {
    form_set_error('check_community', $validation[$item_checked]["message"]);
  }
  
}

// Modify the user's profile form
function _tm_users_modify_profile_form(&$form, $form_state, $form_id) {

    // get current user
    $user = user_load($form['#user']->uid);

    // Modify the home chapter form
    // Filter drop down list to the list of chapters the user is in

    // fetch list of chapters the user has joined
    $flags = flag_get_user_flags("node", NULL, $user->uid, NULL, FALSE);
    $chapters_nids = array();
    $home_chapter_options = array("_none" => "- None -");
    foreach ($flags as $flag_name => $flag) {
      if ($flag_name == "signup") {
        foreach($flag as $f) {
          $chapters_nids[] = $f->entity_id;
          $chapter = node_load($f->entity_id);
          $home_chapter_options[$f->entity_id] = $chapter->title;
        }
      }
    }

    // alter home chapter form for the user
    // list only the chapters they have joined
    // if they have a home chapter then set it as default
    asort($home_chapter_options);
    $form['field_home_chapter']['und']['#options'] = $home_chapter_options;
    if (isset($user->field_home_chapter['und'][0]['target_id'])) {
      $home_chapter_id = $user->field_home_chapter['und'][0]['target_id'];
      $form['field_home_chapter']['und']['#default_value'] = array(0 => $home_chapter_id);
    }
    
    // if they don't have a home chapter, hide the field
    if (sizeof($chapters_nids) == 0) {
      hide($form['field_home_chapter']);
    }

    // hide loggintobgan revalidate notice since we print it anyway
    hide($form['revalidate']);

    // hide reason for joining (only display on signup and requesting approval)
    hide($form['field_reason_for_joining']);

  }


function tm_users_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'user_login') {
    $form['cutomtext'] = array(
        '#type' => 'item',
        '#markup' => '<p style="margin-top: 0.8em;">Don\'t have an account? <a href="/user/register">Sign up</a></p>',
        '#weight' => 200, // Adjust so that you can place it whereever 
        );
  }

  // Modify registration form
  if (($form_id == 'user_register_form') or ($form_id == 'tm_users_external_signin_register_form')) {
    _tm_users_modify_register_form($form, $form_state, $form_id);
  }

  // Modify profile form
  if ($form_id == 'user_profile_form') {
    _tm_users_modify_profile_form($form, $form_state, $form_id);
  }

  // Hide revision information, authoring information from moderators
  // http://drupal.stackexchange.com/questions/45339/how-to-hide-authoring-information-revision-information-publishing-options-tabs-i
  global $user;
  if (!in_array('administrator', $user->roles)) {
    if (isset($form['revision_information'])) {
      $form['revision_information']['#access'] = FALSE;
      $form['author']['#access'] = FALSE;
      $form['options']['#access'] = FALSE;
      $form['padding_before_save'] = array(
        '#markup' => '<br>',
        '#weight' => 10);
    }
  }

  // Alter companies view dropdowns
  // Note this should be in tm_organizations but it doesn't seem to fire there
  if(isset($form_state['view'])) {
    if ($form_state['view']->name == 'companies') {

      // Limit countries dropdown to users countries
      $output = '';
      $output = cache_get('views-exposed-form-companies-countries', 'cache');
      if (empty($output)) {
        $result = db_query("SELECT DISTINCT iso2, name from {field_data_field_country} f LEFT JOIN {countries_country} c ON f.field_country_iso2 = c.iso2 WHERE f.bundle = 'organization' AND c.iso2 IS NOT NULL ORDER BY name ASC");
        $defaultoptions = array('All'=>'- Any -');
        $output = $defaultoptions + $result->fetchAllKeyed();
        $form['name_list']['#options'] = $output;
      cache_set('views-exposed-form-companies-countries', $output, 'cache', time() + 300);
      } else{
        $form['name_list']['#options'] = $output->data;
      }

      // Alter the segment dropdown
      // Hide the 2nd level of taxonomy
      // In the future we might allow searching deeper
      foreach ($form['term_node_tid_depth']['#options'] as $key => $obj) {
        if (isset($obj->option)) {
          $option = $obj->option;
          if (strpos(current($option), "-") === 0) {
            unset($form['term_node_tid_depth']['#options'][$key]);
          }
        }
      }
    }
  }

  // Alter community view dropdowns
  if(isset($form_state['view'])) {
    if ($form_state['view']->name == 'community') {

      // Limit countries dropdown to users countries
      $output = '';
      $output = cache_get('views-exposed-form-community-countries', 'cache');
      if (empty($output)) {
        $result = db_query("SELECT DISTINCT iso2, name from {field_data_field_user_country} f LEFT JOIN {countries_country} c ON f.field_user_country_iso2 = c.iso2 WHERE f.bundle = 'user' AND c.iso2 IS NOT NULL ORDER BY name ASC");
        $defaultoptions = array('All'=>'- Any -');
        $output = $defaultoptions + $result->fetchAllKeyed();
        $form['name_list']['#options'] = $output;
      cache_set('views-exposed-form-community-countries', $output, 'cache', time() + 300);
      } else{
        $form['name_list']['#options'] = $output->data;
      }

      // Alter the segment dropdown
      // Hide the 2nd level of taxonomy
      // In the future we might allow searching deeper
      foreach ($form['taxonomy_entity_index_tid_depth']['#options'] as $key => $obj) {
        if (isset($obj->option)) {
          $option = $obj->option;
          if (strpos(current($option), "-") === 0) {
            unset($form['taxonomy_entity_index_tid_depth']['#options'][$key]);
          }
        }
      }
    }
  }
  
  // Alter leaders view dropdowns
  if(isset($form_state['view'])) {

    if ($form_state['view']->name == 'chapter_leaders') {

      // Limit countries dropdown to users countries
      $output = '';
      $output = cache_get('views-exposed-form-leaders-countries', 'cache');
      if (empty($output)) {
        $result = db_query("SELECT * FROM (SELECT DISTINCT iso2, name, entity_id from {field_data_field_user_country} f LEFT JOIN {countries_country} c ON f.field_user_country_iso2 = c.iso2 WHERE f.bundle = 'user' AND c.iso2 IS NOT NULL) as countries_with_users INNER JOIN {users_roles} u ON u.uid = countries_with_users.entity_id AND u.rid = 7 ORDER BY name ASC");
        $defaultoptions = array('All'=>'- Any -');
        $output = $defaultoptions + $result->fetchAllKeyed();
        $form['name_list']['#options'] = $output;
      cache_set('views-exposed-form-leaders-countries', $output, 'cache', time() + 300);
      } else{
        $form['name_list']['#options'] = $output->data;
      }
      
    }
  }

  if($form_id == "contact_site_form") {
    global $conf;
    $form['intro'] = array(
      '#markup' => "<p>Get in touch with " . $conf["tm_site_name"] . " and send us your ideas, comments or feedback.</p>",
      '#weight' => -10);
  }

  // disable user from choosing own contact form
  // http://stackoverflow.com/questions/2540582/how-do-i-disable-the-personal-contact-form-option-in-the-user-edit-form
  if ('user_profile_form' === $form_id) {
     $form['contact']['#access'] = FALSE;
  }

  // adjustments to the organization add form
  // hide row weights for non administrator/moderator
  // hide manager on first edit
  if ($form_id == 'organization_node_form') {
    
    // Hide row weights unless administrator or moderator
    global $user;
    if (!((in_array('administrator', $user->roles)) or (in_array('moderator', $user->roles)))) {
      $form['#attached']['js'][] = array(
        'data' => "(function ($, Drupal, window, document, undefined) {jQuery(document).ready(function(){ $('.tabledrag-toggle-weight-wrapper').hide(); });})(jQuery, Drupal, this, this.document);",
        'type' => 'inline',
      );
    }

    // Hide managed by if its first edit
    if (!(isset($form['nid']['#value']))) {
      hide($form['field_owner']);
    }

    // Add placeholder text for follower message
    $form['#attached']['js'][] = array(
      'data' => "(function ($, Drupal, window, document, undefined) {jQuery(document).ready(function(){ $('#edit-field-follower-message-und-0-value').attr('placeholder', 'Thanks for following us...'); });})(jQuery, Drupal, this, this.document);",
      'type' => 'inline',
    );

  }

  // adjustments to the event add form
  // hide row weights for non administrator/moderator
  if ($form_id == 'event_node_form') {
    
    // Hide row weights unless administrator or moderator
    $form['#attached']['js'][] = array(
      'data' => "(function ($, Drupal, window, document, undefined) {jQuery(document).ready(function(){ $('.tabledrag-toggle-weight-wrapper').hide(); });})(jQuery, Drupal, this, this.document);",
      'type' => 'inline',
    );
  }

  // Modify chapter edit form (can't use hook in tm_chapters)
  // For non-admin and non-moderator hide the chapter leaders and geomap location fields
  if ($form_id == 'chapter_node_form') {
    global $user;
    $loaded = user_load($user->uid);
    if (!in_array("moderator", $loaded->roles) and !in_array("administrator", $loaded->roles)) {
      hide($form['field_chapter_leaders']);
      hide($form['field_geomaplocation']);
    }
  }

}

// If user selected a home chapter on signup, then join it
// See: https://github.com/travelmassive/massiveplatform/issues/75
// todo: should check for a valid chapter id
// Also add reason for joining to users fields
function tm_users_user_insert(&$edit, $account, $category) {
  
  // need user
  if (!isset($edit['chapter_list'])) {
    return;
  }

  $chapter_id = $edit['chapter_list'];
  if (($chapter_id != null) && ($chapter_id > 0)) {    
    
    // flag the user so they join the chapter
    $signup_flag = flag_get_flag('signup');
    if ($signup_flag) {
      if (!$signup_flag->is_flagged($chapter_id, $account->uid)) {
        flag('flag', 'signup', $chapter_id, $account);
      } 
    }
  }

}


// ITEM 1
// If the user is already approved then overwrite role to approved when they save profile.
// Reason: if user signs up, and in middle of editing profile is approved, then
// saving their profile would overwrite the approved role (making them unapproved).
// This method fixes this edge case.
// see: https://github.com/travelmassive/massiveplatform/issues/68
// 
// ITEM 2
// Strip spaces from URL fields
function tm_users_user_presave(&$edit, $account, $category) {

  global $user;

  // only fire this method if saving your own account
  if ($account->uid == $user->uid) {

    // don't mess with administrators' forms
    if (in_array('administrator', $user->roles)) {
      return;
    }

    // if the user is already approved then override to be approved
    if (in_array('approved user', $user->roles)) {
      if ($role = user_role_load_by_name('approved user')) {

        // set approved user role
        $edit['roles'][$role->rid] = $role->rid;

        // below is a hammer if we need it
        // unset($edit["roles"]);
      }
    }

    // preserve chapter leader roles
    if (in_array('chapter leader', $user->roles)) {
      if ($role = user_role_load_by_name('chapter leader')) {
        $edit['roles'][$role->rid] = $role->rid;
      }
    }

    // preserve moderator roles
    if (in_array('moderator', $user->roles)) {
      if ($role = user_role_load_by_name('moderator')) {
        $edit['roles'][$role->rid] = $role->rid;
      }
    }

    // Trim all URL fields
    // Otherwise a blank space causes the link to be rendered blank
    $field_names = array("field_link_website", "field_link_twitter", "field_link_linkedin", "field_link_facebook");
    foreach ($field_names as $field_name) {
       if (isset($edit[$field_name][LANGUAGE_NONE][0]['url'])) {
        if (trim($edit[$field_name][LANGUAGE_NONE][0]['url']) == "") {
          $edit[$field_name][LANGUAGE_NONE] = array();
        }
      }
    }

    // Trim about field
    // Remove it if it's empty (stop user from entering a space)
    if (isset($edit['field_about_me'][LANGUAGE_NONE][0]['value'])) {
      $trimmed = trim($edit['field_about_me'][LANGUAGE_NONE][0]['value']);
      // save trimmed value
      $edit['field_about_me'][LANGUAGE_NONE][0]['value'] = $trimmed;
    }

    // Trim first_name, last_name, job role, organization name, city
    // Otherwise a blank space causes the link to be rendered blank
    $field_names = array("field_user_first_name", "field_user_last_name", "field_job_role", "field_job_organization", "field_location_city");
    foreach ($field_names as $field_name) {
      if (isset($edit[$field_name][LANGUAGE_NONE][0]['value'])) {
        $trimmed = trim($edit[$field_name][LANGUAGE_NONE][0]['value']);
        $edit[$field_name][LANGUAGE_NONE][0]['value'] = $trimmed;
      }
    }
   
    // store reason for joining
    if (isset($edit['reason_for_joining'])) {
      $edit['field_reason_for_joining'][LANGUAGE_NONE][0]['value'] = trim($edit['reason_for_joining']);
    }

  }

}

/* Get the signup score of the users profile */
/* It will be between 0 and 100 based on how much the user has filled in */
function tm_users_signup_score($uid = null) {
  return tm_users_signup_tips(true, $uid);
}

/* Give new members some signup tips to help */
function tm_users_signup_tips($return_score = false, $uid = null, $show_threshold = 80) {

  global $user;
  global $conf;

  // don't calculate to non-logged in users
  if (!user_is_logged_in()) {
    return 0;
  }

  // load current user if no uid specified
  if ($uid == null) {
    $uid = $user->uid;
  }

  $account = user_load($uid);

  $user_tip = "";
  $user_points = 10; // some points for signing up
  $total_points = 10; // start at 10

   // user edit page
  $edit_url = "user/" . $uid . "/edit";

  // job role (10 points)
  $total_points += 10;
  if (sizeof($account->field_about_me) == 0) {
    if ($user_tip == "") {
      $user_tip = "Share a little bit " . l(t('about yourself'), $edit_url, array('fragment' => 'edit-field-about-me')) . " and your story with the community.";
    }
  } else {
    $user_points += 10;
  }

  // location (city and country) (10 points)
  $total_points += 10;
  if ((sizeof($account->field_location_city) == 0) or (sizeof($account->field_user_country) == 0)) {
    if ($user_tip == "") {
      $user_tip = "Tell us " . l(t('where you are located'), $edit_url, array('fragment' => 'edit-field-location-city')) . " so other members can discover you.";
    }
  } else {
    $user_points += 10;
  }

  // job role (10 points)
  $total_points += 10;
  if (sizeof($account->field_job_role) == 0) {
    if ($user_tip == "") {
      $user_tip = "Share your " . l(t('job role'), $edit_url, array('fragment' => 'edit-field-job-role')) . " so like-minded members can connect with you.";
    }
  } else {
    $user_points += 10;
  }

  // organization (10 points)
  $total_points += 10;
  if (sizeof($account->field_job_organization) == 0) {
    if ($user_tip == "") {
      $user_tip = "Share the organization " . l(t('where you work'), $edit_url, array('fragment' => 'edit-field-job-organization')) . ", except if you are a top secret agent.";
    }
  } else {
    $user_points += 10;
  }

  // user photo (10 points)
  $total_points += 10;
  $default_image = false;
  if (isset($account->field_avatar['und'][0]['is_default'])) {
    $default_image = (isset($account->field_avatar['und'][0]['is_default']));
  }
  if ((sizeof($account->field_avatar) == 0) or ($default_image)) {
    if ($user_tip == "") {
      $user_tip = "Upload a " . l(t('profile photo'), $edit_url, array('fragment' => 'edit-field-avatar')) . " so members can recognize you.";
    }
  } else {
    $user_points += 10;
  }

  // cover photo (10 points)
  $total_points += 10;
  $default_image = false;
  if (isset($account->field_image['und'][0]['is_default'])) {
    $default_image = (isset($account->field_image['und'][0]['is_default']));
  }
  if ((sizeof($account->field_image) == 0) or ($default_image)) {
    if ($user_tip == "") {
      $user_tip = "Upload a " . l(t('cover image'), $edit_url, array('fragment' => 'edit-field-image')) . " to make your profile stand out.";
    }
  } else {
    $user_points += 10;
  }

  // industry segment (10 points)
  $total_points += 10;
  if (sizeof($account->field_segment) == 0) {
    if ($user_tip == "") {
      $user_tip = "Select an " . l(t('industy segment'), $edit_url, array('fragment' => 'edit-field-segment')) . " to help us connect you with other members.";
    }
  } else {
    $user_points += 10;
  }

  // profile questions (10 points)
  $total_points += 10;
  // get question fields
  // we search the object array rather than hardcoding in case the question fields are changed
  $object_vars = get_object_vars($account);
  $has_answered_question = false;
  foreach ($object_vars as $name => $value) {
    if (strpos($name, "field_user_question_") === 0) {
      if (sizeof($value) > 0) {
        $has_answered_question = true;
      }
    }
  }
  if (!$has_answered_question) {
    if ($user_tip == "") {
      $user_tip = "Answer some " . l(t('profile questions'), $edit_url, array('fragment' => 'edit-field-user-question-destination')) . " so other members can learn about you.";
    }
  } else {
    $user_points += 10;
  }

  // website fields (10 points)
  $total_points += 10;
  // get website fields
  // we search the object array rather than hardcoding in case more links are added
  $object_vars = get_object_vars($account);
  $has_linked_website = false;
  foreach ($object_vars as $name => $value) {
    if (strpos($name, "field_link_") === 0) {
      if (sizeof($value) > 0) {
        $has_linked_website = true;
      }
    }
  }
  if (!$has_linked_website) {
    if ($user_tip == "") {
      $user_tip = "List your " . l(t('website, blog, or social accounts'), $edit_url, array('fragment' => 'edit-field-link-website')) . " so other members can find you.";
    }
  } else {
    $user_points += 10;
  }

  // calculate percentage complete
  $percentage = round((($user_points / $total_points) * 100), 0);
  // score is in 0 to 100 in increments of 5
  $user_score = round($percentage*2,-1)/2;

  // Option 1. Return score
  // if we only want the score
  // score wil be 0 to 100
  if ($return_score) {
      return $user_score;
  }

  // Option 2. Display the tips
  // Only show on the following pages
  // Only show on up to two levels deep (ie: /chapters and /chapters/london)
  $target_pages = array("events", "community", "leaders", "discuss");
  $url_parts = explode('/', request_path());
  if ((!in_array($url_parts[0], $target_pages)) or (sizeof($url_parts) > 2)) {
    return;
  }
  // Only show on the /community page and not on users profiles ie: /community/username
  if (($url_parts[0] == "community") && (sizeof($url_parts) > 1)) {
    return;
  }
  
  // Display the user tip
  if (($user_tip != "") and ($show_threshold > $user_score)) {
      $user_tip = "Your profile is " . $user_score . "% complete. " . $user_tip;
      drupal_set_message($user_tip, 'page_notice');
  }

  return;
}

/* Show user tips on chapter page */
function tm_users_in_chapter_tips() {

  global $conf;
  global $user;
  $user_tip = "";

  // make sure we are logged in
  if (!user_is_logged_in()) {
    return;
  }

  // get chapter
  // /chapters/berlin
  // Show chapter page tips
  $url_parts = explode("/", request_path());
  if (($url_parts[0] == "chapters") and (sizeof($url_parts) == 2)) {
    $node = menu_get_object();
    $nodeid = 0;
    if ($node->type == "chapter") {
      $nodeid = $node->nid;
    }
  }

  // /node/12833/members
  if (($url_parts[0] == "node") and ($url_parts[2] == "members") and (sizeof($url_parts) == 3)) {
    $nodeid = $url_parts[1];
    $node = node_load($nodeid);
    if ($node->type == "chapter") {
      $nodeid = $node->nid;
    }
  }

  // get chapter title
  $chapter_name = $node->title;

  // get users chapters
  $chapters_nids = array();

  // Fetch list of chapters the user has joined
  $in_chapter = false;
  $flags = flag_get_user_flags("node");
  foreach ($flags as $flag_name => $flag) {
    if ($flag_name == "signup") {
      foreach($flag as $f) {
        $chapters_nids[] = $f->entity_id;
        if ($nodeid == $f->entity_id) {
          $in_chapter = true;
        }
      }
    }
  }

  // if you are a member of the chapter and non-approved
  // warn user they will not be displayed
  if ($in_chapter) {
    if (!in_array("approved user", $user->roles)) {
        $your_account_url = drupal_get_path_alias('user/' . $user->uid);
        $user_tip = "Your membership will be displayed in the " . $chapter_name . " community when <a href='/" . $your_account_url . "'>your account</a> has been approved.";
    }
  }

  // Shower user tip
  if ($user_tip != "") {
    drupal_get_messages('page_notice');
    drupal_set_message($user_tip, 'page_notice');
  }
  
}

/* Show user tips on chapter page */
function tm_users_chapter_tips() {

  global $conf;
  global $user;
  $user_tip = "";

  $chapters_nids = array();
  if (user_is_logged_in()) {
    // Fetch list of chapters the user has joined
    $flags = flag_get_user_flags("node");
    foreach ($flags as $flag_name => $flag) {
      if ($flag_name == "signup") {
        foreach($flag as $f) {
          $chapters_nids[] = $f->entity_id;
        }
      }
    }
  }

  // If no chapters, show apply for chapter link
  $account = user_load($user->uid);
  if ((sizeof($chapters_nids) == 0)) {
    $user_tip = "Join a " . $conf["tm_site_name"] . " chapter near you or apply to " . l(t('start a chapter'), $conf["tm_tips_start_chapter_link"]) . " in your city.";
    drupal_get_messages('page_notice');
    drupal_set_message($user_tip, 'page_notice');
  } 
  elseif (sizeof($account->field_home_chapter) > 0) {
      $chapter = node_load($account->field_home_chapter['und'][0]['target_id']);
      $chapter_url = url('node/' . $chapter->nid, array("absolute" => true));
      $user_tip = "Discover chapters world-wide and explore the community. Your home chapter is " . l(t( $conf["tm_site_name"] . " " . $chapter->title), $chapter_url) . ".";
  }

  // Shower user tip
  if ($user_tip != "") {
    drupal_get_messages('page_notice');
    drupal_set_message($user_tip, 'page_notice');
  }
  
}

/* Show user tips on leaders page */
function tm_users_leaders_tips() {

  global $conf;
  global $user;
  $user_tip = "";

  if (in_array('chapter leader', $user->roles)) {
    // Fetch list of chapters the user is a leader of
    $chapters_leader_nids = array();
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'chapter')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->fieldCondition('field_chapter_leaders', 'target_id', $user->uid, '=');
    $result = $query->execute();
    if (isset($result['node'])) {
      $chapters_leader_nids = array_keys($result['node']);
    }
    if (sizeof($chapters_leader_nids) > 0) {
      $first_chapter = node_load($chapters_leader_nids[0]);
      $chapter_url = url('node/' . $first_chapter->nid, array("absolute" => true));
      $user_tip = "Connect with other chapter leaders world-wide. You are a chapter leader of  " . l(t($conf["tm_site_name"] . " " . $first_chapter->title), $chapter_url) . ".";
    }
  } else {
    $user_tip = "Follow chapter leaders in the " . $conf["tm_site_name"] . " community, or apply to " . l(t('start a chapter'), $conf["tm_tips_start_chapter_link"]) . " in your city.";
  }

  // Shower user tip
  if ($user_tip != "") {
    drupal_get_messages('page_notice');
    drupal_set_message($user_tip, 'page_notice');
  }

}

/* Show user tips on communities page */
function tm_users_community_tips() {

  global $conf;
  global $user;
  $user_tip = "Discover and follow other members in the " . $conf["tm_site_name"] . " community. Looking for an organization? Check out our " . l(t("company listings"), "companies") . ".";

  // Shower user tip
  if ($user_tip != "") {
    drupal_get_messages('page_notice');
    drupal_set_message($user_tip, 'page_notice');
  } 

}

/* Show user tips on events page */
function tm_users_event_tips() {

  global $conf;
  global $user;
  $user_tip = "";

  $chapters_nids = array();
  if (user_is_logged_in()) {
    if (isset($account->field_home_chapter['und'][0]['target_id'])) {
      $account = user_load($user->uid);
      $chapter = node_load();
      $chapter_url = url('node/' . $chapter->nid, array("absolute" => true));
      $user_tip = "Visit your home chapter " . l(t( $conf["tm_site_name"] . " " . $chapter->title), $chapter_url) . " for events near you.";
    }
  } 
  
  if ($user_tip == "") {
    $user_tip = "Find and register for upcoming events in the " . $conf["tm_site_name"] . " community around the world to learn, share and connect with other members.";
  }

  // Shower user tip
  if ($user_tip != "") {
    drupal_get_messages('page_notice');
    drupal_set_message($user_tip, 'page_notice');
  }
  
}

/* Show user tips on sponsors page */
function tm_users_sponsors_tips() {

  global $conf;
  global $user;
  $user_tip = "Our events are sponsored by leading companies and brands around the world. Learn more about " . l(t('sponsoring a ' . $conf["tm_site_name"]), $conf["tm_tips_sponsor_page_link"]) . ".";

  // Shower user tip
  if ($user_tip != "") {
    drupal_get_messages('page_notice');
    drupal_set_message($user_tip, 'page_notice');
  }
  
}

/* Alter site contact form and add user's email address */
function tm_users_form_contact_site_form_alter(&$form, &$form_state, $form_id) {

  global $conf;

  // If you are logged in, disable editing name and email
  if (user_is_logged_in()) {
      $form['name']['#disabled'] = TRUE;
      $form['mail']['#disabled'] = TRUE;
  }

  // Remove "send a copy to yourself" option from form (if required).
  $form['copy']['#access'] = FALSE;

}


// Override some system emails
// We send an html email with the reply-to address set
// We also stop the default contact email from being sent.
function tm_users_mail_alter(&$mail_form) {

  // Verify email an dd reset password
  if (($mail_form['id'] == 'user_register_no_approval_required') or ($mail_form['id'] == 'user_password_reset')) {
    
    global $user;
    global $conf;

    $module = 'tm_users';
    $key = $mail_form['key'];
    $language = language_default();
    $params = $mail_form['params'];
    $to = $mail_form['to'];
    $email = $mail_form['to'];
    $account = $mail_form['params']['account'];
    $first_name = $account->field_user_first_name[LANGUAGE_NONE][0]['value'];
    $last_name = $account->field_user_last_name[LANGUAGE_NONE][0]['value'];

    // SET SUBJECT
    //$subject = $mail_form['subject'];
    if ($mail_form['id'] == 'user_register_no_approval_required') {
      $subject = "Confirm your " . $conf["tm_site_name"] . " account, " . $first_name . " " . $last_name;

    } elseif ($mail_form['id'] == 'user_password_reset') {
      drupal_set_message("We've just sent an email to " . $email . " with a link to recover your account. Please allow a few minutes for the email to arrive.");
      $subject = "Recover your " . $conf["tm_site_name"] . " login";
    }

    $message = $mail_form['body']['0'];

     // SEND EMAIL
    tm_users_send_html_mail($module, $key, $email, $language, $params, $subject, $message, NULL);
  
    // Don't send via drupal mail
    $mail_form['send'] = false;
  }

  // Site contact page
  if ($mail_form['id'] == 'contact_page_mail') {
    
    global $user;
    global $conf;

    $module = 'tm_users';
    $key = 'key';
    $language = language_default();
    $params = array();
    $reply = $mail_form['params']['mail'];
    $email = $conf['tm_contact_page_email'];

    // CONSTRUCT MESSAGE
    $member_url = url('user/'.$user->uid, array('absolute'=>TRUE));
    $message = "Hi, a member just sent a message via the site contact form:";
    $message .= "<br>";
    $message .= "<br>Name: " . $mail_form['params']['name'];
    $message .= "<br>Subject: " . check_plain($mail_form['params']['subject']);
    $message .= "<p><strong>Message:</strong><br>";
    $custom_message = strip_tags(check_plain($mail_form['params']['message'])); // remove html
    $message .= str_replace("\n", "<br>", $custom_message); // add line breaks
    $message .= "</p>";
    if (user_is_logged_in()) {
        $message .= "Member's profile: <a href='" . $member_url . "'>" . $member_url . "</a><br>";
    } 
    $message .= "Reply email: " . check_plain($mail_form['params']['mail']);
    $message .= "<br>";
    $message .= "<br>To reply directly, just reply to this email.";
    $message .= "<br>";
    $message .= "<br>__EMAIL_SIGNOFF__";

    // SUBJECT
    $subject = "Contact Form: " . check_plain($mail_form['params']['subject']);

    // SEND EMAIL
    tm_users_send_html_mail($module, $key, $email, $language, $params, $subject, $message, $reply);
  
    // Don't send via drupal mail
    $mail_form['send'] = false;
  }
}


/* Helper method
 * Send html email
 * Note for system messages you need to set $mail_form['send'] = false;
 */
function tm_users_send_html_mail($module, $key, $email, $language, $params, $subject, $message, $reply = NULL) {

  global $conf;

  // STEP 1. LOAD HTML TEMPLATE
  $template_file = drupal_get_path('module', 'tm_notifications') . '/templates/tm_notifications-email_template.tpl.php';
  $template = file_get_contents($template_file);

  // STEP 2. SET MAIL HTML HEADERS
  $email_message = drupal_mail($module, $key, $email, $language, $params, NULL, FALSE);
  $email_message['headers']['MIME-Version'] = '1.0';
  $email_message['headers']['Content-Type'] = 'multipart/mixed;';
  $email_message['headers']['Content-Type'] = 'text/html;';
  if ($reply != NULL) {
    $email_message['headers']['Reply-to'] = $reply; // set reply-to to the user
  }

  // STEP 3. SET SUBJECT 
  $email_message['subject'] = $subject;

  // STEP 4. REPLACE BODY AND FOOTER IN HTML TEMPLATE
  $template = str_replace("__EMAIL_BODY__", $message, $template);
  $footer = $conf["tm_email_default_footer"];
  $template = str_replace("__EMAIL_FOOTER__", $footer, $template);

  // Other vars
  $template = str_replace("__SERVER_NAME__", $_SERVER["SERVER_NAME"], $template); 
  $template = str_replace("__SERVER_HTTP__", $conf["tm_email_server_http"], $template);  
  $template = str_replace("__SITE_NAME__", $conf["tm_site_name"], $template);  
  $template = str_replace("__EMAIL_SIGNOFF__", $conf["tm_email_signoff"], $template); 

  // STEP 5. LOAD HTML TEMPLATE INTO EMAIL BODY
  $email_message['body'] = $template;

  // STEP 6. SEND EMAIL
  // Retrieve the responsible implementation for this message.
  $system = drupal_mail_system($module, $key);

  // Format the message body.
  $format_message = $system->format($email_message);

  // Send e-mail.
  $result = $system->mail($format_message);

  // Don't send via drupal mail
  $mail_form['send'] = false;

}


// Add a link to chapter leaders from the community page
function tm_users_views_post_execute(&$view) {
  if ($view->name == 'community') {
    $view->build_info['title'] = "Community &middot; <a style='color: red;' href='/leaders'>Chapter Leaders</a>";
  }

  if ($view->name == 'chapter_leaders') {
    $view->build_info['title'] = "<a href='/community'>Community</a> &middot; Chapter Leaders";
  }
}


// Hook user_update
// Check if user had edited profile and saved it
// If so, set $_SESSION["tm_account_changed"] to true
// This can be picked up in tm_users_account_menu.tpl.php for further actions
function tm_users_user_update(&$edit, $account, $category) {

  global $user;

  // Make sure we are editing our own account
  if ($user->uid != $account->uid) {
    return;
  }

  // Compare new and original fields that start with "field_"
  $different_fields = array();
  foreach ($edit as $key => $value) {

    if (strpos($key, "field_") === 0) {

      // get new and original field values
      $new_value = _tm_users_get_field_value($value);
      $orig_value = _tm_users_get_field_value($account->original->$key);
      
      // check if fields are different
      if ($new_value != $orig_value) {
        $different_fields[] = $key;
      }

    }
  }  

  // Did we update the account?
  if (sizeof($different_fields) > 0) {
    $_SESSION['tm_account_changed'] = true;
  } else {
    $_SESSION['tm_account_changed'] = false;
  }

}


// Helper method to get field value for comparison
// Used in tm_users_user_update
function _tm_users_get_field_value($field) {

  // empty value
  if (sizeof($field) == 0) {
    return ""; 
  }

  // empty value
  if (sizeof($field[LANGUAGE_NONE]) == 0) {
    return "";
  }
 
  // text value
  if (isset($field[LANGUAGE_NONE][0]['value'])) {
    return $field[LANGUAGE_NONE][0]['value'];
  }

  // url value
  if (isset($field[LANGUAGE_NONE][0]['url'])) {
    return $field[LANGUAGE_NONE][0]['url'];
  }

  // file value
  if (isset($field[LANGUAGE_NONE][0]['fid'])) {
    return $field[LANGUAGE_NONE][0]['fid'];
  }

  // unkown type
  return null;

}

