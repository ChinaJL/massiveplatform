<?php
/**
 * @file
 * Code for the TM Base feature.
 */

include_once 'tm_base.features.inc';
include_once 'tm_base.admin.inc';

/**
 * Implements hook_menu().
 */
function tm_base_menu() {
  $items = array();

  $items['frontpage'] = array(
    'page callback' => '_tm_base_frontpage',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  // Base Admin page.
  $items['admin/config/tm'] = array(
    'title' => 'Travel Massive',
    'description' => 'Settings related to the Travel Massive website.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  return $items;
}

/**
* Implements hook_form_alter().
*/
function tm_base_form_alter(&$form, &$form_state, $form_id) {
  // Add a cancel link to the node and user forms.
  if (isset($form['#node']) || isset($form['#user'])) {
    // If destination is set, redirect there
    if (isset($_GET['destination'])) {
      $url = $_GET['destination'];
    }
    // If edit form of existing node, redirect to node
    elseif (isset($form['#node']) && isset($form['#node']->nid)) {
      $url = 'node/' . $form['#node']->nid;
    }
    // If edit form of existing user, redirect to user
    elseif (isset($form['#user']) && $form['#user']->uid != 0) {
      $url = 'user/' . $form['#user']->uid;
    }
    // Everything else, go to frontpage
    else {
      $url = '<front>';
    }
    // Add the cancel link.
    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), $url, array('attributes' => array('class' => array('bttn', 'bttn-tertiary', 'bttn-m', 'cancel')))),
      '#weight' => 15,
    );
  }
}

/**
 * Implements hook_block_info()
 */
function tm_base_block_info() {
  $blocks['tm_homepage_stats'] = array(
    'info' => t('Homepage stats'),
    'cache' => DRUPAL_CACHE_PER_USER
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function tm_base_block_view($delta) {
  global $user;

  $block = array();
  switch ($delta) {
    case 'tm_homepage_stats':

      $block['content'] = '<ul>';
      if ($user->uid) {
        $follow_members_flag = flag_get_flag('follow_members');
        // Number of followers and following.
        $followers = $follow_members_flag->get_count($user->uid);
        $following = flag_get_user_flag_counts($follow_members_flag, $user);

        $block['content'] .= '<li><a href="' . url('user') . '" title="' . t('View followers') . '"><strong class="key">' . t('Followers') . '<small>: </small></strong><span class="value">' . $followers . '</span></a></li>';
        $block['content'] .= '<li><a href="' . url('user') . '" title="' . t('View following') . '"><strong class="key">' . t('Following') . '<small>: </small></strong><span class="value">' . $following . '</span></a></li>';
      }
      else {
        // Number of communities, cities, companies.
        $no_community = db_query('SELECT count(uid) AS no FROM {users} WHERE status = :status', array(':status' => 1))->fetchField();
        $no_city = db_query('SELECT count(nid) AS no FROM {node} WHERE status = :status AND type = :type', array(':status' => 1, ':type' => 'chapter'))->fetchField();
        $no_company = db_query('SELECT count(nid) AS no FROM {node} WHERE status = :status AND type = :type', array(':status' => 1, ':type' => 'organization'))->fetchField();

        $block['content'] .= '<li><a href="' . url('community') . '" title="' . t('Go to community') . '"><strong class="key">' . t('Users') . '<small>: </small></strong><span class="value">' . $no_community . '</span></a></li>';
        $block['content'] .= '<li><a href="' . url('cities') . '" title="' . t('Go to cities') . '"><strong class="key">' . t('Cities') . '<small>: </small></strong><span class="value">' . $no_city . '</span></a></li>';
        $block['content'] .= '<li><a href="' . url('companies') . '" title="' . t('Go to companies') . '"><strong class="key">' . t('Companies') . '<small>: </small></strong><span class="value">' . $no_company . '</span></a></li>';
      }
      $block['content'] .= '</ul>';
      break;
  }

  return $block;
}

/**
 * Implements hook_theme()
 */
function tm_base_theme() {
  return array(
    '_tm_homepage' => array(
      'variables' => array(
        'homepage_title' => NULL,
        'homepage_description' => NULL,
        'homepage_stats_block' => NULL,
        'homepage_upcoming_events' => NULL
      ),
      'template' => 'tm_base_homepage',
      'path' => drupal_get_path('module', 'tm_base') . '/templates/'
    ),
  );
}

/**
 * Custom function to build the frontpage
 */
function _tm_base_frontpage() {
  global $user;

  // Remove the title.
  drupal_set_title('');

  if ($user->uid) {
    $homepage_title = variable_get('tm_base_homepage_title_members', NULL);
    $homepage_description = variable_get('tm_base_homepage_description_members', NULL);
  }
  else {
    $homepage_title = variable_get('tm_base_homepage_title_anon', NULL);
    $homepage_description = variable_get('tm_base_homepage_description_anon', NULL);
  }

  // Replace tokens.
  $homepage_title = token_replace($homepage_title);
  $homepage_description = token_replace($homepage_description);

  if (!$homepage_title) {
    drupal_set_message('No homepage title. Set it through ' . l('configuration', 'admin/config/system/site-information'), 'error');
  }
  if (!$homepage_description) {
    drupal_set_message('No homepage description. Set it through ' . l('configuration', 'admin/config/system/site-information'), 'error');
  }

  // Stats block
  $stats_block = block_load('tm_base', 'tm_homepage_stats');
  $homepage_stats_block = _block_get_renderable_array(_block_render_blocks(array($stats_block)));

  // Upcoming events view.
  $homepage_upcoming_events = array();
  $view_display = 'front_block';
  $view = views_get_view('events');
  $view->set_display($view_display);
  if ($view && $view->access($view_display)) {
    $homepage_upcoming_events['title'] = $view->get_title();
    $homepage_upcoming_events['content'] = $view->preview($view_display);
  }

  return theme('_tm_homepage', array(
    'homepage_title' => $homepage_title,
    'homepage_description' => $homepage_description,
    'homepage_stats_block' => $homepage_stats_block,
    'homepage_upcoming_events' => $homepage_upcoming_events
  ));
}

/**
* Implements hook_token_info().
*/
function tm_base_token_info() {
  $info['tokens']['node']['friendly_url_org'] = array(
    'name' => t('Friendly URL'),
    'description' => t('This will return a properly formatted friendly url for an organization'),
  );
  $info['tokens']['user']['friendly_url_user'] = array(
    'name' => t('Friendly URL'),
    'description' => t('This will return a properly formatted friendly url for a user'),
  );
  return $info;
}
/**
* Implements hook_tokens(). This hook will operate the token and replace it with it's value.
*/
function tm_base_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'node') {
    $node = $data['node'];
    // Loop through each of the available tokens.
    foreach ($tokens as $name => $original) {
      // Find the desired token by name
      switch ($name) {
        // Token that can be used to build the friendly url for organizations. If the field
        // is not set, it defaults to the title.
        case 'friendly_url_org':
          $new = '';
          if ($node->type == 'organization') {
            if (isset($node->field_friendly_url['und'][0]['value']) && $node->field_friendly_url['und'][0]['value']) {
              $new = $node->field_friendly_url['und'][0]['value'];
            } else {
              $new = 'companies/' . $node->title;
            }
          }
          $replacements[$original] = $new;
          break;
      }
    }
  }
  if ($type == 'user') {
    $user = $data['user'];
    // Loop through each of the available tokens.
    foreach ($tokens as $name => $original) {
      // Find the desired token by name
      switch ($name) {
        // Token that can be used to build the friendly url for users. If the field
        // is not set, it defaults to the title.
        case 'friendly_url_user':
          $new = '';
          if (isset($user->field_friendly_url['und'][0]['value']) && $user->field_friendly_url['und'][0]['value']) {
            $new = $user->field_friendly_url['und'][0]['value'];
          } else {
            $new = 'community/' . $user->name;
          }
          $replacements[$original] = $new;
          break;
      }
    }
  }
  return $replacements;
}
/**
 * Implements hook_field_group_formatter_info().
 */
function tm_base_field_group_formatter_info() {
  return array(
    'display' => array(
      'contained_block' => array(
        'label' => t('TM Contained block '),
        'description' => t('This fieldgroup renders the content in a section with a header.'),
        'format_types' => array('open'),
        'default_formatter' => 'open',
      ),
    ),
  );
}
/**
 * Implements hook_field_group_pre_render().
 *
 * @param Array $elements by address.
 * @param Object $group The Field group info.
 */
function tm_base_field_group_pre_render(&$element, $group, &$form) {
  switch ($group->format_type) {
    case 'contained_block':
      $add = array(
        '#type' => 'markup',
        '#weight' => $group->weight,
      );

      $add['#prefix'] = '<section class="contained contained-block">
        <header class="contained-head">
          <h1 class="prime-title">' . check_plain(t($group->label)) . '</h1>
        </header>
        <div class="contained-body">';
      $add['#suffix'] = '</div></section>';

      $element += $add;

      break
;  }
}
/**
 * Implements hook_ds_field_theme_functions_info().
 */
function tm_base_ds_field_theme_functions_info() {
  return array(
    'theme_ds_field_dl' => t('TM Definition list item'),
    'theme_ds_field_tm_default' => t('TM default field')
  );
}
/**
* Field theming function. Output a definition list item
*/
function theme_ds_field_dl($variables) {
  $output = '';

  // Since a dd can't exist without a dt, we just print the title without checking if the label's hidden.
  $output .= '<dt>' . $variables['label'] . '</dt>';
  foreach ($variables['items'] as $delta => $item) {
    $output .= '<dd class="' . $variables['field_name_css'] . '">' . drupal_render($item) . '</dd>';
  }

  return $output;
}
/**
* Field theming function. Output the default TM field
*/
function theme_ds_field_tm_default($variables) {
  $output = '';

  $output .= '<div class="detail-item ' . $variables['field_name_css'] . '"><h2>' . $variables['label'] . '</h2>';
  foreach ($variables['items'] as $delta => $item) {
    $output .= drupal_render($item);
  }
  $output .= '</div>';

  return $output;
}
