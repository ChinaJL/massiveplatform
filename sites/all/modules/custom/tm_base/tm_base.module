<?php
/**
 * @file
 * Code for the TM Base feature.
 */

include_once 'tm_base.features.inc';

/**
* Implements hook_variable_info().
*/
function tm_base_variable_info($options) {
  // This is the very minimum we need, some descriptive name.
  $variable['tm_base_copright'] = array(
    'title' => t('Copright notice'),
    'description' => t('The copright notice for the site.'),
    'type' => 'string',
    'access' => 'administer content',
  );
  return $variable;
}
/**
* Implements hook_token_info().
*/
function tm_base_token_info() {
  $info['tokens']['node']['friendly_url_org'] = array(
    'name' => t('Friendly URL'),
    'description' => t('This will return a properly formatted friendly url for an organization'),
  );
  $info['tokens']['user']['friendly_url_user'] = array(
    'name' => t('Friendly URL'),
    'description' => t('This will return a properly formatted friendly url for a user'),
  );
  return $info;
}
/**
* Implements hook_tokens(). This hook will operate the token and replace it with it's value.
*/
function tm_base_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'node') {
    $node = $data['node'];
    // Loop through each of the available tokens.
    foreach ($tokens as $name => $original) {
      // Find the desired token by name
      switch ($name) {
        // Token that can be used to build the friendly url for organizations. If the field 
        // is not set, it defaults to the title.
        case 'friendly_url_org':
          $new = '';
          if ($node->type == 'organization') {
            if (isset($node->field_friendly_url['und'][0]['value']) && $node->field_friendly_url['und'][0]['value']) {
              $new = $node->field_friendly_url['und'][0]['value'];
            } else {
              $new = 'companies/' . $node->title;
            }
          }
          $replacements[$original] = $new;
          break;
      }
    }
  }
  if ($type == 'user') {
    $user = $data['user'];
    // Loop through each of the available tokens.
    foreach ($tokens as $name => $original) {
      // Find the desired token by name
      switch ($name) {
        // Token that can be used to build the friendly url for users. If the field 
        // is not set, it defaults to the title.
        case 'friendly_url_user':
          $new = '';
          if (isset($user->field_friendly_url['und'][0]['value']) && $user->field_friendly_url['und'][0]['value']) {
            $new = $user->field_friendly_url['und'][0]['value'];
          } else {
            $new = 'community/' . $user->name;
          }
          $replacements[$original] = $new;
          break;
      }
    }
  }
  return $replacements;
}
/**
 * Implements hook_field_group_formatter_info().
 */
function tm_base_field_group_formatter_info() {
  return array(
    'display' => array(
      'contained_block' => array(
        'label' => t('Contained block '),
        'description' => t('This fieldgroup renders the content in a section with a header.'),
        'format_types' => array('open'),
        'default_formatter' => 'open',
      ),
    ),
  );
}
/**
 * Implements hook_field_group_pre_render().
 *
 * @param Array $elements by address.
 * @param Object $group The Field group info.
 */
function tm_base_field_group_pre_render(&$element, $group, &$form) {
  switch ($group->format_type) {
    case 'contained_block':
      $add = array(
        '#type' => 'markup',
        '#weight' => $group->weight,
      );
    
      $add['#prefix'] = '<section class="contained contained-block">
        <header class="contained-head">
          <h1 class="prime-title">' . check_plain(t($group->label)) . '</h1>
        </header>
        <div class="contained-body">';
      $add['#suffix'] = '</div></section>';

      $element += $add;
      
      break;
  }
}
/**
 * Implements hook_ds_field_theme_functions_info().
 */
function tm_base_ds_field_theme_functions_info() {
  return array(
    'theme_ds_field_dl' => t('TM Definition list item')
  );
}
/**
* Field theming function. Output a definition list item
*/
function theme_ds_field_dl($variables) {
  $output = '';

  // @Todo Add custom class to form
  // $config = $variables['ds-config'];
  
  // Since a dd can't exist without a dt, we just print the title without checking if the label's hidden.
  $output .= '<dt>' . $variables['label'] . '</dt>';
  foreach ($variables['items'] as $delta => $item) {
    $output .= '<dd class="' . $variables['field_name_css'] . '">' . drupal_render($item) . '</dd>';
  }

  return $output;
}