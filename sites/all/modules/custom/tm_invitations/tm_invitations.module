<?php

// before signing up follow all people who invited you
// stop dupe invites even being added in validation

/*
 * Implements hook menu
 */
function tm_invitations_menu(){

  $items['invite'] = array(
    'title' => t('Invite Members'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tm_invitations_invite_form'),
    'access arguments' => array('access content'),
    'class' => 'invite-header',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/* 
 * Invitations form
 */
function tm_invitations_invite_form($form, &$form_state) {
//global $user;
//$account = user_load($user->uid);
//drupal_set_message("<pre>".print_r($account,TRUE)."</pre>");

  $form['invitations'] = array(
    '#type' =>'textarea',
    '#rows' => 5,
    '#description' =>t('Enter up to ten email addresses, one per line, and we\'ll send them an invitation from you.'),
    );
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Send Invitations'),
    '#id' => 'edit-submit'  
  );
  return $form;
}
/* 
 * Form validator
 * Up to ten only
 * valid email addresses from users that don't have an account
 */
function tm_invitations_invite_form_validate($form, &$form_state) {
  $email_list = trim(str_replace(",", "", $form_state['values']['invitations'])); // remove ,
  $emails = explode("\n",$email_list);
  foreach($emails as $email){
    if (!valid_email_address(trim($email))){
      form_set_error('invitations', $email.t(' is not a valid email address'));
    }
    // if user already exists
    if (user_load_by_mail(trim($email))){
      form_set_error('invitations', $email.t(' already has an account'));
    }
  }
  if (count($emails) > 10){
    form_set_error('invitations', t('You have entered more than ten emails'));
  }
}
/* 
 * Submit function
 */
function tm_invitations_invite_form_submit($form, &$form_state) {
  global $user;
  $account = user_load($user->uid);
  $email_list = trim($form_state['values']['invitations']);
  $emails = explode("\n",$email_list);
  $count = count($emails);
  foreach($emails as $email){
    // send out an email
    tm_invitations_send_email($email, $account);
    // add to table
    $invite = db_insert('tm_invitations')
      ->fields(array(
      'email' => trim($email),
      'uid' => $user->uid,
      'followed' => 0,
      'created' => REQUEST_TIME,
    ))
    ->execute();
  } 
  if ($count == 1) {
      drupal_set_message(t("Thanks for spreading the word! Your invitation has been sent."));
  } else {
      drupal_set_message(t("Thanks for spreading the word! You've sent $count invitations!"));
  }
  drupal_goto("user/$user->uid/view");
}

/*
 * Hook user presave
 * If there are multiple inviters, follow them all 
 */
function tm_invitations_user_presave(&$edit, $account, $category){
  if ($account->is_new){
    // check email message against incomplete invites
    $invites = db_select('tm_invitations', 'i')
        ->fields('i')
        ->condition('accepted',0,'=')
        ->condition('email',$account->mail,'=')
        ->execute();
    // loop through invites
    while ($invite = $invites->fetchAssoc()){
      $inviter = user_load($invite['uid']);
      // follow the $invite->uid user.
      // this won't work as there is no uid yet
      /* $flag = flag_get_flag('follow_members');
      $flag->flag('flag', $invite['uid'], $account, TRUE);*/
      // if person who invited is a chapter leader, change to approved
      if (in_array("chapter leader", $inviter->roles)){
        if ($role = user_role_load_by_name('approved user')) {
          $edit['roles'][$role->rid] = $role->rid;
        }
      }
    // update this record as accepted
    db_update('tm_invitations')
      ->fields(array(
        'accepted' => REQUEST_TIME))
      ->condition('id', $invite['id'], '=')
      ->execute();
    }
  }
  else{
    // check email message against unfollowed invites
    // unfortunately have to come back and do this later
    // as there is no UID for flag to use to follow
    $invites = db_select('tm_invitations', 'i')
        ->fields('i')
        ->condition('email',$account->mail,'=')
        ->condition('followed',0,'=')
        ->execute();
    // loop through invites
    while ($invite = $invites->fetchAssoc()){
      // follow the $invite->uid user.
      $flag = flag_get_flag('follow_members');
      $flag->flag('flag', $invite['uid'], $account, TRUE);
      // set as followed
      db_update('tm_invitations')
        ->fields(array(
          'followed' => 1))
        ->condition('id', $invite['id'], '=')
        ->execute();
    }  
  }
}
/* Email sending function */
function tm_invitations_send_email($email, $user){

    if (isset($user->language)) $language = LANGUAGE_NONE;
    else $language = $user->language;
    $name = $user->name;
    if (isset($user->field_user_first_name[$language])){
      $name = $user->field_user_first_name[$language][0]['value'];
      if (isset($user->field_user_last_name[$language])){
        $name .= ' '.$user->field_user_last_name[$language][0]['value'];
      }
    }

    $module = 'tm_invitations';
    $key = 'key';
    $language = language_default();
    $params = array();
    $from = NULL;
    $send = FALSE;    

    // CONSTRUCT MESSAGE
    $member_url = url('user/'.$user->uid, array('absolute'=>TRUE));
    $message = "Hi,";
    $message .= "<br>";
    $message .= "<br>You've been invited to __SITE_NAME__ by " . $name . ".";
    $message .= "<br>";
    $message .= "<br>Join the community by visiting <a href='__SERVER_HTTP__://__SERVER_NAME__/user/register'>__SERVER_NAME__/user/register</a>";
    $message .= "<br>";
    $message .= "<br>__EMAIL_SIGNOFF__";

    // STEP 1. LOAD HTML TEMPLATE
    $template_file = drupal_get_path('module', 'tm_notifications') . '/templates/tm_notifications-email_template.tpl.php';
    $template = file_get_contents($template_file);


    // STEP 2. SET MAIL HTML HEADERS
    $email_message = drupal_mail($module, $key, $email, $language, $params, NULL, $send);
    $email_message['headers']['MIME-Version'] = '1.0';
    $email_message['headers']['Content-Type'] = 'multipart/mixed;';
    $email_message['headers']['Content-Type'] = 'text/html;';


    // STEP 3. SET SUBJECT 
    global $conf;
    $email_message['subject'] = "Your Invitation to __SITE_NAME__";
    $email_message['subject'] = str_replace("__SITE_NAME__", $conf["tm_site_name"], $email_message['subject']);


    // STEP 4. REPLACE BODY AND FOOTER IN HTML TEMPLATE
    $template = str_replace("__EMAIL_BODY__", $message, $template);
    $footer = $conf["tm_email_default_footer"];
    if (isset ($params['footer'])) {
      $footer = $params['footer'];
    }
    $template = str_replace("__EMAIL_FOOTER__", $footer, $template);

    // Other vars
    $template = str_replace("__SERVER_NAME__", $_SERVER["SERVER_NAME"], $template); 
    $template = str_replace("__SERVER_HTTP__", $conf["tm_email_server_http"], $template);  
    $template = str_replace("__SITE_NAME__", $conf["tm_site_name"], $template);  
    $template = str_replace("__EMAIL_SIGNOFF__", $conf["tm_email_signoff"], $template); 

    // STEP 5. LOAD HTML TEMPLATE INTO EMAIL BODY
    $email_message['body'] = $template;

    // STEP 6. SEND EMAIL
    // Retrieve the responsible implementation for this message.
    $system = drupal_mail_system($module, $key);

    // Format the message body.
    $format_message = $system->format($email_message);

    // Send e-mail.
    $result = $system->mail($format_message);



}