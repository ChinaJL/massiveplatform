<?php
/**
 * @file
 * Code for the TM Event signup feature.
 * 
 * @author Daniel da Silva (daniel.silva@flipside.org)
 */

include_once 'tm_event_signup.features.inc';

/**
 * Implement hook_ds_field_info()
 */
function tm_event_signup_ds_fields_info($entity_type) {
  if ($entity_type != 'node') {
    return;
  }
  $fields = array();
  
  $fields['tm_ds_event_seats_count'] = array(
    'title' => t('Seats Available'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('event|*'),
    'function' => '_tm_event_seats_count'
  );

  return array($entity_type => $fields);
}

/**
 * Custom function to get the seats count.
 * Since the join process is done through AJAX there needs to
 * be an equivalent theming function on the javascript side.
 * It can be found in this module's event_signup_flag.js file.
 */
function _tm_event_seats_count($field, $title = NULL) {
  $event = $field['entity'];
  $flag = flag_get_flag('signup');
  
  $count = $flag->get_count($event->nid);
  
  if (isset($event->field_signup_limit[LANGUAGE_NONE][0]['value'])) {
    $limit = $event->field_signup_limit[LANGUAGE_NONE][0]['value'];
    
    // Seats left.
    $left = $limit - $count;
    $left = $left < 0 ? 0 : $left;
    
    return t('@left of @total seats left', array(
      '@left' => $left,
      '@total' => $limit
    ));
  }
  
  // Do not return anything when there's no signup limit.
  // This will make the field not show up.
}

/**
 * Implements hook_flag_validate()
 * When flagging an entity with the signup flag, check if the
 * signup imit was reached.
 */
function tm_event_signup_flag_validate($action, $flag, $entity_id, $account, $skip_permission_check, $flagging) {
  // We're only operating on the "signup" flag, and users may always unflag.
  if ($flag->name == 'signup' && $action == 'flag') {
    $result = _tm_event_signup_can_join($entity_id);
    if (!$result['allowed']) {
      return(array('access-denied' => t('Signup limit reached.')));
    }
  }
}

/**
 * Implements hook_flag_javascript_info_alter()
 * Used to add fields to the javascript response, like the errors and
 * an updated flag count.
 */
function tm_event_signup_flag_javascript_info_alter(&$info, $flag) {
  if ($flag->name === 'signup') {
    $info['errors'] = $flag->get_errors();
    
    // Shortcut.
    $nid = $info['contentId'];
    $event = node_load($nid);
    
    if (isset($event->field_signup_limit[LANGUAGE_NONE][0]['value'])) {
      $limit = $event->field_signup_limit[LANGUAGE_NONE][0]['value'];
      $count = $flag->get_count($nid);
      
      // Seats left.
      $left = $limit - $count;
      $left = $left < 0 ? 0 : $left;
      
      // Variables needed to theme the seats count.
      $info['updatedSeatsLeft'] = $left;
      $info['totalSeats'] = $limit;
    }
    
    // Re-render the links without the error messages.
    // The messages are stored in the "errors" key and should be handled
    // on the javascript side.
    //$info['newLink'] = $flag->theme($flag->is_flagged($nid) ? 'unflag' : 'flag', $nid);
  }
}

/**
 * Implements hook_preprocess_flag()
 * Preprocess the field to add the disabled class.
 */
function tm_event_signup_preprocess_flag(&$variables) {
  // Shortcuts.
  $flag = $variables['flag'];
  $status = $variables['status'];
  $event_id = $variables['entity_id'];
  
  // We're only operating on the "signup" flag, and users may always unflag.
  if ($flag->name == 'signup' && $status == 'unflagged') {
    $result = _tm_event_signup_can_join($event_id);
    if (!$result['allowed']) {
      $variables['flag_classes_array'][] = 'disabled';
    }
    if ($result['error'] == 'Not a Travel Massive Event.') {
      $variables['hide_flag'] = TRUE;
    }
  }
}

/**
 * Checks if the current user can join the event with the given nid.
 * In order to signup, the signup limit can't be reached and the event
 * can't be in the past.
 * 
 * @param $nid
 *   The event id
 */
function _tm_event_signup_can_join($nid) {
  $flag = flag_get_flag('signup');

  $limit = 0;
  $event = node_load($nid);
  
  if (!$event || $event->type != 'event') {
    throw new Exception("Invalid event node. Nid: " . $nid);
  }
  
  // Check if the event has already happened.
  if (isset($event->field_event_date[LANGUAGE_NONE][0]['value'])) {
    $event_date = new DateTime($event->field_event_date[LANGUAGE_NONE][0]['value'], new DateTimeZone('UTC'));
    $now = new DateTime('now', new DateTimeZone('UTC'));

    if ($event_date < $now) {
      // The event already happened.
      return array('allowed' => FALSE, 'error' => 'Event already happened.');
    }
  }
  
  // Check if is external RSVP.
  if (isset($event->field_external_rsvp[LANGUAGE_NONE][0]['value']) && $event->field_external_rsvp[LANGUAGE_NONE][0]['value'] !== '0') {
    return array('allowed' => FALSE, 'error' => 'Not a Travel Massive Event.');
  }
  
  // Check signup limit.
  if (isset($event->field_signup_limit[LANGUAGE_NONE][0]['value'])) {
    $limit = $event->field_signup_limit[LANGUAGE_NONE][0]['value'];
  }
  
  if ($limit === 0) {
    // No limit set.
    return array('allowed' => TRUE, 'error' => NULL);
  }
  
  if ($flag->get_count($nid) >= $limit) {
    return array('allowed' => FALSE, 'error' => 'Signup limit reached.');
  }
  else {
    return array('allowed' => TRUE, 'error' => NULL);
  }
}