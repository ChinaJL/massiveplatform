<?php
/**
 * @file
 * Code for the TM Event signup feature.
 * 
 * @author Daniel da Silva (daniel.silva@flipside.org)
 */

include_once 'tm_event_signup.features.inc';

/**
 * Implement hook_ds_field_info()
 */
function tm_event_signup_ds_fields_info($entity_type) {
  if ($entity_type != 'node') {
    return;
  }
  $fields = array();
  
  $fields['tm_ds_event_seats_count'] = array(
    'title' => t('Seats Available'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('event|*'),
    'function' => '_tm_event_seats_count'
  );

  return array($entity_type => $fields);
}

/**
 * Custom function to get the seats count.
 * Since the join process is done through AJAX there needs to
 * be an equivalent theming function on the javascript side.
 * It can be found in this module's event_signup_flag.js file.
 */
function _tm_event_seats_count($field, $title = NULL) {
  $event = $field['entity'];
  $flag = flag_get_flag('event_register');
  
  $count = $flag->get_count($event->nid);

  $display_external = (isset($event->field_external_rsvp[LANGUAGE_NONE][0]['value']) && $event->field_external_rsvp[LANGUAGE_NONE][0]['value'] !== '0');

  if ($display_external) {
    return t('Please RSVP For This Event');
  }

  if ($count == 0) {
    return t('Be the first to register!');
  }
  
  $count_text = "people are going";
    if ($count == 1) {
      $count_text = "person is going";
    }

  if (isset($event->field_signup_limit[LANGUAGE_NONE][0]['value'])) {
    $limit = $event->field_signup_limit[LANGUAGE_NONE][0]['value'];
    
    // Seats left.
    $left = $limit - $count;
    $left = $left < 0 ? 0 : $left;

    $left_text = "spots left";
    if ($left == 1) {
      $left_text = "spot left";
    }

    if ($left == 0) {
      return t($count . ' ' . $count_text . '.<br>This event is full.<br>');
    }
    
    return t($count . ' ' . $count_text . '.<br>' . $left . ' ' . $left_text . '.');
  }
  
  // No signup limit, must say how many people are going
  return t($count . ' ' . $count_text . '.');
}

/**
 * Implements hook_flag_validate()
 * When flagging an entity with the signup flag, check if the
 * signup imit was reached.
 */
function tm_event_signup_flag_validate($action, $flag, $entity_id, $account, $skip_permission_check, $flagging) {
  $flagged_entity = node_load($entity_id);

  // Only validate the 'signup' flag whenever an 'event' is flagged. Users may always unflag.
  if ($flag->name == 'event_register' && $action == 'flag' && $flagged_entity->type == 'event') {
    $result = _tm_event_display_flag($entity_id);
    if ($result == "display_waitlist") {
      return(array('access-denied' => t('Signup limit reached.')));
    }
  }
}

/**
 * Implements hook_flag_javascript_info_alter()
 * Used to add fields to the javascript response, like the errors and
 * an updated flag count.
 */
function tm_event_signup_flag_javascript_info_alter(&$info, $flag) {
  if ($flag->name === 'event_register') {
    $info['errors'] = $flag->get_errors();
    
    // Shortcut.
    $nid = $info['contentId'];
    $event = node_load($nid);
    
    if (isset($event->field_signup_limit[LANGUAGE_NONE][0]['value'])) {
      $limit = $event->field_signup_limit[LANGUAGE_NONE][0]['value'];
      $count = $flag->get_count($nid);
      
      // Seats left.
      $left = $limit - $count;
      $left = $left < 0 ? 0 : $left;
      
      // Variables needed to theme the seats count.
      $info['updatedSeatsLeft'] = $left;
      $info['totalSeats'] = $limit;
    }
    
    // Re-render the links without the error messages.
    // The messages are stored in the "errors" key and should be handled
    // on the javascript side.
    //$info['newLink'] = $flag->theme($flag->is_flagged($nid) ? 'unflag' : 'flag', $nid);
  }
}

/**
 * Implements hook_preprocess_flag()
 * Preprocess the register and waitlist flags to display or hide them
 */
function tm_event_signup_preprocess_flag(&$variables) {

  // Shortcuts.
  $flag = $variables['flag'];
  $status = $variables['status'];
  $event_id = $variables['entity_id'];
  $flagged_entity = node_load($event_id);

  // Get flag for event
  // Either: show_closed, show_external_rsvp, show_register, show_waitlist, or show_not_approved
  if (isset($flagged_entity->type)) {
    if ($status == 'unflagged' && $flagged_entity->type == 'event') {
      $event_flag = _tm_event_display_flag($event_id);

      // flag is event_register
      if ($flag->name == "event_register") { //} && $status == 'unflagged') {
          $variables['hide_flag'] = ($event_flag != "show_register");

          // the register flag may be hidden but also send through variables to flag.tpl.php to
          // indicate whether to show closed event, external_rsvp, etc.
          $variables['event_flag'] = $event_flag;
      }

      // flag is event_waitlist
      if ($flag->name == "event_waitlist") {
         $variables['hide_flag'] = ($event_flag != "show_waitlist");
      }
    }
  }
  
}

/**
 * Checks if the current user can join the event with the given nid.
 * In order to signup, the signup limit can't be reached and the event
 * can't be in the past.
 * 
 * returns show_closed, show_external_rsvp, show_register, show_waitlist, or show_not_approved
 * 
 * @param $nid
 *   The event id
 */
function _tm_event_display_flag($nid) {

  $flag = flag_get_flag('event_register');

  $limit = 0;
  $event = node_load($nid);

  if (!$event || $event->type != 'event') {
    throw new Exception("Invalid event node. Nid: " . $nid);
  }
  
  // Check if is external RSVP.
  // Is external event
  $display_external = (isset($event->field_external_rsvp[LANGUAGE_NONE][0]['value']) && $event->field_external_rsvp[LANGUAGE_NONE][0]['value'] !== '0');
  if ($display_external) {
    return 'show_external_rsvp';
  }

  // Check if we are approved
  global $user;
  $approved_members_only = $event->field_approved_members_only[LANGUAGE_NONE][0]['value'];
  $approved_member = in_array("approved user", $user->roles);
  if ($approved_members_only and !$approved_member) {
    return 'show_not_approved';
  }
  
  // Check if the event has already happened
  if (isset($event->field_event_date[LANGUAGE_NONE][0]['value'])) {
    
    $timezone = _tm_get_event_timezone($event);

    $event_date = new DateTime($event->field_event_date[LANGUAGE_NONE][0]['value'], new DateTimeZone($timezone));
    $now = new DateTime('now', new DateTimeZone($timezone));

    if ($event_date < $now) {
      return 'show_closed';
    }
  }

  // Check signup limit.
  if (isset($event->field_signup_limit[LANGUAGE_NONE][0]['value'])) {
    $limit = $event->field_signup_limit[LANGUAGE_NONE][0]['value'];
  }
  
  // No signup limit, show register
  if ($limit === 0) {
    return 'show_register';
  }
  
  // Signup limit
  if ($flag->get_count($nid) >= $limit) {
    // Show waitlist, event booked out
    global $user;
    if ($flag->is_flagged($nid, $user->uid)) {
      return 'show_register';
    } else {
      // not registered, show waitlist
      return 'show_waitlist';
    }
    
  }
  else {
    // Spare seats, show register
    return 'show_register';
  }
}